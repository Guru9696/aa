slip 1 

Q.1	Write a Java Program to implement I/O Decorator for converting uppercase letters to lower case letters.	[20 M]


import java.io.*;
import java.util.*;

class LowerCaseInputStream extends FilterInputStream
{
        public LowerCaseInputStream(InputStream in)
        {
                super(in);
        }
        public int read() throws IOException
        {
                int c=super.read();
                return (c==-1?c:Character.toLowerCase((char)c));
        }
        public int read(byte[] b,int offset,int len) throws IOException
        {
                int result =super.read(b,offset,len);
                for (int i=offset;i<offset+result;i++)
                {
                        b[i]=(byte)Character.toLowerCase((char)b[i]);
                }
                return result;
        }
}
public class slip1_20
{
        public static void main(String[] args) throws IOException
        {
        int c;
        try
        {

InputStream in =new LowerCaseInputStream(new BufferedInputStream(new 	    	        FileInputStream("a.txt")));
                while((c = in.read()) >= 0)
                {
                        System.out.print((char)c);
                       
                }
                System.out.println();
                in.close();
        }
        catch(IOException e)
        {
                e.printStackTrace();
        }
     }
}





Q.2	Write a Python program to prepare Scatter Plot for Iris Dataset	[20 M]

import pandas as pd
import matplotlib.pyplot as plt

iris_data = pd.read_csv("iris2.csv")
iris_data

versicolor = iris_data[iris_data.variety == "Versicolor"]
setosa = iris_data[iris_data.variety =="Setosa"]
virginica = iris_data[iris_data.variety == "Virginica"]

fig, ax = plt.subplots()
fig.set_size_inches(8, 8)

points = ax.scatter(versicolor["petal.length"], versicolor["petal.width"], label="Versicolor")

points.set_facecolor("green")

ax.scatter(setosa["petal.length"], setosa["petal.width"], label="Setosa", marker="x", facecolor="blue")
ax.scatter(virginica["petal.length"], virginica["petal.width"], label="Virginica", marker="s", facecolor="red")

ax.set_xlabel("Petal Length (cm)")
ax.set_ylabel("Petal Width (cm)")
ax.set_title("Iris Petal Sizes")
ax.legend()



Q.3	Create an HTML form that contain the Student Registration details and write a JavaScript to validate Student first and last name as it should not contain other than alphabets and age should be between 18 to 50.

assi1.html 

<!DOCTYPE html>
<html lang="en"><head>
<meta charset="utf-8">
<title>JavaScript Form Validation using a sample Employee registration form</title>
<meta name="keywords" content="example, JavaScript Form Validation, Sample registration form" />
<meta name="description" content="This document is an example of JavaScript Form Validation using a sample registration form. " />
<link rel='stylesheet' href='assi1.css' type='text/css' />
<script src="assi1.js">
</script>
</head>
<body onload="document.registration.userid.focus();"bgcolor="orange">
<h1>Student Registration Form</h1>
<form name='registration' onSubmit="return formValidation();">
<ul>
<li><label for="first">First Name:</label></li>
<li><input type="text" name="first" size="50" required/></li>
<li><label for="last">Last Name:</label></li>
<li><input type="text" name="last" size="50" required/></li>

<li><label for="birth">Birth of date:</label></li>
<li><input type="date" id="birth" name="birth" ></li>


<li><input type="submit" name="submit" value="Submit" /></li>
</ul>
</form>
</body>
</html>

assi1.css

h1 {
    margin-left: 35%;
    }
    form{

        margin-left: 30%;
    }
    form li {
    list-style: none;
    margin-bottom: 5px;
    }
    
    form ul li label{
    float: left;
    clear: left;
    width: 100px;
    text-align: right;
    margin-right: 10px;
    font-family:Verdana, Arial, Helvetica, sans-serif;
    font-size:14px;
    }
    
    form ul li input, select, span {
    float: left;
    margin-bottom: 10px;
    }
    
    form textarea {
    float: left;
    width: 350px;
    height: 150px;
    }
    
    [type="submit"] {
    clear: left;
    margin: 20px 0 0 230px;
    font-size:18px
    }
    
    p {
    margin-left: 70px;
    font-weight: bold;
    }

assi1.js





function formValidation() {
    var first = document.registration.first;
    var last = document.registration.last;

    var birth = document.registration.birth;
    var submit = document.registration.submit;


    if (allLetter1(first)) {
        if (allLetter2(last)) {

            if (allb(birth)) {
                if (sub(submit)) {

                }
            }

        }
    }
    return false;
}
function allLetter1(first) {
    var letters = /^[A-Za-z]+$/;
    if (first.value.match(letters)) {
        //alert('employee name submitted');
        return true;
    }
    else {
        alert('employee first name must have alphabet characters only');
        first.focus();
        return false;
    }
}
function allLetter2(last) {
    var letters = /^[A-Za-z]+$/;
    if (last.value.match(letters)) {
        //  alert("employee name submitted");
        return true;
    }
    else {
        alert('employee last name must have alphabet characters only');
        last.focus();
        return false;
    }
}

function allb(birth) {


    var birth_len = birth.value.length;
    if (birth_len == 0) {
        alert("birth date should not be empty");
        birth.focus();
        return false;
    }
    else {

        let CurrentDate = new Date();
        let birthDate = new Date(birth.value);
        let diff = new Date(CurrentDate - birthDate)
        let age = Math.abs(diff.getUTCFullYear() - 1970);

        if (age >= 18 && age <= 50) {
            alert('Birth date is between the 18 to 50 ');
            if (submit.onClick()) {
                return true;
            }


        } else {
            alert('Birth date not between the 18 to 50');
            return false;


        }

        return true;
    }
}

Slip 2



Q.1	Write a Java Program to implement Singleton pattern for multithreading[20 M]


public class slip2_25
{
public static void main(String s[])

{
ABC obj1 = ABC.getInstance();
ABC obj2 = ABC.getInstance();
obj1.showMessage();
}
}
class ABC
{
static ABC obj = new ABC();
String name = "Gaurav";
private ABC() {}

public static ABC getInstance()
{

return obj;

}
public void showMessage()
   {
      System.out.println("Hello "+name+" !!!!! ");
   }
}


Q.2	Write a python program to find all null values in a given dataset and remove them.[20 M]

mycode

import pandas as pd

df = pd.read_csv('iris3.csv')
df

newdf = df.dropna()

print(newdf.to_string())

****sir code***
import pandas as pd
df = pd.read_csv("forestfires.csv")
df

null = df.isnull()
null

df = df.dropna()
df
df.to_csv('cleaned_dataset.csv', index=False)


Q.3	Create an HTML form that contain the Employee Registration details and write a JavaScript to validate DOB, Joining Date, and Salary.
*****madam code *****
<html>
    <head>
        <script type="text/javascript">
            function validate(){
            var regName=/^[a-zA-z]+[a-zA-Z]+$/;
            var dateformatdob = /^(0?[1-9]|[12][0-9]|3[01])[\/\-](0?[1-9]|1[012])[\/\-]\d{4}$/;
            var dateformatjdate = /^(0?[1-9]|[12][0-9]|3[01])[\/\-](0?[1-9]|1[012])[\/\-]\d{4}$/;
            var salaryformat=/^\d{1,6}(?:\.\d{0,2})?$/
            var name=document.getElementById("name").value;
            var dob=document.getElementById("dob").value;
            var jdate=document.getElementById("jdate").value;
            var salary=document.getElementById("salary").value;
            
            if(!regName.test(name))
                alert("invalid name is given");
            if(!dateformatjdate.test(jdate))
                alert("invalid joining date is given");
            if(!dateformatdob.test(dob))
                alert("invalid date of birth is given");
            if(!salaryformat.test(salary))
                alert("invalid salary");
        }
        </script>
    </head>
<body>
    <form>
        <h1>Employee Rsgistration Details</h1>
            employee name :
            <input type="text" name="fname" id="name"><br>
            date of birth :
            <input type="text" name="dob" id="dob"><br>
            joining date :
            <input type="text" name="jdate" id="jdate"><br>
            salary :
            <input type="text" name="salary" id="salary"><br>
            <input type="button" value="validate" onclick="validate()">
    </form>
</body>
</html>
 

 ****madam code end****

assi2.html 

<!DOCTYPE html>
<html lang="en"><head>
<meta charset="utf-8">
<title>JavaScript Form Validation using a sample Employee registration form</title>
<meta name="keywords" content="example, JavaScript Form Validation, Sample registration form" />
<meta name="description" content="This document is an example of JavaScript Form Validation using a sample registration form. " />
<link rel='stylesheet' href='assi2.css' type='text/css' />
<script src="assi2.js">
</script>
</head>
<body onload="document.registration.userid.focus();"bgcolor="orange">
<h1>Employee Registration Form</h1>
<form name='registration' onSubmit="return formValidation();">
<ul>
<li><label for="first">First Name:</label></li>
<li><input type="text" name="first" size="50" required/></li>
<li><label for="last">Last Name:</label></li>
<li><input type="text" name="last" size="50" required/></li>
<li><label for="empid">Employee id:</label></li>
<li><input type="text"name="empid" size="50"required/></li>
<li><label for="birth">Birth of date:</label></li>
<li><input type="date" id="birth" name="birth" ></li>
<li><label for="address">Address:</label></li>
<li><input type="text" name="address" id=""size="50" required/></li>
<li><label for="country">Country:</label></li>
<li><select name="country" required>
<option selected="" value="Default">(Please select a country)</option>
<option value="AF">Australia</option>
<option value="AL">Canada</option>
<option value="DZ">India</option>
<option value="AS">Russia</option>
<option value="AD">USA</option>
</select></li>
<li><label for="no">Contact no:</label></li>
<li><input type="number" id="" name="no" required></li>
<li><label for="jdate">Date of joining:</label></li>
<li><input type="date" id="" name="jdate" ></li>
<li><label for="email">Email:</label></li>
<li><input type="text" name="email" size="50" required/></li>
<li><label id="gender">Gender:</label></li>
<li><input type="radio" name="male" value="Male" /><span>Male</span></li>
<li><input type="radio" name="female" value="Female" /><span>Female</span></li>

<li><input type="submit" name="submit" value="Submit" /></li>
</ul>
</form>
</body>
</html>

assi2.css

h1 {
    margin-left: 35%;
    }
    form{

        margin-left: 30%;
    }
    form li {
    list-style: none;
    margin-bottom: 5px;
    }
    
    form ul li label{
    float: left;
    clear: left;
    width: 100px;
    text-align: right;
    margin-right: 10px;
    font-family:Verdana, Arial, Helvetica, sans-serif;
    font-size:14px;
    }
    
    form ul li input, select, span {
    float: left;
    margin-bottom: 10px;
    }
    
    form textarea {
    float: left;
    width: 350px;
    height: 150px;
    }
    
    [type="submit"] {
    clear: left;
    margin: 20px 0 0 230px;
    font-size:18px
    }
    
    p {
    margin-left: 70px;
    font-weight: bold;
    }

    assi2.js



function formValidation() {
    var first = document.registration.first;
    var last = document.registration.last;
    var empid = document.registration.empid;
    var birth = document.registration.birth;
    //var DOB = document.registration.birth;
    var uadd = document.registration.address;
    var ucountry = document.registration.country;
    var no = document.registration.no;
    var jdate = document.registration.jdate;
    var uemail = document.registration.email;
    var umgen = document.registration.male;
    var ufgen = document.registration.female;

    if (allLetter1(first)) {
        if (allLetter2(last)) {
            if (alid(empid)) {
                if (allb(birth)) {
                    if (aladd(uadd)) {
                        if (countryselect(ucountry)) {
                            if (allcontact(no)) {
                                if (alljdate(jdate,birth)) {
                                    if (ValidateEmail(uemail)) {
                                        if (validgender(umgen, ufgen)) {

                                        }
                                    }
                                }
                            }
                        }
                    }

                }
            }

        }
    }
    return false;
}
function allLetter1(first) {
    var letters = /^[A-Za-z]+$/;
    if (first.value.match(letters)) {
        //alert('employee name submitted');
        return true;
    }
    else {
        alert('employee first name must have alphabet characters only');
        first.focus();
        return false;
    }
}
function allLetter2(last) {
    var letters = /^[A-Za-z]+$/;
    if (last.value.match(letters)) {
        //  alert("employee name submitted");
        return true;
    }
    else {
        alert('employee last name must have alphabet characters only');
        last.focus();
        return false;
    }
}
function alid(empid) {
    var letters = /^[0-9a-zA-Z]+$/;
    if (empid.value.match(letters)) {
        // alert("employee id submitted");
        return true;
    }
    else {
        alert('employee id must have alphanumeric characters only');
        uadd.focus();
        return false;
    }
}
function allb(birth) {
    
    
    var birth_len = birth.value.length;
    if (birth_len == 0) {
        alert("birth date should not be empty");
        birth.focus();
        return false;
    }
    else {

        let CurrentDate = new Date();
        let birthDate = new Date(birth.value);
        let diff = new Date(CurrentDate - birthDate)
        let age = Math.abs(diff.getUTCFullYear() - 1970);
     
        //alert(age);
    
    

        if (birthDate > CurrentDate) {
            alert('Birth date is greater than the current date.');

        } else if (age < 14) {
            alert('You are not 14+ years old');
           // alert('Given date is not greater than the current date.');
          
          
        
    }

    // alert("birth of date submitted");
    return true;
}
}
function aladd(uadd) {
    var letters = /^[0-9a-zA-Z]+$/;
    if (uadd.value.match(letters)) {
        //   alert("address submitted");
        return true;
    }
    else {
        alert('address must have alphanumeric characters only');
        uadd.focus();
        return false;
    }
}
function countryselect(ucountry) {
    if (ucountry.value == "Default") {
        alert('Select your country from the list');
        ucountry.focus();
        return false;
    }
    else {
        //   alert("country submitted");
        return true;
    }
}
function allcontact(no) {
    var number = /^[0-9]+$/;
    if (no.value.match(number)) {
        // alert("Contact Number submitted");
        return true;
    }
    else {
        alert('Contact no must have numeric numbers only');
        no.focus();
        return false;
    }
}
function alljdate(jdate,birth) {
    var jdate_len = jdate.value.length;
    if (jdate_len == 0) {
        alert("date of joining should not be empty");
        birthday.focus();
        return false;
    }
    else {
        let CurrentDate = new Date();
        let jjdate= new Date(jdate.value);
        let birthDate = new Date(birth.value);
        let diff = new Date(jjdate - birthDate)
        let age = Math.abs(diff.getUTCFullYear() - 1970);
     

        if (jjdate > CurrentDate) {
            alert('Please select correct date');

        } else if (age < 14) {
            alert('You are not 14+ years old');
           // alert('Given date is not greater than the current date.');
          
          
        
    }
    }
    // alert("date of joining submitted");
    return true;
}
function ValidateEmail(uemail) {
    var mailformat = /^\w+([\.-]?\w+)*@\w+([\.-]?\w+)*(\.\w{2,3})+$/;
    if (uemail.value.match(mailformat)) {
        // alert("email address is submitted");
        return true;
    }
    else {
        alert("You have entered an invalid email address!");
        uemail.focus();
        return false;
    }
}
function validgender(umgen, ufgen) {
    x = 0;
    if (umgen.checked) {
        x++;
    } if (ufgen.checked) {
        x++;
    }
    if (x == 0) {
        alert('Select Male/Female');
        umgen.focus();
        return false;
    }
    else {
        window.location.reload()
        return true;
    }
}


slip 3

Q.1	Write a JAVA Program to implement built-in support (java.util.Observable) Weather station with	members temperature, humidity, pressure and methods mesurmentsChanged(), setMesurment(), getTemperature(), getHumidity(), getPressure()		[20 M]

import java.util.*;

interface Observer {
    public void update(float temp, float humidity, float pressure);
}

interface DisplayElement {
    public void display();
}

interface Subject {
    public void registerObserver(Observer o);

    public void removeObserver(Observer o);

    public void notifyObservers();
}

class WeatherData implements Subject {
    private ArrayList<Observer> observers;
    private float temperature;
    private float humidity;
    private float pressure;

    public WeatherData() {
        observers = new ArrayList<>();
    }

    public void registerObserver(Observer o) {
        observers.add(o);
    }

    public void removeObserver(Observer o) {
        int i = observers.indexOf(o);
        if (i >= 0) {
            observers.remove(i);
        }
    }

    public void notifyObservers() {
        for (int i = 0; i < observers.size(); i++) {
            Observer observer = (Observer) observers.get(i);
            observer.update(temperature, humidity, pressure);
        }
    }

    public void measurementsChanged() {
        notifyObservers();
    }

    public void setMeasurements(float temperature, float humidity, float pressure) {
        this.temperature = temperature;
        this.humidity = humidity;
        this.pressure = pressure;
        measurementsChanged();
    }

    public float getTemperature() {
        return temperature;
    }

    public float getHumidity() {
        return humidity;
    }

    public float getPressure() {
        return pressure;
    }
}

class ForecastDisplay implements Observer, DisplayElement {
    private float currentPressure = 29.92f;
    private float lastPressure;
    private WeatherData weatherData;

    public ForecastDisplay(WeatherData weatherData) {
        this.weatherData = weatherData;
        weatherData.registerObserver(this);
    }

    public void update(float temp, float humidity, float pressure) {
        lastPressure = currentPressure;
        currentPressure = pressure;

        display();
    }

    public void display() {
        System.out.print("Forecast: ");
        if (currentPressure > lastPressure) {
            System.out.println("Improving weather on the way!");
        } else if (currentPressure == lastPressure) {
            System.out.println("More of the same");
        } else if (currentPressure < lastPressure) {
            System.out.println("Watch out for cooler weather, rainy weather");
        }
    }
}

class HeatIndexDisplay implements Observer, DisplayElement {
    float heatIndex = 0.0f;
    private WeatherData weatherData;

    public HeatIndexDisplay(WeatherData weatherData) {
        this.weatherData = weatherData;
        weatherData.registerObserver(this);
    }

    public void update(float t, float rh, float pressure) {
        heatIndex = computeHeatIndex(t, rh);
        display();
    }

    private float computeHeatIndex(float t, float rh) {
        float index = (float) ((16.923 + (0.185212 * t) + (5.37941 * rh) - (0.100254 * t * rh)
                + (0.00941695 * (t * t)) + (0.00728898 * (rh * rh))
                + (0.000345372 * (t * t * rh)) - (0.000814971 * (t * rh * rh)) +
                (0.0000102102 * (t * t * rh * rh)) - (0.000038646 * (t * t * t)) + (0.0000291583 *
                        (rh * rh * rh))
                + (0.00000142721 * (t * t * t * rh)) +
                (0.000000197483 * (t * rh * rh * rh)) - (0.0000000218429 * (t * t * t * rh * rh)) +
                0.000000000843296 * (t * t * rh * rh * rh)) -
                (0.0000000000481975 * (t * t * t * rh * rh * rh)));
        return index;
    }

    public void display() {
        System.out.println("Heat index is " + heatIndex);
    }
}

class StatisticsDisplay implements Observer, DisplayElement {
    private float maxTemp = 0.0f;
    private float minTemp = 200;
    private float tempSum = 0.0f;
    private int numReadings;
    private WeatherData weatherData;

    public StatisticsDisplay(WeatherData weatherData) {
        this.weatherData = weatherData;
        weatherData.registerObserver(this);
    }

    public void update(float temp, float humidity, float pressure) {
        tempSum += temp;
        numReadings++;

        if (temp > maxTemp) {
            maxTemp = temp;
        }

        if (temp < minTemp) {
            minTemp = temp;
        }

        display();
    }

    public void display() {
        System.out.println("Avgerage/Maximum/Minimum temperature = " + (tempSum / numReadings)
                + "/" + maxTemp + "/" + minTemp);
    }
}

class CurrentConditionsDisplay implements Observer, DisplayElement {
    private float temperature;
    private float humidity;
    private Subject weatherData;

    public CurrentConditionsDisplay(Subject weatherData) {
        this.weatherData = weatherData;
        weatherData.registerObserver(this);
    }

    public void update(float temperature, float humidity, float pressure) {
        this.temperature = temperature;
        this.humidity = humidity;
        display();
    }

    public void display() {
        System.out.println("Current conditions: " + temperature
                + "F degrees and " + humidity + "% humidity");
    }
}
//weather.java main file
class  slip3_18_28{

    public static void main(String[] args) {
        WeatherData weatherData = new WeatherData();

        CurrentConditionsDisplay currentDisplay = new CurrentConditionsDisplay(weatherData);
        StatisticsDisplay statisticsDisplay = new StatisticsDisplay(weatherData);
        ForecastDisplay forecastDisplay = new ForecastDisplay(weatherData);

        weatherData.setMeasurements(70, 55, 40.4f);
        weatherData.setMeasurements(72, 60, 39.2f);
        weatherData.setMeasurements(68, 80, 39.2f);
    }
}


Q. 2. Write a python program to make Categorical values in numeric format for a given dataset	[20 M]
***sir code **
from sklearn.preprocessing import LabelEncoder
import pandas as pd

df = pd.read_csv("forestfires.csv")
df.sample(5)

label_encoder = LabelEncoder()
df["Numneric_month"] = label_encoder.fit_transform(df["month"])
df["Numneric_day"] = label_encoder.fit_transform(df["day"])
df.sample(5)

df.to_csv('encoded_dataset.csv', index=False)


****my code***

import pandas as pd
from sklearn.preprocessing import LabelEncoder


df = pd.read_csv('jamesbond.csv')
 
#printing DataFrame
df


# Creating a instance of label Encoder.
le = LabelEncoder()
 
# Using .fit_transform function to fit label
# encoder and return encoded label
label = le.fit_transform(df['show'])
 
# printing label
label

df.drop("show", axis=1, inplace=True)
 
# Appending the array to our dataFrame
# with column name 'Purchased'
df["show"] = label
 
# printing Dataframe
df


Q. 3. Create an HTML form for Login and write a JavaScript to validate email ID using Regular Expression.
***madam code***
<html>
<head>
  <script>
    function validateform(){  
      var email = document.getElementById("email").value;
      var password = document.getElementById("psw").value;
      if (!(/^\w+([\.-]?\w+)*@\w+([\.-]?\w+)*(\.\w{2,3})+$/.test(email)))
          alert("You have entered an invalid email address!");
    }
    </script>
</head>
<body>
  <form name="myform" onsubmit="return validateform()">
      <h1>Please fill in this form to Login.</h1>
     
      Email :
      <input type="text" autocomplete="off" placeholder="Enter Email" name="email" id="email" required><br>
      Password :
      <input type="password" autocomplete="off" placeholder="Enter Password" name="psw" id="psw" required><br>
      <button type="submit" class="registerbtn">Register</button>
  </form>
</body>
</html>


***mycode ***

assi3.html
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <!-- <link rel="stylesheet" href="style.css"> -->
    <link rel="stylesheet" href="assi3.css">

    <title>Java Script Demos</title>
    <script language="javascript">
        var flag;
        function ValidationFrom(frm) {

    

            var mailformat = /^\w+([\.-]?\w+)*@\w+([\.-]?\w+)*(\.\w{2,3})+$/;
            if (txtEmail.value.match(mailformat)) {
                alert("Valid email address!");
                document.form1.text1.focus();
                return true;
            }
            else {
                alert("You have entered an invalid email address!");
                document.form1.text1.focus();
                return false;
            }


        }


var myInput = document.getElementById("psw");
var letter = document.getElementById("letter");
var capital = document.getElementById("capital");
var number = document.getElementById("number");
var length = document.getElementById("length");

console.log(myInput);

// When the user clicks on the password field, show the message box
myInput.onfocus = function() {
  document.getElementById("message").style.display = "block";
}

// When the user clicks outside of the password field, hide the message box
myInput.onblur = function() {
  document.getElementById("message").style.display = "none";
}

// When the user starts to type something inside the password field
myInput.onkeydown = function() {

  
  // Validate lowercase letters
  var lowerCaseLetters = /[a-z]/g;
  if(myInput.value.match(lowerCaseLetters)) {
    letter.classList.remove("invalid");
    letter.classList.add("valid");
   
  } else {
    letter.classList.remove("valid");
    letter.classList.add("invalid");
}

  // Validate capital letters
  var upperCaseLetters = /[A-Z]/g;
  if(myInput.value.match(upperCaseLetters)) {
    capital.classList.remove("invalid");
    capital.classList.add("valid");
  } else {
    capital.classList.remove("valid");
    capital.classList.add("invalid");
  }

  // Validate numbers
  var numbers = /[0-9]/g;
  if(myInput.value.match(numbers)) {
    number.classList.remove("invalid");
    number.classList.add("valid");
  } else {
    number.classList.remove("valid");
    number.classList.add("invalid");
  }

  // Validate length
  if(myInput.value.length >= 8) {
    length.classList.remove("invalid");
    length.classList.add("valid");
  } else {
    length.classList.remove("valid");
    length.classList.add("invalid");
  }
}
      
    </script>
</head>

<body>
 
    <form name="frm1" id="frm1" onsubmit="return ValidationFrom(this)">
        <table align="center" class="tb1" cellspacing="5" cellpadding="5">

            <caption> REGISTRATION FORM</caption>
            <thead>

            </thead>

            <tbody>

                 <tr>
                    <td> Email</td>
                    <td> <input type="text" id="txtEmail" size="30" class="brd"> </td>
                 
                </tr>
                <tr>
                    <td> Password</td>
                    <td> <input type="password" id="psw" size="30" class="brd" pattern="(?=.*\d)(?=.*[a-z])(?=.*[A-Z]).{8,}" required> </td>
                    
                </tr> 








                <td> <input type="submit" id="btnsubmit" value="Submit" class="btn" > </td>






                
            </tbody>
          
        </table>


      

    </form>
    <div id="message">
      <h3>Password must contain the following:</h3>
      <p id="letter" class="invalid">A <b>lowercase</b> letter</p>
      <p id="capital" class="invalid">A <b>capital (uppercase)</b> letter</p>
      <p id="number" class="invalid">A <b>number</b></p>
      <p id="length" class="invalid">Minimum <b>8 characters</b></p>
    </div>

   
</body>

</html>

assi3.css

input {
  width: 100%;
  padding: 12px;
  border: 1px solid #ccc;
  border-radius: 4px;
  box-sizing: border-box;
  margin-top: 6px;
  margin-bottom: 16px;
}

/* Style the submit button */
input[type=submit] {
  background-color: #04AA6D;
  color: white;
  
}

.container {
  background-color: #f1f1f1;
  padding: 20px;
}

 #message{

  background: #f0f4f7;
  color: #000;
  position: relative;
  padding: 20px;
  margin-top: 10px;
}

#message p {
  padding: 10px 35px;
  font-size: 18px;
}


.valid {
  color: green;
}

.valid:before {
  position: relative;
  left: -35px;
  /* content: "&#10004;"; */
}

.invalid {
  color: rgb(255, 0, 0);
}

.invalid:before {
  position: relative;
  left: -35px;
  /* content: "&#10006;"; */
}



slip 4

Q.1	Write a Java Program to implement Factory method for Pizza Store with createPizza(), orederPizza(), prepare(), Bake(), cut(), box(). Use this to create variety of pizza’s
like NyStyleCheesePizza, ChicagoStyleCheesePizza etc.	[20 M]


import java.util.ArrayList; 
class ChicagoPizzaStore extends PizzaStore 
{Pizza createPizza(String item) 
{if (item.equals("cheese")) 
{return new ChicagoStyleCheesePizza(); 
} 
else if (item.equals("veggie")) 
{return new ChicagoStyleVeggiePizza(); 
} 
else if (item.equals("clam")) 
{return new ChicagoStyleClamPizza(); 
} 
else if (item.equals("pepperoni")) 
{return new ChicagoStylePepperoniPizza(); 
} 
else return null; 
}} 
class ChicagoStyleCheesePizza extends Pizza 
{public ChicagoStyleCheesePizza() 
{ 
name = "Chicago Style Deep Dish Cheese Pizza"; 
dough = "Extra Thick Crust Dough"; 
sauce = "Plum Tomato Sauce"; 
toppings.add("Shredded Mozzarella Cheese"); 
}

void cut() 
{System.out.println("Cutting the pizza into square slices"); 
}} 
class ChicagoStyleClamPizza extends Pizza 
{public ChicagoStyleClamPizza() 
{ 
name = "Chicago Style Clam Pizza"; 
dough = "Extra Thick Crust Dough"; 
sauce = "Plum Tomato Sauce"; 
toppings.add("Shredded Mozzarella Cheese"); 
toppings.add("Frozen Clams from Chesapeake Bay"); 
} 
void cut() 
{System.out.println("Cutting the pizza into square slices"); 
}} 
class ChicagoStylePepperoniPizza extends Pizza 
{public ChicagoStylePepperoniPizza() 
{ 
name = "Chicago Style Pepperoni Pizza"; 
dough = "Extra Thick Crust Dough"; 
sauce = "Plum Tomato Sauce"; 
toppings.add("Shredded Mozzarella Cheese"); 
toppings.add("Black Olives"); 
toppings.add("Spinach"); 
toppings.add("Eggplant"); 
toppings.add("Sliced Pepperoni"); 
} 
void cut() 
{System.out.println("Cutting the pizza into square slices"); 
}} 
class ChicagoStyleVeggiePizza extends Pizza 
{public ChicagoStyleVeggiePizza() 
{name = "Chicago Deep Dish Veggie Pizza"; 
dough = "Extra Thick Crust Dough"; 
sauce = "Plum Tomato Sauce"; 
toppings.add("Shredded Mozzarella Cheese"); 
toppings.add("Black Olives"); 
toppings.add("Spinach"); 
toppings.add("Eggplant"); 
} 
void cut() 
{System.out.println("Cutting the pizza into square slices"); 
}} 
class DependentPizzaStore 
{public Pizza createPizza(String style, String type) 
{ Pizza pizza = null; 
if (style.equals("NY")) 
{if (type.equals("cheese")) 
{pizza = new NYStyleCheesePizza(); 
} 
else if (type.equals("veggie")) 
{pizza = new NYStyleVeggiePizza(); 
} 
else if (type.equals("clam")) 
{pizza = new NYStyleClamPizza(); 
} 
else if (type.equals("pepperoni")) 
{pizza = new NYStylePepperoniPizza(); 
}} 
else if (style.equals("Chicago")) 
{if (type.equals("cheese")) 
{pizza = new ChicagoStyleCheesePizza(); 
} 
else if (type.equals("veggie")) 
{pizza = new ChicagoStyleVeggiePizza(); 
} 
else if (type.equals("clam")) 
{pizza = new ChicagoStyleClamPizza(); 
} 
else if (type.equals("pepperoni")) 
{pizza = new ChicagoStylePepperoniPizza(); 
}} 
else 
{System.out.println("Error: invalid type of pizza"); 
return null; 
} 
pizza.prepare(); 
pizza.bake(); 
pizza.cut(); 
pizza.box(); 
return pizza; 
}} 
class NYPizzaStore extends PizzaStore 
{Pizza createPizza(String item) 
{if (item.equals("cheese")) 
{return new NYStyleCheesePizza(); 
} 
else if (item.equals("veggie")) 
{return new NYStyleVeggiePizza(); 
} 
else if (item.equals("clam")) 
{return new NYStyleClamPizza(); 
} 
else if (item.equals("pepperoni")) 
{return new NYStylePepperoniPizza(); 
} 
else return null; 
}} 
class NYStyleCheesePizza extends Pizza 
{public NYStyleCheesePizza() 
{ 
name = "NY Style Sauce and Cheese Pizza"; 
dough = "Thin Crust Dough"; 
sauce = "Marinara Sauce"; 
toppings.add("Grated Reggiano Cheese"); 
}} 
class NYStyleClamPizza extends Pizza 
{public NYStyleClamPizza() 
{ 
name = "NY Style Clam Pizza"; 
dough = "Thin Crust Dough"; 
sauce = "Marinara Sauce"; 
toppings.add("Grated Reggiano Cheese"); 
toppings.add("Fresh Clams from Long Island Sound"); 
}} 
class NYStylePepperoniPizza extends Pizza 
{public NYStylePepperoniPizza() 
{ 
name = "NY Style Pepperoni Pizza"; 
dough = "Thin Crust Dough"; 
sauce = "Marinara Sauce"; 
toppings.add("Grated Reggiano Cheese"); 
toppings.add("Sliced Pepperoni"); 
toppings.add("Garlic"); 
toppings.add("Onion"); 
toppings.add("Mushrooms"); 
toppings.add("Red Pepper"); 
}} 
class NYStyleVeggiePizza extends Pizza 
{public NYStyleVeggiePizza() 
{ 
name = "NY Style Veggie Pizza"; 
dough = "Thin Crust Dough"; 
sauce = "Marinara Sauce"; 
toppings.add("Grated Reggiano Cheese"); 
toppings.add("Garlic"); 
toppings.add("Onion"); 
toppings.add("Mushrooms"); 
toppings.add("Red Pepper"); 
}} 
abstract class Pizza 
{ 
String name; 
String dough; 
String sauce; 
ArrayList toppings = new ArrayList(); 
void prepare() 
{ 
System.out.println("Preparing " + name); 
System.out.println("Tossing dough..."); 
System.out.println("Adding sauce..."); 
System.out.println("Adding toppings: "); 
for (int i = 0; i < toppings.size(); i++) 
{System.out.println(" " + toppings.get(i)); 
}} 
void bake() 
{System.out.println("Bake for 25 minutes at 350"); 
} 
void cut() 
{System.out.println("Cutting the pizza into diagonal slices"); 
} 
void box() 
{System.out.println("Place pizza in official PizzaStore box"); 
} 
public String getName() 
{return name; 
} 
public String toString() 
{StringBuffer display = new StringBuffer(); 
display.append("---- " + name + " ----\n"); 
display.append(dough + "\n"); 
display.append(sauce + "\n"); 
for (int i = 0; i < toppings.size(); i++) 
{display.append((String )toppings.get(i) + "\n"); 
} 
return display.toString(); 
}} 
abstract class PizzaStore 
{abstract Pizza createPizza(String item); 
public Pizza orderPizza(String type) 
{Pizza pizza = createPizza(type); 
System.out.println("--- Making a " + pizza.getName() + " ---"); 
pizza.prepare(); 
pizza.bake(); 
pizza.cut(); 
pizza.box(); 
return pizza; 
}
}





public class slip4_19_30
{public static void main(String[] args) 
{ 
PizzaStore nyStore = new NYPizzaStore(); 
PizzaStore chicagoStore = new ChicagoPizzaStore(); 
Pizza pizza = nyStore.orderPizza("cheese"); 
System.out.println("Ethan ordered a " + pizza.getName() + "\n"); 
pizza = chicagoStore.orderPizza("cheese"); 
System.out.println("Joel ordered a " + pizza.getName() + "\n"); 
pizza = nyStore.orderPizza("clam"); 
System.out.println("Ethan ordered a " + pizza.getName() + "\n"); 
pizza = chicagoStore.orderPizza("clam"); 
System.out.println("Joel ordered a " + pizza.getName() + "\n"); 
pizza = nyStore.orderPizza("pepperoni"); 
System.out.println("Ethan ordered a " + pizza.getName() + "\n"); 
pizza = chicagoStore.orderPizza("pepperoni"); 
System.out.println("Joel ordered a " + pizza.getName() + "\n"); 
pizza = nyStore.orderPizza("veggie"); 
System.out.println("Ethan ordered a " + pizza.getName() + "\n"); 
pizza = chicagoStore.orderPizza("veggie"); 
System.out.println("Joel ordered a " + pizza.getName() + "\n"); 
}}


Q. 2	Write a python program to Implement Simple Linear Regression for predicting house price.	[20 M]
*** sir code ***

import pandas as pd
import matplotlib.pyplot as plt
from sklearn import linear_model

ps=pd.read_csv("Housing.csv")
df = ps[['area', 'price']]
df.sample(5)

plt.scatter(df.area,df.price,color='red',marker='+')

In_v=df.drop('price',axis='columns')
In_v

model=linear_model.LinearRegression()
model.fit(In_v,df.price)

model.predict([[6720]])


***my code ***

  import numpy as np
    import pandas as pd
    
    # Visualisation Libraries
    import seaborn as sns
    import matplotlib.pyplot as plt
    
    # Data Processing Libraries
    from sklearn.feature_selection import SelectKBest
    from sklearn.feature_selection import chi2
    from sklearn import model_selection
    from sklearn.metrics import mean_squared_error, r2_score
    
    # Algorithm Libraries
    from sklearn.ensemble import ExtraTreesClassifier
    from sklearn.model_selection import train_test_split
    from sklearn.linear_model import LinearRegression
    from sklearn.tree import DecisionTreeRegressor
    from sklearn.ensemble import RandomForestRegressor
    
    # Math Library
    import math
    
    # Importing Dataset
    df = pd.read_csv("HousingData.xls")
    
    # Printing Dataset
    df.head()   

       
    # Calculating the mean, minimum, deviation, maximum and other factors
    df.describe()
    fig=plt.figure()
    ax=fig.add_subplot(1, 1, 1)
    ax.hist(df['RM'], bins = 35)
    plt.title("Average number of rooms Distribution ")
    plt.xlabel("RM")
    plt.ylabel("frequency")
    plt.show()
    
    fig=plt.figure()
    ax=fig.add_subplot(1, 1, 1)
    ax.hist(df['LSTAT'], bins = 35)
    plt.title("Homeowners distribution with low class")
    plt.xlabel("LSTAT")
    plt.ylabel("frequency")
    plt.show()
    
    fig=plt.figure()
    ax=fig.add_subplot(1, 1, 1)
    ax.hist(df['PTRATIO'], bins = 35)
    plt.title("Students to Teachers ratio distribution")
    plt.xlabel("PTRATIO")
    plt.ylabel("frequency")
    plt.show()
    
    fig=plt.figure()
    ax=fig.add_subplot(1, 1, 1)
    ax.hist(df['AGE'], bins = 35)
    plt.title("Ages of Black Owned Portion in the town")
    plt.xlabel("AGE")
    plt.ylabel("B")
    plt.show()
    
    N = 506
    x = df.AGE
    y = df.B
    colors = np.random.rand(N)

    plt.scatter(x, y, c=colors)
    plt.title("scatter")
    plt.show()
    
    plt.title("hitmap")
    sns.heatmap(df.isnull(),yticklabels=False,cbar=False,cmap='Blues')

Q. 3	Create a Node.js file that will convert the output "Hello World!" into upper-case letters.

assi.js
install upercase module
***********my code***
var http = require('http');

var uc = require('upper-case');

http.createServer(function (req, res) {

  res.writeHead(200, {'Content-Type': 'text/html'});

  res.write(uc.upperCase("Hello World!"));

  res.end();


}).listen(8002);
console.log('Node.js web server at port 8002 is running..')


slip 5


Q.1	Write a Java Program to implement Adapter pattern for Enumeration iterator[20 M]


import java.util.*;
class EnumerationIterator implements Iterator {
	Enumeration enumeration;

	public EnumerationIterator(Enumeration enumeration) {
		this.enumeration = enumeration;
	}

	public boolean hasNext() {
		return enumeration.hasMoreElements();
	}

	public Object next() {
		return enumeration.nextElement();
	}

	public void remove() {
		throw new UnsupportedOperationException();
	}
}

class slip5 {
	public static void main (String args[]) {
		Vector v = new Vector(Arrays.asList("apple","mango","grapes"));
		Iterator iterator = new EnumerationIterator(v.elements());
		while (iterator.hasNext()) {
			System.out.println(iterator.next());
		}
	}
}


Q.2	Write a python program to implement Multiple Linear Regression for given dataset.[20 M]

***sir code ***
import pandas as pd
import matplotlib.pyplot as plt
from sklearn import linear_model

ps=pd.read_csv("Housing.csv")
ps.sample(10)

df = ps[['area','bedrooms','bathrooms','stories','price']]
df.sample(5)

model=linear_model.LinearRegression()
model.fit(df.drop('price',axis='columns'),df.price)

model.predict([[7400,3,2,4]])

***my code***
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
  
dataset = pd.read_csv('Salary_Data.csv')
dataset.head()
 
# data preprocessing
X = dataset.iloc[:, :-1].values  #independent variable array
y = dataset.iloc[:,1].values  #dependent variable vector
 
# splitting the dataset
from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X,y,test_size=1/3,random_state=0)
 
# fitting the regression model
from sklearn.linear_model import LinearRegression
regressor = LinearRegression()
regressor.fit(X_train,y_train) #actually produces the linear eqn for the data
 
# predicting the test set results
y_pred = regressor.predict(X_test) 
y_pred
 
y_test
 
# visualizing the results
#plot for the TRAIN
  
plt.scatter(X_train, y_train, color='red') # plotting the observation line
plt.plot(X_train, regressor.predict(X_train), color='blue') # plotting the regression line
plt.title("Salary vs Experience (Training set)") # stating the title of the graph
  
plt.xlabel("Years of experience") # adding the name of x-axis
plt.ylabel("Salaries") # adding the name of y-axis
plt.show() # specifies end of graph
 
#plot for the TEST
  
plt.scatter(X_test, y_test, color='red') 
plt.plot(X_train, regressor.predict(X_train), color='blue') # plotting the regression line
plt.title("Salary vs Experience (Testing set)")
  
plt.xlabel("Years of experience") 
plt.ylabel("Salaries") 
plt.show() 



Q. 3		Using nodejs create a web page to read two file names from user and append contents of first file into second file.

assi5.js
npm install prompt

var http = require('http');

var prompt = require('prompt-sync')({sigint: true});
var fs = require('fs');

http.createServer(function(req,res) {

    var file1 = prompt("Enter 1st filename with extension : ");
    var file2 = prompt("Enter 2nd filename with extension : ");
    fs.readFile(file2,function(err,data) {
        if(err) {
            console.log("ERROR",err);
        }
        else {
            fs.appendFile(file1,data,function(err,data) {
                if (err) {
                    console.log("Error",err);
                }
                else {
                    console.log("\nFile Contents of "+file1+" after append:\n",
                    fs.readFileSync(file1, "utf8"));
                }
            });
            res.end();
        }
    });
}).listen(8002);
console.log('Node.js web server at port 8002 is running..')

***my code***

var fs = require('fs');
console.log("\nFile Contents of file before append:");
var a = fs.readFileSync("file1.txt", "utf8");
fs.appendFile("file2.txt", a, function(err){
    if (err)
        console.log(err);
    else {
        console.log("\nFile Contents of file after append:",
        fs.readFileSync("file2.txt", "utf8"));
    }
});

slip 6

Q.1	Write a Java Program to implement command pattern to test Remote Control
[20 M]
// Command interface
interface Command {
    void execute();
}

// Concrete Command
class LightOnCommand implements Command {
    private Light light;

    public LightOnCommand(Light light) {
        this.light = light;
    }

    public void execute() {
        light.turnOn();
    }
}

// Receiver
class Light {
    public void turnOn() {
        System.out.println("Light is ON");
    }

    public void turnOff() {
        System.out.println("Light is OFF");
    }
}

// Concrete Command
class TVOnCommand implements Command {
    private TV tv;

    public TVOnCommand(TV tv) {
        this.tv = tv;
    }

    public void execute() {
        tv.turnOn();
    }
}

// Receiver
class TV {
    public void turnOn() {
        System.out.println("TV is ON");
    }

    public void turnOff() {
        System.out.println("TV is OFF");
    }
}

// Remote Control
class RemoteControl {
    private Command command;

    public void setCommand(Command command) {
        this.command = command;
    }

    public void pressButton() {
        command.execute();
    }
}

public class slip6_21 {
    public static void main(String[] args) {
        // Create the receivers
        Light livingRoomLight = new Light();
        TV livingRoomTV = new TV();

        // Create the concrete commands
        Command lightOnCommand = new LightOnCommand(livingRoomLight);
        Command tvOnCommand = new TVOnCommand(livingRoomTV);

        // Create the remote control
        RemoteControl remote = new RemoteControl();

        // Set the commands for the remote control
        remote.setCommand(lightOnCommand);
        remote.pressButton(); // Turns on the light

        remote.setCommand(tvOnCommand);
        remote.pressButton(); // Turns on the TV
    }
}



Q.2	Write a python program to implement Polynomial Linear Regression for given dataset
[20 M]
***sir code***
import pandas as pd
import matplotlib .pyplot as plt

df= pd.read_csv('Salary.csv')
df

plt.scatter(df['YearsExperience'],df['Salary'])

x= df.iloc[:,1:-1].values
y= df.iloc[:,-1].values
X

y

from sklearn.preprocessing import PolynomialFeatures
poly =PolynomialFeatures(degree=3)
x_poly = poly.fit_transform(x)
x_poly

from sklearn.linear_model import LinearRegression
model = LinearRegression()
model.fit(x_poly,y)

plt.scatter(x,y)
plt.plot(x,model.predict(poly.fit_transform(x)))

model.predict(poly.fit_transform([[6]]))

***my code***
import numpy as np
import matplotlib.pyplot as plt
import pandas as pd
  
dataset = pd.read_csv('Position_Salaries.csv')
dataset
 
X = dataset.iloc[:,1:2].values  
y = dataset.iloc[:,2].values
 
# fitting the linear regression model
from sklearn.linear_model import LinearRegression
lin_reg = LinearRegression()
lin_reg.fit(X,y)
 
# visualising the linear regression model
plt.scatter(X,y, color='red')
plt.plot(X, lin_reg.predict(X),color='blue')
plt.title("Truth or Bluff(Linear)")
plt.xlabel('Position level')
plt.ylabel('Salary')
plt.show()
 
# polynomial regression model
from sklearn.preprocessing import PolynomialFeatures
poly_reg = PolynomialFeatures(degree=2)
X_poly = poly_reg.fit_transform(X)
  
X_poly     # prints X_poly
 
lin_reg2 = LinearRegression()
lin_reg2.fit(X_poly,y)
 
 
# visualising polynomial regression
from sklearn.preprocessing import PolynomialFeatures
poly_reg = PolynomialFeatures(degree=4)
X_poly = poly_reg.fit_transform(X)
lin_reg2 = LinearRegression()
lin_reg2.fit(X_poly,y)
  
X_grid = np.arange(min(X),max(X),0.1)
X_grid = X_grid.reshape(len(X_grid),1) 
plt.scatter(X,y, color='red') 
  
plt.plot(X_grid, lin_reg2.predict(poly_reg.fit_transform(X_grid)),color='blue') 
  
plt.title("Truth or Bluff(Polynomial)")
plt.xlabel('Position level')
plt.ylabel('Salary')
plt.show()

Q.3.	Create a Node.js file that opens the requested file and returns the content to the client. If anything goes wrong, throw a 404 error.
***madam code***
var http = require('http');
var url = require('url');
var fs = require('fs');

http.createServer(function (req, res) {
  var q = url.parse(req.url, true);
  var filename = "." + q.pathname;

  fs.readFile(filename, function(err, data) {
    if (err) {
      res.writeHead(404, {'Content-Type': 'text/html'});
      return res.end("404 Not Found");
    }
    res.writeHead(200, {'Content-Type': 'text/html'});
    res.write(data);
    return res.end();
  });
}).listen(8080);


***my code***
var http = require('http');
var url = require('url');
var fs = require('fs');

http.createServer(function(req,res) {
    var q = url.parse(req.url,true);
    var filename = "." + q.pathname;
    fs.readFile(filename,function(err,data) {
        if(err) {
            res.writeHead(404,{'Content-Type': 'text/html'});
            return res.end("404 Not Found");
        }
        res.writeHead(200,{'Content-Type': 'text/html'});
        res.write(data);
        return res.end();
    });
}).listen(8002);

console.log('Node.js web server at port 8002 is running..')

slip 7


Q.1	Write a Java Program to implement undo command to test Ceiling fan.	[20 M]
import java.util.Stack;

interface Command {
	public void execute();
	public void undo();
}

 class CeilingFanOffCommand implements Command {
	CeilingFan ceilingFan;
	int prevSpeed;

	public CeilingFanOffCommand(CeilingFan ceilingFan) {
		this.ceilingFan = ceilingFan;
	}

	public void execute() {
		prevSpeed = ceilingFan.getSpeed();
		ceilingFan.off();
	}

	public void undo() {
		if (prevSpeed == CeilingFan.HIGH) {
			ceilingFan.high();
		} else if (prevSpeed == CeilingFan.MEDIUM) {
			ceilingFan.medium();
		} else if (prevSpeed == CeilingFan.LOW) {
			ceilingFan.low();
		} else if (prevSpeed == CeilingFan.OFF) {
			ceilingFan.off();
		}
	}
}

	 class CeilingFanMediumCommand implements Command {
	CeilingFan ceilingFan;
	int prevSpeed;

	public CeilingFanMediumCommand(CeilingFan ceilingFan) {
		this.ceilingFan = ceilingFan;
	}

	public void execute() {
		prevSpeed = ceilingFan.getSpeed();
		ceilingFan.medium();
	}

	public void undo() {
		if (prevSpeed == CeilingFan.HIGH) {
			ceilingFan.high();
		} else if (prevSpeed == CeilingFan.MEDIUM) {
			ceilingFan.medium();
		} else if (prevSpeed == CeilingFan.LOW) {
			ceilingFan.low();
		} else if (prevSpeed == CeilingFan.OFF) {
			ceilingFan.off();
		}
	}
}

 class CeilingFanHighCommand implements Command {
	CeilingFan ceilingFan;
	int prevSpeed;

	public CeilingFanHighCommand(CeilingFan ceilingFan) {
		this.ceilingFan = ceilingFan;
	}

	public void execute() {
		prevSpeed = ceilingFan.getSpeed();
		ceilingFan.high();
	}

	public void undo() {
		if (prevSpeed == CeilingFan.HIGH) {
			ceilingFan.high();
		} else if (prevSpeed == CeilingFan.MEDIUM) {
			ceilingFan.medium();
		} else if (prevSpeed == CeilingFan.LOW) {
			ceilingFan.low();
		} else if (prevSpeed == CeilingFan.OFF) {
			ceilingFan.off();
		}
	}
}

 class CeilingFanLowCommand implements Command {
	CeilingFan ceilingFan;
	int prevSpeed;

	public CeilingFanLowCommand(CeilingFan ceilingFan) {
		this.ceilingFan = ceilingFan;
	}

	public void execute() {
		prevSpeed = ceilingFan.getSpeed();
		ceilingFan.low();
	}

	public void undo() {
		if (prevSpeed == CeilingFan.HIGH) {
			ceilingFan.high();
		} else if (prevSpeed == CeilingFan.MEDIUM) {
			ceilingFan.medium();
		} else if (prevSpeed == CeilingFan.LOW) {
			ceilingFan.low();
		} else if (prevSpeed == CeilingFan.OFF) {
			ceilingFan.off();
		}
	}
}
public class CeilingFan {
	public static final int HIGH = 3;
	public static final int MEDIUM = 2;
	public static final int LOW = 1;
	public static final int OFF = 0;
	String location;
	int speed;

	public CeilingFan(String location) {
		this.location = location;
		speed = OFF;
	}

	public void high() {
		speed = HIGH;
		System.out.println(location + " ceiling fan is on high");
	} 

	public void medium() {
		speed = MEDIUM;
		System.out.println(location + " ceiling fan is on medium");
	}

	public void low() {
		speed = LOW;
		System.out.println(location + " ceiling fan is on low");
	}

	public void off() {
		speed = OFF;
		System.out.println(location + " ceiling fan is off");
	}

	public int getSpeed() {
		return speed;
	}
}



Q.2.	Write a python program to implement Naive Bayes.	[20 M]

***sir code***
#Naive Bayes
import pandas as pd

df=pd.read_csv("Titanic-Dataset.csv")
df.head(1)

df=df.drop(['PassengerId','Name','SibSp','Parch','Embarked','Cabin','Ticket'], axis='columns')
df.head()

from sklearn.preprocessing import LabelEncoder
label = LabelEncoder()
df['Gender'] = label.fit_transform(df['Gender'])
df.head()

input=df.drop(['Survived'],axis='columns')
input.head()

target=df['Survived']
target.head()

input.columns[input.isna().any()]
input

input.Age = input.Age.fillna(input.Age.mean())
input

from sklearn.model_selection import train_test_split
x_train,x_test,y_train,y_test = train_test_split(input,target,test_size=0.2)
len(y_test)

from sklearn.naive_bayes import GaussianNB
model = GaussianNB()
model.fit(x_train,y_train)

model.score(x_test,y_test)

x_test[:10]

y_test[:10]

model.predict(x_test[:10])




Q. 3	Create a Node.js file that writes an HTML form, with an upload field.	[20 M]

***madam code***
var http = require('http');
http.createServer(function (req, res) {
  res.writeHead(200, {'Content-Type': 'text/html'});
  res.write('<form action="fileupload" method="post" enctype="multipart/form-data">');
  res.write('<input type="file" name="filetoupload"><br>');
  res.write('<input type="submit">');
  res.write('</form>');
  return res.end();
}).listen(8080);


***my code***
var http = require('http'); 

var server = http.createServer(function (req, res) {  

res.writeHead(200, {'Content-Type': 'text/html'});
res.write("<h1 style='background-color:green'>Upload your file</h1>");
res.write('<form action="fileupload" method="post" enctype="multipart/form-data">');
res.write("<input type='file' name='fileupload'/>");

res.write("<input type='submit' value='Submit'");
res.write("</form>");
res.end();

});

server.listen(8002); 

console.log('Node.js web server at port 8002 is running..')


slip 8

Q. 1	Write a Java Program to implement State Pattern for Gumball Machine.
Create instance variable that holds current state from there, we just need to handle all actions, behaviors and state transition that can happen	[20 M]

 interface State {

	public void insertQuarter();
	public void ejectQuarter();
	public void turnCrank();
	public void dispense();
	
	public void refill();
}
 class SoldState implements State {

    GumballMachine gumballMachine;

    public SoldState(GumballMachine gumballMachine) {
        this.gumballMachine = gumballMachine;
    }

	public void insertQuarter() {
		System.out.println("Please wait, we're already giving you a gumball");
	}

	public void ejectQuarter() {
		System.out.println("Sorry, you already turned the crank");
	}

	public void turnCrank() {
		System.out.println("Turning twice doesn't get you another gumball!");
	}

	public void dispense() {
		gumballMachine.releaseBall();
		if (gumballMachine.getCount() > 0) {
			gumballMachine.setState(gumballMachine.getNoQuarterState());
		} else {
			System.out.println("Oops, out of gumballs!");
			gumballMachine.setState(gumballMachine.getSoldOutState());
		}
	}

	public void refill() { }

	public String toString() {
		return "dispensing a gumball";
	}
}

 class SoldOutState implements State {
    GumballMachine gumballMachine;

    public SoldOutState(GumballMachine gumballMachine) {
        this.gumballMachine = gumballMachine;
    }

	public void insertQuarter() {
		System.out.println("You can't insert a quarter, the machine is sold out");
	}

	public void ejectQuarter() {
		System.out.println("You can't eject, you haven't inserted a quarter yet");
	}

	public void turnCrank() {
		System.out.println("You turned, but there are no gumballs");
	}

	public void dispense() {
		System.out.println("No gumball dispensed");
	}
	
	public void refill() { 
		gumballMachine.setState(gumballMachine.getNoQuarterState());
	}

	public String toString() {
		return "sold out";
	}
}

 class NoQuarterState implements State {
    GumballMachine gumballMachine;

    public NoQuarterState(GumballMachine gumballMachine) {
        this.gumballMachine = gumballMachine;
    }

	public void insertQuarter() {
		System.out.println("You inserted a quarter");
		gumballMachine.setState(gumballMachine.getHasQuarterState());
	}

	public void ejectQuarter() {
		System.out.println("You haven't inserted a quarter");
	}

	public void turnCrank() {
		System.out.println("You turned, but there's no quarter");
	 }

	public void dispense() {
		System.out.println("You need to pay first");
	} 
	
	public void refill() { }

	public String toString() {
		return "waiting for quarter";
	}
}

class HasQuarterState implements State {
	GumballMachine gumballMachine;

	public HasQuarterState(GumballMachine gumballMachine) {
		this.gumballMachine = gumballMachine;
	}

	public void insertQuarter() {
		System.out.println("You can't insert another quarter");
	}

	public void ejectQuarter() {
		System.out.println("Quarter returned");
		gumballMachine.setState(gumballMachine.getNoQuarterState());
	}

	public void turnCrank() {
		System.out.println("You turned...");
		gumballMachine.setState(gumballMachine.getSoldState());
	}

    public void dispense() {
        System.out.println("No gumball dispensed");
    }

    public void refill() { }

	public String toString() {
		return "waiting for turn of crank";
	}

}

class GumballMachine {

	State soldOutState;
	State noQuarterState;
	State hasQuarterState;
	State soldState;

	State state;
	int count = 0;

	public GumballMachine(int numberGumballs) {
		soldOutState = new SoldOutState(this);
		noQuarterState = new NoQuarterState(this);
		hasQuarterState = new HasQuarterState(this);
		soldState = new SoldState(this);

		this.count = numberGumballs;
		if (numberGumballs > 0) {
			state = noQuarterState;
		} else {
			state = soldOutState;
		}
	}

	public void insertQuarter() {
		state.insertQuarter();
	}

	public void ejectQuarter() {
		state.ejectQuarter();
	}

	public void turnCrank() {
		state.turnCrank();
		state.dispense();
	}

	void releaseBall() {
		System.out.println("A gumball comes rolling out the slot...");
		if (count != 0) {
			count = count - 1;
		}
	}

	int getCount() {
		return count;
	}

	void refill(int count) {
		this.count += count;
		System.out.println("The gumball machine was just refilled; it's new count is: " + this.count);
		state.refill();
	}

	void setState(State state) {
		this.state = state;
	}
    public State getState() {
        return state;
    }

    public State getSoldOutState() {
        return soldOutState;
    }

    public State getNoQuarterState() {
        return noQuarterState;
    }

    public State getHasQuarterState() {
        return hasQuarterState;
    }

    public State getSoldState() {
        return soldState;
    }

	public String toString() {
		StringBuffer result = new StringBuffer();
		result.append("\nMighty Gumball, Inc.");
		result.append("\nJava-enabled Standing Gumball Model #2004");
		result.append("\nInventory: " + count + " gumball");
		if (count != 1) {
			result.append("s");
		}
		result.append("\n");
		result.append("Machine is " + state + "\n");
		return result.toString();
	}
}

class slip8{

	public static void main(String[] args) {
		GumballMachine gumballMachine = new GumballMachine(2);

		System.out.println(gumballMachine);

		gumballMachine.insertQuarter();
		gumballMachine.turnCrank();

		System.out.println(gumballMachine);

		gumballMachine.insertQuarter();
		gumballMachine.turnCrank();
		gumballMachine.insertQuarter();
		gumballMachine.turnCrank();
		
		gumballMachine.refill(3);
		gumballMachine.insertQuarter();
		gumballMachine.turnCrank();

		System.out.println(gumballMachine);
	}
}

Q.2.	Write a python program to implement Decision Tree whether or not to play Tennis.
[20 M]

***sir code***
import pandas as pd
from sklearn.tree import DecisionTreeClassifier
from sklearn.preprocessing import LabelEncoder

data = pd.read_csv("play_tennis.csv")
data.sample(5)

label_encoder = LabelEncoder()
data['outlook'] = label_encoder.fit_transform(data['outlook'])
data['temp'] = label_encoder.fit_transform(data['temp'])
data['humidity'] = label_encoder.fit_transform(data['humidity'])
data['wind'] = label_encoder.fit_transform(data['wind'])
data['play'] = label_encoder.fit_transform(data['play'])

data
x = data[['outlook', 'temp', 'humidity', 'wind']]
y = data['play']

clf = DecisionTreeClassifier()

clf.fit(x, y)

new_day = [1, 2, 0, 1] 
prediction = clf.predict([new_day])
prediction

predicted_play = label_encoder.inverse_transform(prediction)

print("Prediction:", predicted_play[0])

*** my code***
# Load libraries
import numpy as np
import pandas as pd
from sklearn import metrics #Import scikit-learn metrics module for accuracy calculation

df=pd.read_csv("Play Tennis.csv")
value=['Outlook','Temprature','Humidity','Wind']
df

len(df)           #Dataset Lenght

df.shape  #To see the number of rows and columns in our dataset:

df.head()         #To inspect the first five records of the dataset:

df.tail()         #To inspect the last five records of the dataset:

df.describe()     #To see statistical details of the dataset:

#machine learning algorithms can only learn from numbers (int, float, doubles .. )
#so let us encode it to int
from sklearn import preprocessing
string_to_int= preprocessing.LabelEncoder()                     #encode your data
df=df.apply(string_to_int.fit_transform) #fit and transform it
df

#To divide our data into attribute set and Label:
feature_cols = ['Outlook','Temprature','Humidity','Wind']
X = df[feature_cols ]                               #contains the attribute 
y = df.Play_Tennis                                  #contains the label
#To divide our data into training and test sets:
from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.30) 

# perform training 
from sklearn.tree import DecisionTreeClassifier                             # import the classifier
classifier =DecisionTreeClassifier(criterion="entropy", random_state=100)     # create a classifier object
classifier.fit(X_train, y_train)                                              # fit the classifier with X and Y data or 
DecisionTreeClassifier(class_weight=None, criterion='entropy', max_depth=None,
            max_features=None, max_leaf_nodes=None,
            min_impurity_decrease=0.0, min_impurity_split=None,
            min_samples_leaf=1, min_samples_split=2,
            min_weight_fraction_leaf=0.0, presort=False, random_state=100,
            splitter='best')
#Predict the response for test dataset
y_pred= classifier.predict(X_test)  
# Model Accuracy, how often is the classifier correct?
from sklearn.metrics import accuracy_score
print("Accuracy:",metrics.accuracy_score(y_test, y_pred))
Accuracy: 0.4
Now let's compare some of our predicted values with the actual values and see how accurate we were:
data_p=pd.DataFrame({'Actual':y_test, 'Predicted':y_pred})  
data_p

from sklearn.metrics import classification_report, confusion_matrix  
print(confusion_matrix(y_test, y_pred))  
print(classification_report(y_test, y_pred)) 

from sklearn.tree import export_graphviz
from sklearn.externals.six import StringIO
from IPython.display import Image
import pydotplus
dot_data = StringIO()
export_graphviz(classifier, out_file=dot_data,
filled=True, rounded=True,
special_characters=True,feature_names =value,class_names=['0','1'])
graph = pydotplus.graph_from_dot_data(dot_data.getvalue())
graph.write_png('Play Tennis.png')
Image(graph.create_png())

Q. 3	Create a Node.js file that demonstrates create database and table in MySQL. [20 M]

var mysql = require('mysql');

var con = mysql.createConnection({
    host: "localhost",

    user: "root",
  
    //password: "", /*pc xampp database or localhost*/
   //password: "Gaurav@123", /* pc commond line mysql or localhost*/
   password: "raj@123", /* mobile xampp or local host*/
});

// use the  query to connect a localhost
con.connect(function(err) {
  if (err) throw err;
  console.log("Connected to localhost!");
 
  });


 // use the query to create a Database.
  let databaseName = "lab_pro";
  
  let createQuery = `CREATE DATABASE ${databaseName}`;

 
  con.query(createQuery, (err) => {
      if(err==1) throw  "Couldn't create";

      console.log(databaseName+" Database Created Successfully !");
  // use the query to Use a Database.
      let useQuery = `USE ${databaseName}`;
      con.query(useQuery, (error) => {
          if(error) throw error;

          console.log("Using Database"+databaseName);
        })
  // Create a new Table
    let TableName = "student";
    let table_query = `CREATE TABLE ${TableName} (name VARCHAR(255), address VARCHAR(255))`;
  
    con.query(table_query, (err) => {
      if(err==1) throw "Couldn't create";
      console.log(TableName+" Table created");
    });

//Insert Data in Table

  let Insert_query = `INSERT INTO ${TableName} (name, address) VALUES ?;`;
  
// multiple Values to be inserted
    let values = [
        ['Amit', 'Yellow Park'],
        ['Rishi', 'Park 38'],
        ['Akash', 'Central st 954'],
        ['Pratik', 'Road 989'],
        ['Mangesh', 'Sideway']
    ];
  
  // Executing the query show row are inserted in the table
    con.query(Insert_query, [values], (err) => {
    
        if (err==1) throw "Couldn't create";
        console.log("All Rows Inserted");
    });

//select query to show table data
    let show_student = `SELECT * FROM ${TableName}`
    con.query(show_student, function (err, result, fields) {

        if (err) throw err;
    
        console.log(result);
    
      });

//Executing the query to delete specific row rows
    let D_query = `DELETE FROM student WHERE name = ?`;

   let name = 'Amit';
  
    con.query(D_query,name,(err, rows) => {
         if(err==1) throw "Couldn't delete";
  
        console.log('Number of rows deleted = ' + rows.affectedRows);
    });
// Executing the query to delete all row rows
   let delete_query1 = `DELETE FROM ${TableName}`;
   con.query(delete_query1,(err, rows) =>{
            if (err) throw err;
            console.log("All Records deleted = "+ rows.affectedRows);
        });

  });


slip 9


Q.1	Design simple HR Application using Spring Framework	[20 M]
package hrapplication.controller;

import java.util.List;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import hrapplication.model.HrApplicationBean;
import hrapplication.model.LoginBean;
import hrapplication.service.HrApplicationService;
import hrapplication.service.LoginService;


@Controller
@RequestMapping("/hrApplications")
public class HrApplicationController {

	@Autowired
	private HrApplicationService hrApplicationService;
	

	@RequestMapping("/secure")
	public String defaultPage(Model model) {
		List<HrApplicationBean> hrApplications = hrApplicationService.getAllHrApplication();
		model.addAttribute("hrApplications", hrApplications);
		return "hrApplicationSecure";
	}
	
	@RequestMapping("/all")
	public String allHrApplications(Model model) {
			
		List<HrApplicationBean> hrApplications = hrApplicationService.getAllHrApplication();
		model.addAttribute("hrApplications", hrApplications);
		return "hrApplicationList";
	}

	@RequestMapping("/hrApplication")
	public String getHrApplicationById(@RequestParam(name = "hrApplicationId") int hrApplicationId, Model model) {
		HrApplicationBean hrApplication = hrApplicationService.getHrApplicationById(hrApplicationId);
		model.addAttribute("hrApplication", hrApplication);
		return "hrApplicationDetail";
	}
	
	@RequestMapping(value = "/add", method = RequestMethod.GET)
	public String addHrApplication(@ModelAttribute("newHrApplication") HrApplicationBean hrApplicationBean,BindingResult bindingResult) {
	
		return "hrApplicationAdd";
	}
	
	@RequestMapping("/deleteHrApplication{hrApplicationId}")
	public String deleteHrApplication(@RequestParam("hrApplicationId") int hrApplicationId, Model model) {
		hrApplicationService.deleteHrApplication(hrApplicationId);
		return "hrApplicationList";
	}
		
	
	@RequestMapping(value = "/save", method = RequestMethod.POST)
	public String saveHrApplication(@ModelAttribute("newHrApplication") HrApplicationBean hrApplicationBean,BindingResult bindingResult) {
	
		hrApplicationService.addHrApplication(hrApplicationBean);
		return "hrApplicationList";
	}
	
}

****appp***
package hrapplication.controller;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.SessionAttribute;
import org.springframework.web.servlet.ModelAndView;
import hrapplication.model.ApplicantBean;
import hrapplication.model.HrApplicationBean;
import hrapplication.service.ApplicantService;
import hrapplication.service.HrApplicationService;

@Controller
@RequestMapping("/applicants")
public class ApplicantController {

	@Autowired
	private ApplicantService applicantService;
	
	@Autowired
	private HrApplicationService hrApplicationService;
	
	@RequestMapping(method = RequestMethod.GET)
	public ModelAndView addApplicant(@ModelAttribute("newApplicant") ApplicantBean applicantBean,BindingResult bindingResult) {
		Map<String, Object> model = new HashMap<String,Object>();
		model.put("hrApplications",  hrApplicationService.getAllHrApplication());
		return new ModelAndView("applicantAdd",model);
	}
    
	@RequestMapping(value = "/save", method = RequestMethod.POST)
	public String saveApplicant(@ModelAttribute("newApplicant") ApplicantBean applicantBean,BindingResult bindingResult, HrApplicationBean hrApplicationBean){

		applicantService.save(applicantBean);
		applicantService.update(applicantBean,hrApplicationService.getAllHrApplicationId(hrApplicationBean));
		
		return "redirect:/hrApplications";
	}
	
	
	


}


***app***
package hrapplication.controller;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.servlet.ModelAndView;

import hrapplication.model.LoginBean;
import hrapplication.service.LoginService;

@Controller
public class LoginController {

	@Autowired
	private LoginService loginService;
	
	@RequestMapping(method = RequestMethod.GET)
	public String defaultPage(LoginBean loginBean,BindingResult bindingResult) {
		//start project
			return "index";
	}
	
	@RequestMapping(value="/login",method = RequestMethod.GET)
	public String addLogin(LoginBean loginBean,BindingResult bindingResult) {
		loginService.addLogin(loginBean);
		return "login";
	}
	
	 @RequestMapping("/login")  
	   public ModelAndView login(HttpServletRequest request,HttpServletResponse response,LoginBean loginBean,BindingResult bindingResult) {
		  loginService.addLogin(loginBean);
		  String loginEmail=request.getParameter("loginEmail");  
		  String loginPassword=request.getParameter("loginPassword");
	      String message;
	      if(loginEmail != null && 
	    		  !loginEmail.equals("") 
	    		  && loginEmail.equals(loginBean.getLoginEmail()) && 
	    		  loginPassword != null && 
	    		  !loginPassword.equals("") && 
	    		  loginPassword.equals(loginBean.getLoginPassword())){
	    	  message = "Welcome " +loginEmail + ".";
		      return new ModelAndView("hrApplicationList");  
	 
	      }else{
	    	  message = "Wrong email or password.";
	    	  return new ModelAndView("login", 
	    			  "message", message);
	      }
	   }
	
	
}


Q 2.	Write a python program to implement Linear SVM.	[20 M]
import pandas as pd

df = pd.read_csv('data.csv')
df.sample(5)

from sklearn.preprocessing import LabelEncoder
label = LabelEncoder()
df['Species_num'] = label.fit_transform(df['Species'])
df.sample(5)

df0=df[df.Species_num==0]
df1=df[df.Species_num==1]
df2=df[df.Species_num==2]

from matplotlib import pyplot as plt
plt.scatter(df0['SepalLengthCm'],df0['SepalWidthCm'],color='green',marker='+')
plt.scatter(df1['SepalLengthCm'],df1['SepalWidthCm'],color='red',marker='+')

input = df.drop(['Species','Species_num'],axis='columns')
input.sample(5)

target = df['Species_num']
target.sample(5)

from sklearn.model_selection import train_test_split
x_train,x_test,y_train,y_test = train_test_split(input,target,test_size=0.2)
len(y_test)

from sklearn.svm import SVC
model = SVC(kernel='linear')
model.fit(x_train,y_train)

model.score(x_test,y_test)

x_test[:10]

y_test[:10]

model.predict(x_test[:10])

***my code***

import pandas as pd
import numpy as np
from sklearn import svm
from sklearn import svm, datasets
import matplotlib.pyplot as plt

df = datasets.load_iris()
df


# df = pd.read_csv('iris.csv')
# df

X = df.data[:, :2]
y = df.target

x_min, x_max = X[:, 0].min() - 1, X[:, 0].max() + 1
y_min, y_max = X[:, 1].min() - 1, X[:, 1].max() + 1
h = (x_max / x_min)/100
xx, yy = np.meshgrid(np.arange(x_min, x_max, h), np.arange(y_min, y_max, h))
X_plot = np.c_[xx.ravel(), yy.ravel()]
C = 1.0

Svc_classifier = svm.SVC(kernel='linear', C=C).fit(X, y)
Z = Svc_classifier.predict(X_plot)
Z = Z.reshape(xx.shape)
plt.figure(figsize=(15, 5))
plt.subplot(121)
plt.contourf(xx, yy, Z, cmap=plt.cm.tab10, alpha=0.3)
plt.scatter(X[:, 0], X[:, 1], c=y, cmap=plt.cm.Set1)
plt.xlabel('Sepal length')
plt.ylabel('Sepal width')
plt.xlim(xx.min(), xx.max())
plt.title('Support Vector Classifier with linear kernel')


Svc_classifier = svm.SVC(kernel = 'rbf', gamma ='auto',C = C).fit(X, y)
Z = Svc_classifier.predict(X_plot)
Z = Z.reshape(xx.shape)
plt.figure(figsize=(15, 5))
plt.subplot(121)
plt.contourf(xx, yy, Z, cmap = plt.cm.tab10, alpha = 0.3)
plt.scatter(X[:, 0], X[:, 1], c = y, cmap = plt.cm.Set1)
plt.xlabel('Sepal length')
plt.ylabel('Sepal width')
plt.xlim(xx.min(), xx.max())
plt.title('Support Vector Classifier with rbf kernel')

Q. 3	Create a node.js file that Select all records from the "customers" table, and display the result object on console.	[20 M]
var mysql = require('mysql');

var con = mysql.createConnection({
    host: "localhost",

    user: "root",
  
    //password: "", /*pc xampp database or localhost*/
   //password: "Gaurav@123", /* pc commond line mysql or localhost*/
   password: "raj@123", /* mobile xampp or local host*/

});

// use the  query to connect a localhost
con.connect(function(err) {
  if (err) throw err;
  console.log("Connected to localhost!");
 
  });


 // use the query to create a Database.
  let databaseName = "lab_pro";
  
  let createQuery = `CREATE DATABASE ${databaseName}`;

 
  con.query(createQuery, (err) => {
      if(err==1) throw  "Couldn't create";

      console.log(databaseName+" Database Created Successfully !");
  // use the query to Use a Database.
      let useQuery = `USE ${databaseName}`;
      con.query(useQuery, (error) => {
          if(error) throw error;

          console.log("Using Database"+databaseName);
        })
  // Create a new Table
    let TableName = "customers";
    let table_query = `CREATE TABLE ${TableName} (name VARCHAR(255), address VARCHAR(255))`;
  
    con.query(table_query, (err) => {
      if(err==1) throw "Couldn't create";
      console.log(TableName+" Table created");
    });

//Insert Data in Table

  let Insert_query = `INSERT INTO ${TableName} (name, address) VALUES ?;`;
  
// multiple Values to be inserted
    let values = [
        ['Amit', 'Yellow Park'],
        ['Rishi', 'Park 38'],
        ['Akash', 'Central st 954'],
        ['Pratik', 'Road 989'],
        ['Mangesh', 'Sideway']
    ];
  
  // Executing the query show row are inserted in the table
    con.query(Insert_query, [values], (err) => {
    
        if (err==1) throw "Couldn't create";
        console.log("All Rows Inserted");
    });

//select query to show table data
    let show_student = `SELECT * FROM ${TableName}`
    con.query(show_student, function (err, result, fields) {

        if (err) throw err;
    
        console.log(result);
    
      });
      
});

slip 10

Q.1	Write a Java Program to implement Strategy Pattern for Duck Behavior. Create instance variable that holds current state of Duck from there, we just need to handle all Flying Behaviors and Quack Behavior	[20 M]


 abstract class Duck {
  FlyBehaviour flyBehaviour;
  QuackBehaviour quackBehaviour;
  public Duck() {
  }

  public abstract void display();

  public void performFly() {
    flyBehaviour.fly();
  }

  public void performQuack() {
    quackBehaviour.quack();
  }
  public void swim() {
    System.out.println("All ducks float, even decoys!");
  }
  public void setFlyBehaviour(FlyBehaviour fb) {
    flyBehaviour = fb;
  }
  public void setQuackBehaviour(QuackBehaviour qb) {
    quackBehaviour =  qb;
  }
}


 class MallardDuck extends Duck {

  public MallardDuck() {
    quackBehaviour = new Quack();
    flyBehaviour = new FlyWithWings();
  }

  public void display() {
    System.out.println("I'm a real Mallard duck");
  }
}

 class ModolDuck extends Duck {
  // public ModelDuck() {
     public ModolDuck() {
    flyBehaviour = new FlyNoWay();
    quackBehaviour = new Quack();
  }

  public void display() {
    System.out.println("I'm a model duck");
  }
}


 interface FlyBehaviour {
  public void fly();
}


 class FlyWithWings implements FlyBehaviour {
  public void fly() {
    System.out.println("I'm flying!!");
  }
}


 class FlyNoWay implements FlyBehaviour {
  public void fly() {
    System.out.println("I can't fly");
  }
}


class FlyRocketPowered implements FlyBehaviour {
  public void fly() {
    System.out.println("I'm flying with a rocket!");
  }
}


 interface QuackBehaviour {
  // public void quack() {
  public void quack() ;
}


 class Quack implements QuackBehaviour {
  public void quack() {
    System.out.println("Quack");
  }
}


 class MuteQuack implements QuackBehaviour {
  public void quack() {
    System.out.println("<< Silence >>");
  }
}


 class Squeak implements QuackBehaviour {
  public void quack() {
    System.out.println("Squeak");
  }
}

// MiniDuckSimulator.Java
// public class slip10 {
//   public static void main(String[] args) {
//     Duck mallard = new MallardDuck();
//     mallard.performQuack();
//     mallard.performFly();
//   }
// }

public class slip10_26 {
  public static void main(String[] args) {
    Duck mallard = new MallardDuck();
    mallard.performQuack();
    mallard.performFly();
    // Duck model = new ModelDuck();
    Duck model = new ModolDuck();
    model.performFly();
    model.setFlyBehaviour(new FlyRocketPowered());
    model.performFly();
  }
}


Q. 2	Write a Python program to prepare Scatter Plot for Iris Dataset.	[20 M]

import pandas as pd
import matplotlib.pyplot as plt

iris_data = pd.read_csv("iris2.csv")
iris_data

versicolor = iris_data[iris_data.variety == "Versicolor"]
setosa = iris_data[iris_data.variety =="Setosa"]
virginica = iris_data[iris_data.variety == "Virginica"]

fig, ax = plt.subplots()
fig.set_size_inches(8, 8)

points = ax.scatter(versicolor["petal.length"], versicolor["petal.width"], label="Versicolor")

points.set_facecolor("green")

ax.scatter(setosa["petal.length"], setosa["petal.width"], label="Setosa", marker="x", facecolor="blue")
ax.scatter(virginica["petal.length"], virginica["petal.width"], label="Virginica", marker="s", facecolor="red")

ax.set_xlabel("Petal Length (cm)")
ax.set_ylabel("Petal Width (cm)")
ax.set_title("Iris Petal Sizes")
ax.legend()




Q. 3	Create a node.js file that Insert Multiple Records in "student" table, and display the result object on console.
var http = require('http'); 
var mysql = require('mysql');

var server = http.createServer(function (req, res) {  

res.writeHead(200, {'Content-Type': 'text/html'});
res.write("<h1 style='background-color:green'>Upload your file</h1>");

res.end();

});

server.listen(8002); 

console.log('Node.js web server at port 8002 is running..')


var mysql = require('mysql');

var con = mysql.createConnection({
    host: "localhost",

    user: "root",
  
    //password: "", /*pc xampp database or localhost*/
   //password: "Gaurav@123", /* pc commond line mysql or localhost*/
   password: "raj@123", /* mobile xampp or local host*/

});

// use the  query to connect a localhost
con.connect(function(err) {
  if (err) throw err;
  console.log("Connected to localhost!");
 
  });


 // use the query to create a Database.
  let databaseName = "lab_pro";
  
  let createQuery = `CREATE DATABASE ${databaseName}`;

 
  con.query(createQuery, (err) => {
      if(err==1) throw  "Couldn't create";

      console.log(databaseName+" Database Created Successfully !");
  // use the query to Use a Database.
      let useQuery = `USE ${databaseName}`;
      con.query(useQuery, (error) => {
          if(error) throw error;

          console.log("Using Database"+databaseName);
        })
  // Create a new Table
    let TableName = "student";
    let table_query = `CREATE TABLE ${TableName} (name VARCHAR(255), address VARCHAR(255))`;
  
    con.query(table_query, (err) => {
      if(err==1) throw "Couldn't create";
      console.log(TableName+" Table created");
    });

//Insert Data in Table

  let Insert_query = `INSERT INTO ${TableName} (name, address) VALUES ?;`;
  
// multiple Values to be inserted
    let values = [
        ['Amit', 'Yellow Park'],
        ['Rishi', 'Park 38'],
        ['Akash', 'Central st 954'],
        ['Pratik', 'Road 989'],
        ['Mangesh', 'Sideway']
    ];
  
  // Executing the query show row are inserted in the table
    con.query(Insert_query, [values], (err) => {
    
        if (err==1) throw "Couldn't create";
        console.log("All Rows Inserted");
    });

//select query to show table data
    let show_student = `SELECT * FROM ${TableName}`
    con.query(show_student, function (err, result, fields) {

        if (err) throw err;
    
        console.log(result);
    
      });
  });



slip 11


Q.1	Write a java program to implement Adapter pattern to design Heart Model to Beat Model	[20 M]
// Heart Model
class HeartModel {
    private int heartRate;

    public int getHeartRate() {
        return heartRate;
    }

    public void setHeartRate(int heartRate) {
        this.heartRate = heartRate;
        System.out.println("Heart rate set to " + heartRate + " bpm");
    }
}

// Beat Model
interface BeatModel {
    int getBeatsPerMinute();
    void setBeatsPerMinute(int beatsPerMinute);
    void registerObserver(BeatObserver observer);
    void removeObserver(BeatObserver observer);
    void notifyObservers();
}

// Adapter class to adapt HeartModel to BeatModel
class HeartAdapter implements BeatModel {
    private HeartModel heartModel;
    private int beatsPerMinute;

    public HeartAdapter(HeartModel heartModel) {
        this.heartModel = heartModel;
        this.beatsPerMinute = 0;
    }

    @Override
    public int getBeatsPerMinute() {
        return beatsPerMinute;
    }

    @Override
    public void setBeatsPerMinute(int beatsPerMinute) {
        this.beatsPerMinute = beatsPerMinute;
        heartModel.setHeartRate(beatsPerMinute);
    }

    @Override
    public void registerObserver(BeatObserver observer) {
        // Not implemented in this example
    }

    @Override
    public void removeObserver(BeatObserver observer) {
        // Not implemented in this example
    }

    @Override
    public void notifyObservers() {
        // Not implemented in this example
    }
}

// Observer interface for Beat Model
interface BeatObserver {
    void updateBeat();
}

// Concrete BeatObserver implementation
class ConsoleBeatObserver implements BeatObserver {
    @Override
    public void updateBeat() {
        System.out.println("Beat received.");
    }
}

public class slip11 {
    public static void main(String[] args) {
        HeartModel heartModel = new HeartModel();
        BeatModel beatModel = new HeartAdapter(heartModel);

        // Register a BeatObserver
        BeatObserver observer = new ConsoleBeatObserver();
        beatModel.registerObserver(observer);

        // Update the beats per minute through the adapter
        beatModel.setBeatsPerMinute(80);
    }
}


Q2.	Write a python program to find all null values in a given dataset and remove them.
[20 M]
mycode

import pandas as pd

df = pd.read_csv('iris3.csv')
df

newdf = df.dropna()

print(newdf.to_string())

****sir code***
import pandas as pd
df = pd.read_csv("forestfires.csv")
df

null = df.isnull()
null

df = df.dropna()
df
df.to_csv('cleaned_dataset.csv', index=False)


Q.3	Create a node.js file that Select all records from the "customers" table, and delete the specified record.	[20 M]
var mysql = require('mysql');

var con = mysql.createConnection({
    host: "localhost",

    user: "root",
  
    //password: "", /*pc xampp database or localhost*/
   //password: "Gaurav@123", /* pc commond line mysql or localhost*/
   password: "raj@123", /* mobile xampp or local host*/

});

// use the  query to connect a localhost
con.connect(function(err) {
  if (err) throw err;
  console.log("Connected to localhost!");
 
  });


 // use the query to create a Database.
  let databaseName = "lab_pro";
  
  let createQuery = `CREATE DATABASE ${databaseName}`;

 
  con.query(createQuery, (err) => {
      if(err==1) throw  "Couldn't create";

      console.log(databaseName+" Database Created Successfully !");
  // use the query to Use a Database.
      let useQuery = `USE ${databaseName}`;
      con.query(useQuery, (error) => {
          if(error) throw error;

          console.log("Using Database"+databaseName);
        })
  // Create a new Table
    let TableName = "customers";
    let table_query = `CREATE TABLE ${TableName} (name VARCHAR(255), address VARCHAR(255))`;
  
    con.query(table_query, (err) => {
      if(err==1) throw "Couldn't create";
      console.log(TableName+" Table created");
    });

//Insert Data in Table

  let Insert_query = `INSERT INTO ${TableName} (name, address) VALUES ?;`;
  
// multiple Values to be inserted
    let values = [
        ['Amit', 'Yellow Park'],
        ['Rishi', 'Park 38'],
        ['Akash', 'Central st 954'],
        ['Pratik', 'Road 989'],
        ['Mangesh', 'Sideway']
    ];
  
  // Executing the query show row are inserted in the table
    con.query(Insert_query, [values], (err) => {
    
        if (err==1) throw "Couldn't create";
        console.log("All Rows Inserted");
    });

//select query to show table data
    let show_student = `SELECT * FROM ${TableName}`
    con.query(show_student, function (err, result, fields) {

        if (err) throw err;
    
        console.log(result);
    
      });

//Executing the query to delete specific row rows
    let D_query = `DELETE FROM student WHERE name = ?`;

   let name = 'Amit';
  
    con.query(D_query,name,(err, rows) => {
         if(err==1) throw "Couldn't delete";
  
        console.log('Number of rows deleted = ' + rows.affectedRows);
    });
// Executing the query to delete all row rows
   let delete_query1 = `DELETE FROM ${TableName}`;
   con.query(delete_query1,(err, rows) =>{
            if (err) throw err;
            console.log("All Records deleted = "+ rows.affectedRows);
        });

  });


slip 12


Q.1	 Write a Java Program to implement Decorator Pattern for interface Car to define the assemble() method and then decorate it to Sports car and Luxury Car	[20 M]

class BasicCar implements Car {
	@Override
	public void assemble() {
		System.out.print("Basic Car.");
	}
}


 interface Car {
	public void assemble();
}


 class CarDecorator implements Car {
	protected Car car;
	public CarDecorator(Car c){
		this.car=c;
	}
	
	@Override
	public void assemble() {
		this.car.assemble();
	}
}


 class LuxuryCar extends CarDecorator {

	public LuxuryCar(Car c) {
		super(c);
	}
	@Override
	public void assemble(){
		super.assemble();
		System.out.print(" Adding features of Luxury Car.");
	}
}


 class SportsCar extends CarDecorator {
	public SportsCar(Car c) {
		super(c);
	}
	@Override
	public void assemble(){
		super.assemble();
		System.out.print(" Adding features of Sports Car.");
	}
}



public class slip12 {

	public static void main(String[] args) {
		Car sportsCar = new SportsCar(new BasicCar());
		sportsCar.assemble();
		System.out.println("\n*****");
		
		Car sportsLuxuryCar = new SportsCar(new LuxuryCar(new BasicCar()));
		sportsLuxuryCar.assemble();
	}

}

Q. 2 Write a python program to make Categorical values in numeric format for a given dataset	[20 M]

***sir code **
from sklearn.preprocessing import LabelEncoder
import pandas as pd

df = pd.read_csv("forestfires.csv")
df.sample(5)

label_encoder = LabelEncoder()
df["Numneric_month"] = label_encoder.fit_transform(df["month"])
df["Numneric_day"] = label_encoder.fit_transform(df["day"])
df.sample(5)

df.to_csv('encoded_dataset.csv', index=False)


****my code***

import pandas as pd
from sklearn.preprocessing import LabelEncoder


df = pd.read_csv('jamesbond.csv')
 
#printing DataFrame
df


# Creating a instance of label Encoder.
le = LabelEncoder()
 
# Using .fit_transform function to fit label
# encoder and return encoded label
label = le.fit_transform(df['show'])
 
# printing label
label

df.drop("show", axis=1, inplace=True)
 
# Appending the array to our dataFrame
# with column name 'Purchased'
df["show"] = label
 
# printing Dataframe
df

Q.3	Create a Simple Web Server using node js.	[20 M]
var http = require('http'); 

var server = http.createServer(function (req, res) {  

res.write("<h1 style='background-color:green'>create server successfully</h1>");
res.end();

});

server.listen(8002); 
console.log('Node.js web server at port 8002 is running..')



slip 13


Q.1	Write a Java Program to implement an Adapter design pattern in mobile charger. Define two classes – Volt (to measure volts) and Socket (producing constant volts of 120V). Build an adapter that can produce 3 volts, 12 volts and default 120 volts. Implements Adapter pattern using Class Adapter	[20 M]

public class AdapterEx

{

    public static void main(String[] args)
    {
        SocketAdapter socketAdapter = new SocketAdapterImpl();
        Voltage voltage12 = socketAdapter.get12Voltage();
        System.out.println(voltage12.getVolts());

        Voltage voltage3 = socketAdapter.get3VVoltage();
        System.out.println(voltage3.getVolts());

        Voltage voltage120 = socketAdapter.get120Voltage();
        System.out.println(voltage120.getVolts());
    }
}

 class Socket
{
    public Voltage getVoltage()
    {
        return new Voltage(120); //In India 240 is the default voltage
    }
}

 interface SocketAdapter
{
     public Voltage get120Voltage();
     public Voltage get12Voltage();
     public Voltage get3VVoltage();
} 


 class SocketAdapterImpl extends Socket implements SocketAdapter
{

    //Using Composition for adapter pattern
    private Socket sock = new Socket();
    private Voltage convertVolt(Voltage v, int i)
    {
        return new Voltage(v.getVolts() / i);
    }
    @Override
    public Voltage get120Voltage()
    {
        return sock.getVoltage();
    }
    @Override
    public Voltage get12Voltage()
    {
        Voltage v = sock.getVoltage();
        return convertVolt(v, 20);
    }
    @Override
    public Voltage get3VVoltage()
    {
        Voltage v = sock.getVoltage();
        return convertVolt(v, 80);
    }
}


 class Voltage
{
    private int voltage;
    public Voltage(int v)
    {
        this.voltage = v;
    }
    public int getVolts()
    {
        return voltage;
    }
    public void setVolts(int voltage)
    {
        this.voltage = voltage;
    }
}

Q.2. Write a Python program to prepare Scatter Plot for Iris Dataset	[20 M]

import pandas as pd
import matplotlib.pyplot as plt

iris_data = pd.read_csv("iris2.csv")
iris_data

versicolor = iris_data[iris_data.variety == "Versicolor"]
setosa = iris_data[iris_data.variety =="Setosa"]
virginica = iris_data[iris_data.variety == "Virginica"]

fig, ax = plt.subplots()
fig.set_size_inches(8, 8)

points = ax.scatter(versicolor["petal.length"], versicolor["petal.width"], label="Versicolor")

points.set_facecolor("green")

ax.scatter(setosa["petal.length"], setosa["petal.width"], label="Setosa", marker="x", facecolor="blue")
ax.scatter(virginica["petal.length"], virginica["petal.width"], label="Virginica", marker="s", facecolor="red")

ax.set_xlabel("Petal Length (cm)")
ax.set_ylabel("Petal Width (cm)")
ax.set_title("Iris Petal Sizes")
ax.legend()




Q.3	Using node js create a User Login System.	[20 M]

*** madam code***

html-
<html>
<head>
<title>User login page</title>
<head>
    <script>
          function f(){
                var validRegex =/^[a-zA-Z0-9.!#$%&'+/=?^_`{|}~-]+@[a-zA-Z0-9-]+(?:\.[a-zA-Z0-9-]+)$/;
                var email=document.getElementById("email").value;
                if(!validRegex.test(email))
                    alert("Invalid Email!");
                 else
                    alert("submitted succesfully");
                return false;
         }
    </script>
</head>
<body>
    <form name="login" onsubmit="f()">
    <h1>Login here</h1>
    email id:<input type="text" id="email"/><br><br>
    password:<input type="password" id="password"><br><br>
    <input type="submit" id="submit" value="submit">
    </form>
</body>
</html>

javascript-
var http=require('http');
http.createServer(function(req,resp){
    var fs=require("fs");
    resp.writeHead(200,{'content-type':'text/html'});
     var content= fs.readFileSync("login.html");
         if(content){
       
         resp.write(content);
         }
         else{
            resp.write("404 error");
         }
        
    resp.end();
}).listen(6006);


slip 14


Q.1	Write a Java Program to implement Command Design Pattern for Command Interface with execute() . Use this to create variety of commands for LightOnCommand, LightOffCommand, GarageDoorUpCommand, StereoOnWithCDComman.	[20 M]

 interface Command {
	public void execute();

    public void undo();
}

class LightOnCommand implements Command {
	Light light;

	public LightOnCommand(Light light) {
		this.light = light;
	}

	public void execute() {
		light.on();
	}

    @Override
    public void undo() {
        // TODO Auto-generated method stub
        throw new UnsupportedOperationException("Unimplemented method 'undo'");
    }
}
 class LightOffCommand implements Command {
	Light light;

	public LightOffCommand(Light light) {
		this.light = light;
	}

	public void execute() {
		light.off();
	}

    @Override
    public void undo() {
        // TODO Auto-generated method stub
        throw new UnsupportedOperationException("Unimplemented method 'undo'");
    }
}

 class Light {
	String location = "";

	public Light(String location) {
		this.location = location;
	}
	public void on() {
		System.out.println(location + " light is on");
	}
	public void off() {
		System.out.println(location + " light is off");
	}
}

//  class StereoOnWithCDCommand implements Command {
// 	Stereo stereo;

// 	public StereoOnWithCDCommand(Stereo stereo) {
// 		this.stereo = stereo;
// 	}
// 	public void execute() {
// 		stereo.on();
// 		stereo.setCD();
// 		stereo.setVolume(11);
// 	}
// }


//  class StereoOffCommand implements Command {
// 	Stereo stereo;

// 	public StereoOffCommand(Stereo stereo) {
// 		this.stereo = stereo;
// 	}
// 	public void execute() {
// 		stereo.off();
// 	}
//     @Override
//     public void undo() {
//         // TODO Auto-generated method stub
//         throw new UnsupportedOperationException("Unimplemented method 'undo'");
//     }
// }


 class RemoteControlWithUndo {
	Command[] onCommands;
	Command[] offCommands;
	Command undoCommand;

	public RemoteControlWithUndo() {
		onCommands = new Command[7];
		offCommands = new Command[7];

		Command noCommand = new NoCommand();
		for(int i=0;i<7;i++) {
			onCommands[i] = noCommand;
			offCommands[i] = noCommand;
		}
		undoCommand = noCommand;
	}
	public void setCommand(int slot, Command onCommand, Command offCommand) {
		onCommands[slot] = onCommand;
		offCommands[slot] = offCommand;
	}
	public void onButtonWasPushed(int slot) {
		onCommands[slot].execute();
		undoCommand = onCommands[slot];
	}
	public void offButtonWasPushed(int slot) {
		offCommands[slot].execute();
		undoCommand = offCommands[slot];
	}
	public void undoButtonWasPushed() {
		undoCommand.undo();
	}

	public String toString() {
		StringBuffer stringBuff = new StringBuffer();
		stringBuff.append("\n------ Remote Control -------\n");
		for (int i = 0; i < onCommands.length; i++) {
			stringBuff.append("[slot " + i + "] " + onCommands[i].getClass().getName()
				+ "    " + offCommands[i].getClass().getName() + "\n");
		}
		stringBuff.append("[undo] " + undoCommand.getClass().getName() + "\n");
		return stringBuff.toString();
	}
}

 class NoCommand implements Command {
	public void execute() { }
	public void undo() { }
}

public class slip14new {

	public static void main(String[] args) {
		RemoteControlWithUndo remoteControl = new RemoteControlWithUndo();

		Light livingRoomLight = new Light("Living Room");
		Light kitchenLight = new Light("Kitchen");
		// CeilingFan ceilingFan= new CeilingFan("Living Room");
		// GarageDoor garageDoor = new GarageDoor("");
		// Stereo stereo = new Stereo("Living Room");

		LightOnCommand livingRoomLightOn = 
				new LightOnCommand(livingRoomLight);
		LightOffCommand livingRoomLightOff = 
				new LightOffCommand(livingRoomLight);
		LightOnCommand kitchenLightOn = 
				new LightOnCommand(kitchenLight);
		LightOffCommand kitchenLightOff = 
				new LightOffCommand(kitchenLight);

		// CeilingFanOnCommand ceilingFanOn = new CeilingFanOnCommand(ceilingFan);
		// CeilingFanOffCommand ceilingFanOff = new CeilingFanOffCommand(ceilingFan);

		// GarageDoorUpCommand garageDoorUp = new GarageDoorUpCommand(garageDoor);
		// GarageDoorDownCommand garageDoorDown = new GarageDoorDownCommand(garageDoor);

		// StereoOnWithCDCommand stereoOnWithCD =
		// 		new StereoOnWithCDCommand(stereo);
		// StereoOffCommand  stereoOff =
		// 		new StereoOffCommand(stereo);

		remoteControl.setCommand(0, livingRoomLightOn, livingRoomLightOff);
		remoteControl.setCommand(1, kitchenLightOn, kitchenLightOff);
		// remoteControl.setCommand(2, ceilingFanOn, ceilingFanOff);
		// remoteControl.setCommand(3, stereoOnWithCD, stereoOff);

		System.out.println(remoteControl);

		remoteControl.onButtonWasPushed(0);
		remoteControl.offButtonWasPushed(0);
		remoteControl.onButtonWasPushed(1);
		remoteControl.offButtonWasPushed(1);
		remoteControl.onButtonWasPushed(2);
		remoteControl.offButtonWasPushed(2);
		remoteControl.onButtonWasPushed(3);
		remoteControl.offButtonWasPushed(3);
	}
}

Q.2.	Write a python program to find all null values in a given dataset and remove them.[20 M]
mycode

import pandas as pd

df = pd.read_csv('iris3.csv')
df

newdf = df.dropna()

print(newdf.to_string())

****sir code***
import pandas as pd
df = pd.read_csv("forestfires.csv")
df

null = df.isnull()
null

df = df.dropna()
df
df.to_csv('cleaned_dataset.csv', index=False)

Q.3	Write node js script to interact with the filesystem, and serve a web page from a file .[20 M]

*** madam code***

var express = require('express');
var app = express();
var PORT = 3000;
 
app.get('/', function(req, res){
    res.download('hello.txt');
});
 
app.listen(PORT, function(err){
    if (err) console.log(err);
    console.log("Server listening on PORT", PORT);
});


***my code ***
var http = require('http');
var fs = require('fs');
http.createServer(function (req, res) {
  fs.readFile('assi16.txt', function(err, data) {
    res.writeHead(200, {'Content-Type': 'text/html'});
    res.write(data);
    return res.end();
  });
}).listen(8002);
console.log('Node.js web server at port 8002 is running..')


slip 15

Q.1	Write a Java Program to implement Facade Design Pattern for HomeTheater[20 M]


 class Amplifier {
 String description;
 Tuner tuner;
 DvdPlayer dvd;
 CdPlayer cd;

 public Amplifier(String description) {
  this.description = description;
 }
 public void on() {
  System.out.println(description + " on");
 }
 public void off() {
  System.out.println(description + " off");
 }
 public void setStereoSound() {
  System.out.println(description + " stereo mode on");
 }
 public void setSurroundSound() {
  System.out.println(description + " surround sound on (5 speakers, 1 subwoofer)");
 }
 public void setVolume(int level) {
  System.out.println(description + " setting volume to " + level);
 }
 public void setTuner(Tuner tuner) {
  System.out.println(description + " setting tuner to " + dvd);
  this.tuner = tuner;
 }
 public void setDvd(DvdPlayer dvd) {
  System.out.println(description + " setting DVD player to " + dvd);
  this.dvd = dvd;
 }
 public void setCd(CdPlayer cd) {
  System.out.println(description + " setting CD player to " + cd);
  this.cd = cd;
 }
public String toString() {
  return description;
 }
}

 class CdPlayer {
 String description;
 int currentTrack;
 Amplifier amplifier;
 String title;

 public CdPlayer(String description, Amplifier amplifier) {
  this.description = description;
  this.amplifier = amplifier;
 }
 public void on() {
  System.out.println(description + " on");
 }
 public void off() {
  System.out.println(description + " off");
 }
 public void eject() {
  title = null;
  System.out.println(description + " eject");
 }
 public void play(String title) {
  this.title = title;
  currentTrack = 0;
  System.out.println(description + " playing \"" + title + "\"");
 }
 public void play(int track) {
  if (title == null) {
   System.out.println(description + " can't play track " + currentTrack + 
     ", no cd inserted");
  } else {
   currentTrack = track;
   System.out.println(description + " playing track " + currentTrack);
  }
 }

 public void stop() {
  currentTrack = 0;
  System.out.println(description + " stopped");
 }

 public void pause() {
  System.out.println(description + " paused \"" + title + "\"");
 }

 public String toString() {
  return description;
 }
}


 class DvdPlayer {
 String description;
 int currentTrack;
 Amplifier amplifier;
 String movie;

 public DvdPlayer(String description, Amplifier amplifier) {
  this.description = description;
  this.amplifier = amplifier;
 }

 public void on() {
  System.out.println(description + " on");
 }

 public void off() {
  System.out.println(description + " off");
 }

        public void eject() {
  movie = null;
                System.out.println(description + " eject");
        }

 public void play(String movie) {
  this.movie = movie;
  currentTrack = 0;
  System.out.println(description + " playing \"" + movie + "\"");
 }

 public void play(int track) {
  if (movie == null) {
   System.out.println(description + " can't play track " + track + " no dvd inserted");
  } else {
   currentTrack = track;
   System.out.println(description + " playing track " + currentTrack + " of \"" + movie + "\"");
  }
 }

 public void stop() {
  currentTrack = 0;
  System.out.println(description + " stopped \"" + movie + "\"");
 }

 public void pause() {
  System.out.println(description + " paused \"" + movie + "\"");
 }

 public void setTwoChannelAudio() {
  System.out.println(description + " set two channel audio");
 }

 public void setSurroundAudio() {
  System.out.println(description + " set surround audio");
 }

 public String toString() {
  return description;
 }
}


 class HomeTheaterFacade {
 Amplifier amp;
 Tuner tuner;
 DvdPlayer dvd;
 CdPlayer cd;
 Projector projector;
 TheaterLights lights;
 Screen screen;
 PopcornPopper popper;

 public HomeTheaterFacade(Amplifier amp, 
     Tuner tuner, 
     DvdPlayer dvd, 
     CdPlayer cd, 
     Projector projector, 
     Screen screen,
     TheaterLights lights,
     PopcornPopper popper) {

  this.amp = amp;
  this.tuner = tuner;
  this.dvd = dvd;
  this.cd = cd;
  this.projector = projector;
  this.screen = screen;
  this.lights = lights;
  this.popper = popper;
 }

 public void watchMovie(String movie) {
  System.out.println("Get ready to watch a movie...");
  popper.on();
  popper.pop();
  lights.dim(10);
  screen.down();
  projector.on();
  projector.wideScreenMode();
  amp.on();
  amp.setDvd(dvd);
  amp.setSurroundSound();
  amp.setVolume(5);
  dvd.on();
  dvd.play(movie);
 }


 public void endMovie() {
  System.out.println("Shutting movie theater down...");
  popper.off();
  lights.on();
  screen.up();
  projector.off();
  amp.off();
  dvd.stop();
  dvd.eject();
  dvd.off();
 }

 public void listenToCd(String cdTitle) {
  System.out.println("Get ready for an audiopile experence...");
  lights.on();
  amp.on();
  amp.setVolume(5);
  amp.setCd(cd);
  amp.setStereoSound();
  cd.on();
  cd.play(cdTitle);
 }
 public void endCd() {
  System.out.println("Shutting down CD...");
  amp.off();
  amp.setCd(cd);
  cd.eject();
  cd.off();
 }
 public void listenToRadio(double frequency) {
  System.out.println("Tuning in the airwaves...");
  tuner.on();
  tuner.setFrequency(frequency);
  amp.on();
  amp.setVolume(5);
  amp.setTuner(tuner);
 }
 public void endRadio() {
  System.out.println("Shutting down the tuner...");
  tuner.off();
  amp.off();
 }
}


 class PopcornPopper {
 String description;

 public PopcornPopper(String description) {
  this.description = description;
 }

 public void on() {
  System.out.println(description + " on");
 }

 public void off() {
  System.out.println(description + " off");
 }

 public void pop() {
  System.out.println(description + " popping popcorn!");
 }
        public String toString() {
                return description;
        }
}



 class Projector {
 String description;
 DvdPlayer dvdPlayer;

 public Projector(String description, DvdPlayer dvdPlayer) {
  this.description = description;
  this.dvdPlayer = dvdPlayer;
 }

 public void on() {
  System.out.println(description + " on");
 }

 public void off() {
  System.out.println(description + " off");
 }

 public void wideScreenMode() {
  System.out.println(description + " in widescreen mode (16x9 aspect ratio)");
 }

 public void tvMode() {
  System.out.println(description + " in tv mode (4x3 aspect ratio)");
 }

        public String toString() {
                return description;
        }
}


 class Screen {
 String description;

 public Screen(String description) {
  this.description = description;
 }

 public void up() {
  System.out.println(description + " going up");
 }

 public void down() {
  System.out.println(description + " going down");
 }
        public String toString() {
                return description;
        }
}
 class TheaterLights {
 String description;

 public TheaterLights(String description) {
  this.description = description;
 }

 public void on() {
  System.out.println(description + " on");
 }

 public void off() {
  System.out.println(description + " off");
 }

 public void dim(int level) {
  System.out.println(description + " dimming to " + level  + "%");
 }

        public String toString() {
                return description;
        }
}


    class Tuner {
	String description;
	Amplifier amplifier;
	double frequency;
	public Tuner(String description, Amplifier amplifier) {
		this.description = description;
	}
	public void on() {
		System.out.println(description + " on");
	}
	public void off() {
		System.out.println(description + " off");
	}
	public void setFrequency(double frequency) {
		System.out.println(description + " setting frequency to " + frequency);
		this.frequency = frequency;
	}
	public void setAm() {
		System.out.println(description + " setting AM mode");
	}

	public void setFm() {
		System.out.println(description + " setting FM mode");
	}
	public String toString() {
		return description;
	}
}



public class slip15 {
 public static void main(String[] args) {
  Amplifier amp = new Amplifier("Top-O-Line Amplifier");
  Tuner tuner = new Tuner("Top-O-Line AM/FM Tuner", amp);
  DvdPlayer dvd = new DvdPlayer("Top-O-Line DVD Player", amp);
  CdPlayer cd = new CdPlayer("Top-O-Line CD Player", amp);
  Projector projector = new Projector("Top-O-Line Projector", dvd);
  TheaterLights lights = new TheaterLights("Theater Ceiling Lights");
  Screen screen = new Screen("Theater Screen");
  PopcornPopper popper = new PopcornPopper("Popcorn Popper");

  HomeTheaterFacade homeTheater = new HomeTheaterFacade(amp, tuner, dvd, cd, projector, screen, lights, popper);

  homeTheater.watchMovie("Raiders of the Lost Ark");
  homeTheater.endMovie();
 }
}



Q.2	Write a python program to make Categorical values in numeric format for a given dataset	[20 M]
***sir code **
from sklearn.preprocessing import LabelEncoder
import pandas as pd

df = pd.read_csv("forestfires.csv")
df.sample(5)

label_encoder = LabelEncoder()
df["Numneric_month"] = label_encoder.fit_transform(df["month"])
df["Numneric_day"] = label_encoder.fit_transform(df["day"])
df.sample(5)

df.to_csv('encoded_dataset.csv', index=False)


****my code***

import pandas as pd
from sklearn.preprocessing import LabelEncoder


df = pd.read_csv('jamesbond.csv')
 
#printing DataFrame
df


# Creating a instance of label Encoder.
le = LabelEncoder()
 
# Using .fit_transform function to fit label
# encoder and return encoded label
label = le.fit_transform(df['show'])
 
# printing label
label

df.drop("show", axis=1, inplace=True)
 
# Appending the array to our dataFrame
# with column name 'Purchased'
df["show"] = label
 
# printing Dataframe
df

Q.3	Write node js script to build Your Own Node.js Module. Use require (‘http’) module is a built-in Node module that invokes the functionality of the HTTP library to create a local server. Also use the export statement to make functions in your module available externally. Create a new text file to contain the functions in your module called, “modules.js” and add this function to return today’s date and time.[20 M]
***my code***
assi17.js

var http = require('http');
var dt = require("./modules");

http.createServer(function(req,res){
    res.writeHead(200, {'Content-Type': 'text/html'});

    res.write("<h1 style='background-color:green'>Current Date And Time :</h1>"+dt.myDateAndTime());

    res.end();
}).listen(8002);
console.log('Node.js web server at port 8002 is running..')

module.js
exports.myDateAndTime = function(){
    return Date();
}

***madam code***
Modules.js –
module.exports.dt= new Date();

date.js -
var http = require('http');
var dt = require('./Modules');

http.createServer(function (req, res) {
  res.writeHead(200, {'Content-Type': 'text/html'});
  res.write("The date and time are currently: " + dt.myDateTime());
  res.end();
}).listen(8080);


slip 16

Q.1	Write a Java Program to implement Observer Design Pattern for number conversion. Accept a number in Decimal form and represent it in Hexadecimal, Octal and Binary. Change the Number and it reflects in other forms also	[20 M]

import java.util.ArrayList;
import java.util.List;
 class Subject {
	
   private List<Observer> observers = new ArrayList<Observer>();
   private int state;

   public int getState() {
      return state;
   }

   public void setState(int state) {
      this.state = state;
      notifyAllObservers();
   }

   public void attach(Observer observer){
      observers.add(observer);		
   }

   public void notifyAllObservers(){
      for (Observer observer : observers) {
         observer.update();
      }
   } 	
}

 abstract class Observer {
   protected Subject subject;
   public abstract void update();
}

 class BinaryObserver extends Observer{

   public BinaryObserver(Subject subject){
      this.subject = subject;
      this.subject.attach(this);
   }

   @Override
   public void update() {
      System.out.println( "Binary String: " + Integer.toBinaryString( subject.getState() ) ); 
   }
}

 class OctalObserver extends Observer{

   public OctalObserver(Subject subject){
      this.subject = subject;
      this.subject.attach(this);
   }

   @Override
   public void update() {
     System.out.println( "Octal String: " + Integer.toOctalString( subject.getState() ) ); 
   }
}

 class HexaObserver extends Observer{

   public HexaObserver(Subject subject){
      this.subject = subject;
      this.subject.attach(this);
   }

   @Override
   public void update() {
      System.out.println( "Hex String: " + Integer.toHexString( subject.getState() ).toUpperCase() ); 
   }
}

 class slip16 {
   public static void main(String[] args) {
      Subject subject = new Subject();

      new HexaObserver(subject);
      new OctalObserver(subject);
      new BinaryObserver(subject);

      System.out.println("First state change: 15");	
      subject.setState(15);
      System.out.println("Second state change: 10");	
      subject.setState(10);
   }
}

Q.2	Write a python program to Implement Simple Linear Regression for predicting house price.	[20 M]

*** sir code ***

import pandas as pd
import matplotlib.pyplot as plt
from sklearn import linear_model

ps=pd.read_csv("Housing.csv")
df = ps[['area', 'price']]
df.sample(5)

plt.scatter(df.area,df.price,color='red',marker='+')

In_v=df.drop('price',axis='columns')
In_v

model=linear_model.LinearRegression()
model.fit(In_v,df.price)

model.predict([[6720]])


***my code ***

  import numpy as np
    import pandas as pd
    
    # Visualisation Libraries
    import seaborn as sns
    import matplotlib.pyplot as plt
    
    # Data Processing Libraries
    from sklearn.feature_selection import SelectKBest
    from sklearn.feature_selection import chi2
    from sklearn import model_selection
    from sklearn.metrics import mean_squared_error, r2_score
    
    # Algorithm Libraries
    from sklearn.ensemble import ExtraTreesClassifier
    from sklearn.model_selection import train_test_split
    from sklearn.linear_model import LinearRegression
    from sklearn.tree import DecisionTreeRegressor
    from sklearn.ensemble import RandomForestRegressor
    
    # Math Library
    import math
    
    # Importing Dataset
    df = pd.read_csv("HousingData.xls")
    
    # Printing Dataset
    df.head()   

       
    # Calculating the mean, minimum, deviation, maximum and other factors
    df.describe()
    fig=plt.figure()
    ax=fig.add_subplot(1, 1, 1)
    ax.hist(df['RM'], bins = 35)
    plt.title("Average number of rooms Distribution ")
    plt.xlabel("RM")
    plt.ylabel("frequency")
    plt.show()
    
    fig=plt.figure()
    ax=fig.add_subplot(1, 1, 1)
    ax.hist(df['LSTAT'], bins = 35)
    plt.title("Homeowners distribution with low class")
    plt.xlabel("LSTAT")
    plt.ylabel("frequency")
    plt.show()
    
    fig=plt.figure()
    ax=fig.add_subplot(1, 1, 1)
    ax.hist(df['PTRATIO'], bins = 35)
    plt.title("Students to Teachers ratio distribution")
    plt.xlabel("PTRATIO")
    plt.ylabel("frequency")
    plt.show()
    
    fig=plt.figure()
    ax=fig.add_subplot(1, 1, 1)
    ax.hist(df['AGE'], bins = 35)
    plt.title("Ages of Black Owned Portion in the town")
    plt.xlabel("AGE")
    plt.ylabel("B")
    plt.show()
    
    N = 506
    x = df.AGE
    y = df.B
    colors = np.random.rand(N)

    plt.scatter(x, y, c=colors)
    plt.title("scatter")
    plt.show()
    
    plt.title("hitmap")
    sns.heatmap(df.isnull(),yticklabels=False,cbar=False,cmap='Blues')


Q.3	Create a js file named main.js for event-driven application. There should be a main loop that listens for events, and then triggers a callback function when one of those events is detected.	[20 M]
***madam code***

var events = require('events');
var myeventEmitter = new events.EventEmitter();
myeventEmitter.on('myevent', function Listener1(){
     console.log('listener1 executed!');
});
myeventEmitter.on('myevent' ,function Listener2(a,b){
     console.log('listener2 executed! parameter');
});
console.log(myeventEmitter.listeners('myevent'));
myeventEmitter.emit('myevent' ,10,20);


***my code***
var events = require('events');

// Create an eventEmitter object
var eventEmitter = new events.EventEmitter();
// Create an event handler as follows
var connectHandler = function connected() {
   console.log('connection succesful.');
  
   // Fire the data_received event 
   eventEmitter.emit('data_received');
}
// Bind the connection event with the handler
eventEmitter.on('connection', connectHandler);
// Bind the data_received event with the anonymous function
eventEmitter.on('data_received', function() {
   console.log('data received succesfully.');
});
// Fire the connection event 
eventEmitter.emit('connection');
console.log("Program Ended.");

slip 17

Q.1	Write a Java Program to implement Abstract Factory Pattern for Shape interface.
[20 M].


 interface Shape {
   void draw();
}
 class RoundedRectangle implements Shape {
   @Override
   public void draw() {
      System.out.println("Inside RoundedRectangle::draw() method.");
   }
}


 class RoundedSquare implements Shape {
   @Override
   public void draw() {
      System.out.println("Inside RoundedSquare::draw() method.");
   }
}


 class Rectangle implements Shape {
   @Override
   public void draw() {
      System.out.println("Inside Rectangle::draw() method.");
   }
}

 class Square implements Shape {
   @Override
   public void draw() {
      System.out.println("Inside Square::draw() method.");
   }
}
// Step 3 Create an Abstract class to get factories for Normal and Rounded Shape Objects.



 abstract class AbstractFactory {
   abstract Shape getShape(String shapeType) ;
}
// Step 4 Create Factory classes extending AbstractFactory to generate object of concrete class based on given information.



 class ShapeFactory extends AbstractFactory {
   @Override
   public Shape getShape(String shapeType){    
      if(shapeType.equalsIgnoreCase("RECTANGLE")){
         return new Rectangle();         
      }else if(shapeType.equalsIgnoreCase("SQUARE")){
         return new Square();
      }	
      return null;
   }
}


 class RoundedShapeFactory extends AbstractFactory {
   @Override
   public Shape getShape(String shapeType){    
      if(shapeType.equalsIgnoreCase("RECTANGLE")){
         return new RoundedRectangle();         
      }else if(shapeType.equalsIgnoreCase("SQUARE")){
         return new RoundedSquare();
      }	
      return null;
   }
}
// Step 5 Create a Factory generator/producer class to get factories by passing an information such as Shape


 class FactoryProducer {
   public static AbstractFactory getFactory(boolean rounded){   
      if(rounded){
         return new RoundedShapeFactory();         
      }else{
         return new ShapeFactory();
      }
   }
}
// Step 6 Use the FactoryProducer to get AbstractFactory in order to get factories of concrete classes by passing an information such as type.



public class slip17_27 {
   public static void main(String[] args) {
      //get shape factory
      AbstractFactory shapeFactory = FactoryProducer.getFactory(false);
      //get an object of Shape Rectangle
      Shape shape1 = shapeFactory.getShape("RECTANGLE");
      //call draw method of Shape Rectangle
      shape1.draw();
      //get an object of Shape Square 
      Shape shape2 = shapeFactory.getShape("SQUARE");
      //call draw method of Shape Square
      shape2.draw();
      //get shape factory
      AbstractFactory shapeFactory1 = FactoryProducer.getFactory(true);
      //get an object of Shape Rectangle
      Shape shape3 = shapeFactory1.getShape("RECTANGLE");
      //call draw method of Shape Rectangle
      shape3.draw();
      //get an object of Shape Square 
      Shape shape4 = shapeFactory1.getShape("SQUARE");
      //call draw method of Shape Square
      shape4.draw();

   }
}

Q.2.	Write a python program to implement Multiple Linear Regression for a given dataset.
[20 M]

***sir code ***
import pandas as pd
import matplotlib.pyplot as plt
from sklearn import linear_model

ps=pd.read_csv("Housing.csv")
ps.sample(10)

df = ps[['area','bedrooms','bathrooms','stories','price']]
df.sample(5)

model=linear_model.LinearRegression()
model.fit(df.drop('price',axis='columns'),df.price)

model.predict([[7400,3,2,4]])

***my code***
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
  
dataset = pd.read_csv('Salary_Data.csv')
dataset.head()
 
# data preprocessing
X = dataset.iloc[:, :-1].values  #independent variable array
y = dataset.iloc[:,1].values  #dependent variable vector
 
# splitting the dataset
from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X,y,test_size=1/3,random_state=0)
 
# fitting the regression model
from sklearn.linear_model import LinearRegression
regressor = LinearRegression()
regressor.fit(X_train,y_train) #actually produces the linear eqn for the data
 
# predicting the test set results
y_pred = regressor.predict(X_test) 
y_pred
 
y_test
 
# visualizing the results
#plot for the TRAIN
  
plt.scatter(X_train, y_train, color='red') # plotting the observation line
plt.plot(X_train, regressor.predict(X_train), color='blue') # plotting the regression line
plt.title("Salary vs Experience (Training set)") # stating the title of the graph
  
plt.xlabel("Years of experience") # adding the name of x-axis
plt.ylabel("Salaries") # adding the name of y-axis
plt.show() # specifies end of graph
 
#plot for the TEST
  
plt.scatter(X_test, y_test, color='red') 
plt.plot(X_train, regressor.predict(X_train), color='blue') # plotting the regression line
plt.title("Salary vs Experience (Testing set)")
  
plt.xlabel("Years of experience") 
plt.ylabel("Salaries") 
plt.show() 

Q.3		Write node js application that transfer a file as an attachment on web and enables browser to prompt the  user to download file using express js.	[20 M]

***my code***

var express = require('express');
var app = express();
var PORT = 8002;  
app.get('/', function(req, res){
  
    res.download('assi19.txt');

});
app.listen(PORT, function(err){
    if (err) console.log(err);
    console.log("Server listening on PORT", PORT);
});

// var http = require('http'); 

// var server = http.createServer(function (req, res) {  
// res.download('assi19.txt');

// res.end();

// });

// server.listen(8002); 

// console.log('Node.js web server at port 8002 is running..')

slip 18


Q.1	Write a JAVA Program to implement built-in support (java.util.Observable) Weather station with members temperature, humidity, pressure and methods mesurmentsChanged(), setMesurment(), getTemperature(), getHumidity(), getPressure()	[20 M]

import java.util.*;

interface Observer {
    public void update(float temp, float humidity, float pressure);
}

interface DisplayElement {
    public void display();
}

interface Subject {
    public void registerObserver(Observer o);

    public void removeObserver(Observer o);

    public void notifyObservers();
}

class WeatherData implements Subject {
    private ArrayList<Observer> observers;
    private float temperature;
    private float humidity;
    private float pressure;

    public WeatherData() {
        observers = new ArrayList<>();
    }

    public void registerObserver(Observer o) {
        observers.add(o);
    }

    public void removeObserver(Observer o) {
        int i = observers.indexOf(o);
        if (i >= 0) {
            observers.remove(i);
        }
    }

    public void notifyObservers() {
        for (int i = 0; i < observers.size(); i++) {
            Observer observer = (Observer) observers.get(i);
            observer.update(temperature, humidity, pressure);
        }
    }

    public void measurementsChanged() {
        notifyObservers();
    }

    public void setMeasurements(float temperature, float humidity, float pressure) {
        this.temperature = temperature;
        this.humidity = humidity;
        this.pressure = pressure;
        measurementsChanged();
    }

    public float getTemperature() {
        return temperature;
    }

    public float getHumidity() {
        return humidity;
    }

    public float getPressure() {
        return pressure;
    }
}

class ForecastDisplay implements Observer, DisplayElement {
    private float currentPressure = 29.92f;
    private float lastPressure;
    private WeatherData weatherData;

    public ForecastDisplay(WeatherData weatherData) {
        this.weatherData = weatherData;
        weatherData.registerObserver(this);
    }

    public void update(float temp, float humidity, float pressure) {
        lastPressure = currentPressure;
        currentPressure = pressure;

        display();
    }

    public void display() {
        System.out.print("Forecast: ");
        if (currentPressure > lastPressure) {
            System.out.println("Improving weather on the way!");
        } else if (currentPressure == lastPressure) {
            System.out.println("More of the same");
        } else if (currentPressure < lastPressure) {
            System.out.println("Watch out for cooler weather, rainy weather");
        }
    }
}

class HeatIndexDisplay implements Observer, DisplayElement {
    float heatIndex = 0.0f;
    private WeatherData weatherData;

    public HeatIndexDisplay(WeatherData weatherData) {
        this.weatherData = weatherData;
        weatherData.registerObserver(this);
    }

    public void update(float t, float rh, float pressure) {
        heatIndex = computeHeatIndex(t, rh);
        display();
    }

    private float computeHeatIndex(float t, float rh) {
        float index = (float) ((16.923 + (0.185212 * t) + (5.37941 * rh) - (0.100254 * t * rh)
                + (0.00941695 * (t * t)) + (0.00728898 * (rh * rh))
                + (0.000345372 * (t * t * rh)) - (0.000814971 * (t * rh * rh)) +
                (0.0000102102 * (t * t * rh * rh)) - (0.000038646 * (t * t * t)) + (0.0000291583 *
                        (rh * rh * rh))
                + (0.00000142721 * (t * t * t * rh)) +
                (0.000000197483 * (t * rh * rh * rh)) - (0.0000000218429 * (t * t * t * rh * rh)) +
                0.000000000843296 * (t * t * rh * rh * rh)) -
                (0.0000000000481975 * (t * t * t * rh * rh * rh)));
        return index;
    }

    public void display() {
        System.out.println("Heat index is " + heatIndex);
    }
}

class StatisticsDisplay implements Observer, DisplayElement {
    private float maxTemp = 0.0f;
    private float minTemp = 200;
    private float tempSum = 0.0f;
    private int numReadings;
    private WeatherData weatherData;

    public StatisticsDisplay(WeatherData weatherData) {
        this.weatherData = weatherData;
        weatherData.registerObserver(this);
    }

    public void update(float temp, float humidity, float pressure) {
        tempSum += temp;
        numReadings++;

        if (temp > maxTemp) {
            maxTemp = temp;
        }

        if (temp < minTemp) {
            minTemp = temp;
        }

        display();
    }

    public void display() {
        System.out.println("Avgerage/Maximum/Minimum temperature = " + (tempSum / numReadings)
                + "/" + maxTemp + "/" + minTemp);
    }
}

class CurrentConditionsDisplay implements Observer, DisplayElement {
    private float temperature;
    private float humidity;
    private Subject weatherData;

    public CurrentConditionsDisplay(Subject weatherData) {
        this.weatherData = weatherData;
        weatherData.registerObserver(this);
    }

    public void update(float temperature, float humidity, float pressure) {
        this.temperature = temperature;
        this.humidity = humidity;
        display();
    }

    public void display() {
        System.out.println("Current conditions: " + temperature
                + "F degrees and " + humidity + "% humidity");
    }
}
//weather.java main file
class  slip3_18_28{

    public static void main(String[] args) {
        WeatherData weatherData = new WeatherData();

        CurrentConditionsDisplay currentDisplay = new CurrentConditionsDisplay(weatherData);
        StatisticsDisplay statisticsDisplay = new StatisticsDisplay(weatherData);
        ForecastDisplay forecastDisplay = new ForecastDisplay(weatherData);

        weatherData.setMeasurements(70, 55, 40.4f);
        weatherData.setMeasurements(72, 60, 39.2f);
        weatherData.setMeasurements(68, 80, 39.2f);
    }
}


Q.2.	Write a python program to implement Polynomial Linear Regression for given dataset
[20 M]
***sir code***
import pandas as pd
import matplotlib .pyplot as plt

df= pd.read_csv('Salary.csv')
df

plt.scatter(df['YearsExperience'],df['Salary'])

x= df.iloc[:,1:-1].values
y= df.iloc[:,-1].values
X

y

from sklearn.preprocessing import PolynomialFeatures
poly =PolynomialFeatures(degree=3)
x_poly = poly.fit_transform(x)
x_poly

from sklearn.linear_model import LinearRegression
model = LinearRegression()
model.fit(x_poly,y)

plt.scatter(x,y)
plt.plot(x,model.predict(poly.fit_transform(x)))

model.predict(poly.fit_transform([[6]]))

***my code***
import numpy as np
import matplotlib.pyplot as plt
import pandas as pd
  
dataset = pd.read_csv('Position_Salaries.csv')
dataset
 
X = dataset.iloc[:,1:2].values  
y = dataset.iloc[:,2].values
 
# fitting the linear regression model
from sklearn.linear_model import LinearRegression
lin_reg = LinearRegression()
lin_reg.fit(X,y)
 
# visualising the linear regression model
plt.scatter(X,y, color='red')
plt.plot(X, lin_reg.predict(X),color='blue')
plt.title("Truth or Bluff(Linear)")
plt.xlabel('Position level')
plt.ylabel('Salary')
plt.show()
 
# polynomial regression model
from sklearn.preprocessing import PolynomialFeatures
poly_reg = PolynomialFeatures(degree=2)
X_poly = poly_reg.fit_transform(X)
  
X_poly     # prints X_poly
 
lin_reg2 = LinearRegression()
lin_reg2.fit(X_poly,y)
 
 
# visualising polynomial regression
from sklearn.preprocessing import PolynomialFeatures
poly_reg = PolynomialFeatures(degree=4)
X_poly = poly_reg.fit_transform(X)
lin_reg2 = LinearRegression()
lin_reg2.fit(X_poly,y)
  
X_grid = np.arange(min(X),max(X),0.1)
X_grid = X_grid.reshape(len(X_grid),1) 
plt.scatter(X,y, color='red') 
  
plt.plot(X_grid, lin_reg2.predict(poly_reg.fit_transform(X_grid)),color='blue') 
  
plt.title("Truth or Bluff(Polynomial)")
plt.xlabel('Position level')
plt.ylabel('Salary')
plt.show()

Q.3	Create your Django app in which after running the server, you should see on the browser, the text “Hello! I am learning Django”, which you defined in the index view.
[20 M]

***sir code***
root folder is que1 in 2 folders
1) que1

urls.py

from django.contrib import admin
from django.urls import path , include

urlpatterns = [
    path("admin/", admin.site.urls),
    path("",include('sample.urls')),
]



2) sample (sample is app folder)
admin.py
from django.contrib import admin

apps.py
from django.apps import AppConfig


class SampleConfig(AppConfig):
    default_auto_field = "django.db.models.BigAutoField"
    name = "sample"


urls.py
from django.contrib import admin
from django.urls import path
from . import views

urlpatterns = [
    path("admin/", admin.site.urls),
    path("",views.home, name='home'),
]

views.py
from django.shortcuts import render
from django.http import HttpResponse

# Create your views here.
def home(request):
    return HttpResponse("hello, How are ")


***my code***

root folder is assi1 in 2 folders
1) assi1

urls.py

from django.contrib import admin
from django.urls import path
from my_app.views import index


urlpatterns = [
    path('', index, name='index'),

]




2) my_app (my_app is app folder) in my_app folder present templates folder


apps.py
from django.apps import AppConfig


class MyAppConfig(AppConfig):
    default_auto_field = 'django.db.models.BigAutoField'
    name = 'my_app'





views.py
from django.shortcuts import render

# Create your views here.
def index(request):
    return render(request, 'index.html')
 
 1)template ( in my_app folder present templates folder)

 index.html
 <!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Hello world</title>
</head>
<body>
    <h1>
        Hello I am Learning Django
    </h1>
</body>
</html>
 



slip 19

Q.1	Write a Java Program to implement Factory method for Pizza Store with createPizza(), orederPizza(), prepare(), Bake(), cut(), box(). Use this to create variety of pizza’s
	like NyStyleCheesePizza, ChicagoStyleCheesePizza etc.	[20 M]
	
import java.util.ArrayList; 
class ChicagoPizzaStore extends PizzaStore 
{Pizza createPizza(String item) 
{if (item.equals("cheese")) 
{return new ChicagoStyleCheesePizza(); 
} 
else if (item.equals("veggie")) 
{return new ChicagoStyleVeggiePizza(); 
} 
else if (item.equals("clam")) 
{return new ChicagoStyleClamPizza(); 
} 
else if (item.equals("pepperoni")) 
{return new ChicagoStylePepperoniPizza(); 
} 
else return null; 
}} 
class ChicagoStyleCheesePizza extends Pizza 
{public ChicagoStyleCheesePizza() 
{ 
name = "Chicago Style Deep Dish Cheese Pizza"; 
dough = "Extra Thick Crust Dough"; 
sauce = "Plum Tomato Sauce"; 
toppings.add("Shredded Mozzarella Cheese"); 
}

void cut() 
{System.out.println("Cutting the pizza into square slices"); 
}} 
class ChicagoStyleClamPizza extends Pizza 
{public ChicagoStyleClamPizza() 
{ 
name = "Chicago Style Clam Pizza"; 
dough = "Extra Thick Crust Dough"; 
sauce = "Plum Tomato Sauce"; 
toppings.add("Shredded Mozzarella Cheese"); 
toppings.add("Frozen Clams from Chesapeake Bay"); 
} 
void cut() 
{System.out.println("Cutting the pizza into square slices"); 
}} 
class ChicagoStylePepperoniPizza extends Pizza 
{public ChicagoStylePepperoniPizza() 
{ 
name = "Chicago Style Pepperoni Pizza"; 
dough = "Extra Thick Crust Dough"; 
sauce = "Plum Tomato Sauce"; 
toppings.add("Shredded Mozzarella Cheese"); 
toppings.add("Black Olives"); 
toppings.add("Spinach"); 
toppings.add("Eggplant"); 
toppings.add("Sliced Pepperoni"); 
} 
void cut() 
{System.out.println("Cutting the pizza into square slices"); 
}} 
class ChicagoStyleVeggiePizza extends Pizza 
{public ChicagoStyleVeggiePizza() 
{name = "Chicago Deep Dish Veggie Pizza"; 
dough = "Extra Thick Crust Dough"; 
sauce = "Plum Tomato Sauce"; 
toppings.add("Shredded Mozzarella Cheese"); 
toppings.add("Black Olives"); 
toppings.add("Spinach"); 
toppings.add("Eggplant"); 
} 
void cut() 
{System.out.println("Cutting the pizza into square slices"); 
}} 
class DependentPizzaStore 
{public Pizza createPizza(String style, String type) 
{ Pizza pizza = null; 
if (style.equals("NY")) 
{if (type.equals("cheese")) 
{pizza = new NYStyleCheesePizza(); 
} 
else if (type.equals("veggie")) 
{pizza = new NYStyleVeggiePizza(); 
} 
else if (type.equals("clam")) 
{pizza = new NYStyleClamPizza(); 
} 
else if (type.equals("pepperoni")) 
{pizza = new NYStylePepperoniPizza(); 
}} 
else if (style.equals("Chicago")) 
{if (type.equals("cheese")) 
{pizza = new ChicagoStyleCheesePizza(); 
} 
else if (type.equals("veggie")) 
{pizza = new ChicagoStyleVeggiePizza(); 
} 
else if (type.equals("clam")) 
{pizza = new ChicagoStyleClamPizza(); 
} 
else if (type.equals("pepperoni")) 
{pizza = new ChicagoStylePepperoniPizza(); 
}} 
else 
{System.out.println("Error: invalid type of pizza"); 
return null; 
} 
pizza.prepare(); 
pizza.bake(); 
pizza.cut(); 
pizza.box(); 
return pizza; 
}} 
class NYPizzaStore extends PizzaStore 
{Pizza createPizza(String item) 
{if (item.equals("cheese")) 
{return new NYStyleCheesePizza(); 
} 
else if (item.equals("veggie")) 
{return new NYStyleVeggiePizza(); 
} 
else if (item.equals("clam")) 
{return new NYStyleClamPizza(); 
} 
else if (item.equals("pepperoni")) 
{return new NYStylePepperoniPizza(); 
} 
else return null; 
}} 
class NYStyleCheesePizza extends Pizza 
{public NYStyleCheesePizza() 
{ 
name = "NY Style Sauce and Cheese Pizza"; 
dough = "Thin Crust Dough"; 
sauce = "Marinara Sauce"; 
toppings.add("Grated Reggiano Cheese"); 
}} 
class NYStyleClamPizza extends Pizza 
{public NYStyleClamPizza() 
{ 
name = "NY Style Clam Pizza"; 
dough = "Thin Crust Dough"; 
sauce = "Marinara Sauce"; 
toppings.add("Grated Reggiano Cheese"); 
toppings.add("Fresh Clams from Long Island Sound"); 
}} 
class NYStylePepperoniPizza extends Pizza 
{public NYStylePepperoniPizza() 
{ 
name = "NY Style Pepperoni Pizza"; 
dough = "Thin Crust Dough"; 
sauce = "Marinara Sauce"; 
toppings.add("Grated Reggiano Cheese"); 
toppings.add("Sliced Pepperoni"); 
toppings.add("Garlic"); 
toppings.add("Onion"); 
toppings.add("Mushrooms"); 
toppings.add("Red Pepper"); 
}} 
class NYStyleVeggiePizza extends Pizza 
{public NYStyleVeggiePizza() 
{ 
name = "NY Style Veggie Pizza"; 
dough = "Thin Crust Dough"; 
sauce = "Marinara Sauce"; 
toppings.add("Grated Reggiano Cheese"); 
toppings.add("Garlic"); 
toppings.add("Onion"); 
toppings.add("Mushrooms"); 
toppings.add("Red Pepper"); 
}} 
abstract class Pizza 
{ 
String name; 
String dough; 
String sauce; 
ArrayList toppings = new ArrayList(); 
void prepare() 
{ 
System.out.println("Preparing " + name); 
System.out.println("Tossing dough..."); 
System.out.println("Adding sauce..."); 
System.out.println("Adding toppings: "); 
for (int i = 0; i < toppings.size(); i++) 
{System.out.println(" " + toppings.get(i)); 
}} 
void bake() 
{System.out.println("Bake for 25 minutes at 350"); 
} 
void cut() 
{System.out.println("Cutting the pizza into diagonal slices"); 
} 
void box() 
{System.out.println("Place pizza in official PizzaStore box"); 
} 
public String getName() 
{return name; 
} 
public String toString() 
{StringBuffer display = new StringBuffer(); 
display.append("---- " + name + " ----\n"); 
display.append(dough + "\n"); 
display.append(sauce + "\n"); 
for (int i = 0; i < toppings.size(); i++) 
{display.append((String )toppings.get(i) + "\n"); 
} 
return display.toString(); 
}} 
abstract class PizzaStore 
{abstract Pizza createPizza(String item); 
public Pizza orderPizza(String type) 
{Pizza pizza = createPizza(type); 
System.out.println("--- Making a " + pizza.getName() + " ---"); 
pizza.prepare(); 
pizza.bake(); 
pizza.cut(); 
pizza.box(); 
return pizza; 
}
}





public class slip4_19_30
{public static void main(String[] args) 
{ 
PizzaStore nyStore = new NYPizzaStore(); 
PizzaStore chicagoStore = new ChicagoPizzaStore(); 
Pizza pizza = nyStore.orderPizza("cheese"); 
System.out.println("Ethan ordered a " + pizza.getName() + "\n"); 
pizza = chicagoStore.orderPizza("cheese"); 
System.out.println("Joel ordered a " + pizza.getName() + "\n"); 
pizza = nyStore.orderPizza("clam"); 
System.out.println("Ethan ordered a " + pizza.getName() + "\n"); 
pizza = chicagoStore.orderPizza("clam"); 
System.out.println("Joel ordered a " + pizza.getName() + "\n"); 
pizza = nyStore.orderPizza("pepperoni"); 
System.out.println("Ethan ordered a " + pizza.getName() + "\n"); 
pizza = chicagoStore.orderPizza("pepperoni"); 
System.out.println("Joel ordered a " + pizza.getName() + "\n"); 
pizza = nyStore.orderPizza("veggie"); 
System.out.println("Ethan ordered a " + pizza.getName() + "\n"); 
pizza = chicagoStore.orderPizza("veggie"); 
System.out.println("Joel ordered a " + pizza.getName() + "\n"); 
}}

Q.2.	Write a python program to implement Naive Bayes.	[20 M]
***sir code***
#Naive Bayes
import pandas as pd

df=pd.read_csv("Titanic-Dataset.csv")
df.head(1)

df=df.drop(['PassengerId','Name','SibSp','Parch','Embarked','Cabin','Ticket'], axis='columns')
df.head()

from sklearn.preprocessing import LabelEncoder
label = LabelEncoder()
df['Gender'] = label.fit_transform(df['Gender'])
df.head()

input=df.drop(['Survived'],axis='columns')
input.head()

target=df['Survived']
target.head()

input.columns[input.isna().any()]
input

input.Age = input.Age.fillna(input.Age.mean())
input

from sklearn.model_selection import train_test_split
x_train,x_test,y_train,y_test = train_test_split(input,target,test_size=0.2)
len(y_test)

from sklearn.naive_bayes import GaussianNB
model = GaussianNB()
model.fit(x_train,y_train)

model.score(x_test,y_test)

x_test[:10]

y_test[:10]

model.predict(x_test[:10])

Q.3	Design a Django application that adds web pages with views and templates.	[20 M]

***sir code***
root folder is que2 in 2 folders
1) que2

urls.py

from django.contrib import admin
from django.urls import path,include

urlpatterns = [
    path('admin/', admin.site.urls),
    path('',include('myapp.urls')),
]





2) myapp (myapp is app folder)


apps.py
from django.apps import AppConfig


class MyappConfig(AppConfig):
    default_auto_field = 'django.db.models.BigAutoField'
    name = 'myapp'


urls.py

from django.contrib import admin
from django.urls import path
from . import views

urlpatterns = [
    path('',views.home,name='home'),
    path('about/',views.about,name='about'),
]


views.py
from django.shortcuts import render

def home(request):
    return render(request, "myapp/home.html")

def about(request):
    return render(request, "myapp/about.html")


1) template (this folder present in myapp folder)
1)myapp this folder in template folder
home.html
<!DOCTYPE html>
<html>
    <head>
        <title>
            Home Page
        </title>
    </head>
    <body>
        <h1>
            Welcome to the Home Page
        </h1>
    </body>
</html>

about.html
<!DOCTYPE html>
<html>
    <head>
        <title>
            about Page
        </title>
    </head>
    <body>
        <h1>
            About us
        </h1>
        <p>
            this is the about page
        </p>
    </body>
</html>



***my code***
root folder is assi2 in 2 folders
1) assi2

urls.py

from django.contrib import admin
from django.urls import path
from my_app.views import index
from my_app.views import f1
from my_app.views import f2
from my_app.views import f3

urlpatterns = [
    path('admin/', admin.site.urls),
    path('', index, name='index'),
	path('first/',f1),
	path('second/',f2),
	path('third/',f3),
]



2) my_app (my_app is app folder) in my_app folder present templates folder


apps.py
from django.apps import AppConfig


class MyAppConfig(AppConfig):
    default_auto_field = 'django.db.models.BigAutoField'
    name = 'my_app'



views.py

from django.contrib import admin
from django.urls import path
from my_app.views import index
from my_app.views import f1
from my_app.views import f2
from my_app.views import f3

urlpatterns = [
    path('admin/', admin.site.urls),
    path('', index, name='index'),
	path('first/',f1),
	path('second/',f2),
	path('third/',f3),
]

 
 1)template ( in my_app folder present templates folder)

 index.html
 <!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>assi2</title>
</head>
<body>
    <h1>
        Design a Django application that adds web pages with views and templates.
    </h1>
    <a href="/first">first page</a>
    <br>
    <br>
    <a href="/second">Second pages</a>
    <br>
    <br>
    <a href="/third">Third page</a>
</body>
</html>

a.html
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>First pages</title>
</head>
<body>
    <h1>first page</h1>
</body>
</html>

b.html
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>second pages</title>
</head>
<body>
    <h1>first page</h1>
</body>
</html>

c.html
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Third pages</title>
</head>
<body>
    <h1>first page</h1>
</body>
</html>

 
slip 20


Q.1	Write a Java Program to implement I/O Decorator for converting uppercase letters to lower case letters.	[20 M]

import java.io.*;
import java.util.*;

class LowerCaseInputStream extends FilterInputStream
{
        public LowerCaseInputStream(InputStream in)
        {
                super(in);
        }
        public int read() throws IOException
        {
                int c=super.read();
                return (c==-1?c:Character.toLowerCase((char)c));
        }
        public int read(byte[] b,int offset,int len) throws IOException
        {
                int result =super.read(b,offset,len);
                for (int i=offset;i<offset+result;i++)
                {
                        b[i]=(byte)Character.toLowerCase((char)b[i]);
                }
                return result;
        }
}
public class slip1_20
{
        public static void main(String[] args) throws IOException
        {
        int c;
        try
        {

InputStream in =new LowerCaseInputStream(new BufferedInputStream(new 	    	        FileInputStream("a.txt")));
                while((c = in.read()) >= 0)
                {
                        System.out.print((char)c);
                       
                }
                System.out.println();
                in.close();
        }
        catch(IOException e)
        {
                e.printStackTrace();
        }
     }
}

Q.2.	Write a python program to implement Decision Tree whether or not to play Tennis.
[20 M]

***sir code***
import pandas as pd
from sklearn.tree import DecisionTreeClassifier
from sklearn.preprocessing import LabelEncoder

data = pd.read_csv("play_tennis.csv")
data.sample(5)

label_encoder = LabelEncoder()
data['outlook'] = label_encoder.fit_transform(data['outlook'])
data['temp'] = label_encoder.fit_transform(data['temp'])
data['humidity'] = label_encoder.fit_transform(data['humidity'])
data['wind'] = label_encoder.fit_transform(data['wind'])
data['play'] = label_encoder.fit_transform(data['play'])

data
x = data[['outlook', 'temp', 'humidity', 'wind']]
y = data['play']

clf = DecisionTreeClassifier()

clf.fit(x, y)

new_day = [1, 2, 0, 1] 
prediction = clf.predict([new_day])
prediction

predicted_play = label_encoder.inverse_transform(prediction)

print("Prediction:", predicted_play[0])

*** my code***
# Load libraries
import numpy as np
import pandas as pd
from sklearn import metrics #Import scikit-learn metrics module for accuracy calculation

df=pd.read_csv("Play Tennis.csv")
value=['Outlook','Temprature','Humidity','Wind']
df

len(df)           #Dataset Lenght

df.shape  #To see the number of rows and columns in our dataset:

df.head()         #To inspect the first five records of the dataset:

df.tail()         #To inspect the last five records of the dataset:

df.describe()     #To see statistical details of the dataset:

#machine learning algorithms can only learn from numbers (int, float, doubles .. )
#so let us encode it to int
from sklearn import preprocessing
string_to_int= preprocessing.LabelEncoder()                     #encode your data
df=df.apply(string_to_int.fit_transform) #fit and transform it
df

#To divide our data into attribute set and Label:
feature_cols = ['Outlook','Temprature','Humidity','Wind']
X = df[feature_cols ]                               #contains the attribute 
y = df.Play_Tennis                                  #contains the label
#To divide our data into training and test sets:
from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.30) 

# perform training 
from sklearn.tree import DecisionTreeClassifier                             # import the classifier
classifier =DecisionTreeClassifier(criterion="entropy", random_state=100)     # create a classifier object
classifier.fit(X_train, y_train)                                              # fit the classifier with X and Y data or 
DecisionTreeClassifier(class_weight=None, criterion='entropy', max_depth=None,
            max_features=None, max_leaf_nodes=None,
            min_impurity_decrease=0.0, min_impurity_split=None,
            min_samples_leaf=1, min_samples_split=2,
            min_weight_fraction_leaf=0.0, presort=False, random_state=100,
            splitter='best')
#Predict the response for test dataset
y_pred= classifier.predict(X_test)  
# Model Accuracy, how often is the classifier correct?
from sklearn.metrics import accuracy_score
print("Accuracy:",metrics.accuracy_score(y_test, y_pred))
Accuracy: 0.4
Now let's compare some of our predicted values with the actual values and see how accurate we were:
data_p=pd.DataFrame({'Actual':y_test, 'Predicted':y_pred})  
data_p

from sklearn.metrics import classification_report, confusion_matrix  
print(confusion_matrix(y_test, y_pred))  
print(classification_report(y_test, y_pred)) 

from sklearn.tree import export_graphviz
from sklearn.externals.six import StringIO
from IPython.display import Image
import pydotplus
dot_data = StringIO()
export_graphviz(classifier, out_file=dot_data,
filled=True, rounded=True,
special_characters=True,feature_names =value,class_names=['0','1'])
graph = pydotplus.graph_from_dot_data(dot_data.getvalue())
graph.write_png('Play Tennis.png')
Image(graph.create_png())


Q.3	Develop a basic poll application (app).It should consist of two parts:

a)	A public site in which user can pick their favourite programming language and vote.

b)	An admin site that lets you add, change and delete programming languages.[20 M]

***sir code***

python manage.py migration
python manage.py migrate
python manage.py createsuperuser
python manage.py runserver


root folder is que4 in 2 folders
1) que4

urls.py
from django.contrib import admin
from django.urls import path , include

urlpatterns = [
    path('admin/', admin.site.urls),
    path('', include('myapp.urls')),
]





2) myapp (myapp is app folder) two folder

admin.py
from django.contrib import admin

from .models import ProgrammingLanguage, Vote

admin.site.register(ProgrammingLanguage)
admin.site.register(Vote)

forms.py
from django import forms
from .models import ProgrammingLanguage

class VoteForm(forms.ModelForm):
    class Meta:
        model = ProgrammingLanguage
        fields = ['name']
        labels = {
            'name': 'Number',  # Change the label for the 'name' field to 'Number'
        }
models.py
from django.db import models

class ProgrammingLanguage(models.Model):
    name = models.CharField(max_length=100)

class Vote(models.Model):
    language = models.ForeignKey(ProgrammingLanguage, on_delete=models.CASCADE)



apps.py
from django.apps import AppConfig

class MyappConfig(AppConfig):
    default_auto_field = 'django.db.models.BigAutoField'
    name = 'myapp'


urls.py
from django.urls import path
from . import views

urlpatterns = [
    path('vote/', views.vote, name='vote'),
    path('results/', views.results, name='results'),
]



views.py

from django.shortcuts import render, redirect
from .models import ProgrammingLanguage, Vote
from .forms import VoteForm

def vote(request):
    if request.method == 'POST':
        form = VoteForm(request.POST)
        if form.is_valid():
            language_id = form.cleaned_data['name']
            programming_language = ProgrammingLanguage.objects.get(pk=language_id)
            Vote.objects.create(language=programming_language)
            return redirect('results')
    else:
        form = VoteForm()

    return render(request, 'myapp/vote.html', {'form': form})

def results(request):
    languages = ProgrammingLanguage.objects.all()
    return render(request, 'myapp/results.html', {'languages': languages})



1)migration is present in myapp

0001_initial.py
# Generated by Django 4.1.5 on 2023-10-27 18:07

from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='ProgrammingLanguage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
            ],
        ),
        migrations.CreateModel(
            name='Vote',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('language', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='myapp.programminglanguage')),
            ],
        ),
    ]

2) template (this folder present in myapp folder)
1)myapp this folder in template folder

results.html

<!DOCTYPE html>
<html>
<head>
    <title>Poll Results</title>
</head>
<body>
    <h1>Poll Results</h1>
    <ul>
        {% for language in languages %}
            <li>{{ language.name }} - Votes: {{ language.vote_set.count }}</li>
        {% endfor %}
    </ul>
    <a href="{% url 'vote' %}">Back to Voting</a>
</body>
</html>

vote.html

<!DOCTYPE html>
<html>
<head>
    <title>Vote for Your Favorite Programming Language</title>
</head>
<body>
    <h1>Vote for Your Favorite Programming Language</h1>
    <h2>1. Python </h2>
    <h2>2. C++ </h2>
    <h2>3. Java </h2>
    <form method="post">
        {% csrf_token %}
        {{ form.as_p }}
        <input type="submit" value="Vote">
    </form>
</body>
</html>



slip 21


Q.1	Write a Java Program to implement command pattern to test Remote Control
[20 M]
// Command interface
interface Command {
    void execute();
}

// Concrete Command
class LightOnCommand implements Command {
    private Light light;

    public LightOnCommand(Light light) {
        this.light = light;
    }

    public void execute() {
        light.turnOn();
    }
}

// Receiver
class Light {
    public void turnOn() {
        System.out.println("Light is ON");
    }

    public void turnOff() {
        System.out.println("Light is OFF");
    }
}

// Concrete Command
class TVOnCommand implements Command {
    private TV tv;

    public TVOnCommand(TV tv) {
        this.tv = tv;
    }

    public void execute() {
        tv.turnOn();
    }
}

// Receiver
class TV {
    public void turnOn() {
        System.out.println("TV is ON");
    }

    public void turnOff() {
        System.out.println("TV is OFF");
    }
}

// Remote Control
class RemoteControl {
    private Command command;

    public void setCommand(Command command) {
        this.command = command;
    }

    public void pressButton() {
        command.execute();
    }
}

public class slip6_21 {
    public static void main(String[] args) {
        // Create the receivers
        Light livingRoomLight = new Light();
        TV livingRoomTV = new TV();

        // Create the concrete commands
        Command lightOnCommand = new LightOnCommand(livingRoomLight);
        Command tvOnCommand = new TVOnCommand(livingRoomTV);

        // Create the remote control
        RemoteControl remote = new RemoteControl();

        // Set the commands for the remote control
        remote.setCommand(lightOnCommand);
        remote.pressButton(); // Turns on the light

        remote.setCommand(tvOnCommand);
        remote.pressButton(); // Turns on the TV
    }
}



Q.2.	Write a python program to implement Linear SVM.	[20 M]
import pandas as pd

df = pd.read_csv('data.csv')
df.sample(5)

from sklearn.preprocessing import LabelEncoder
label = LabelEncoder()
df['Species_num'] = label.fit_transform(df['Species'])
df.sample(5)

df0=df[df.Species_num==0]
df1=df[df.Species_num==1]
df2=df[df.Species_num==2]

from matplotlib import pyplot as plt
plt.scatter(df0['SepalLengthCm'],df0['SepalWidthCm'],color='green',marker='+')
plt.scatter(df1['SepalLengthCm'],df1['SepalWidthCm'],color='red',marker='+')

input = df.drop(['Species','Species_num'],axis='columns')
input.sample(5)

target = df['Species_num']
target.sample(5)

from sklearn.model_selection import train_test_split
x_train,x_test,y_train,y_test = train_test_split(input,target,test_size=0.2)
len(y_test)

from sklearn.svm import SVC
model = SVC(kernel='linear')
model.fit(x_train,y_train)

model.score(x_test,y_test)

x_test[:10]

y_test[:10]

model.predict(x_test[:10])

***my code***

import pandas as pd
import numpy as np
from sklearn import svm
from sklearn import svm, datasets
import matplotlib.pyplot as plt

df = datasets.load_iris()
df


# df = pd.read_csv('iris.csv')
# df

X = df.data[:, :2]
y = df.target

x_min, x_max = X[:, 0].min() - 1, X[:, 0].max() + 1
y_min, y_max = X[:, 1].min() - 1, X[:, 1].max() + 1
h = (x_max / x_min)/100
xx, yy = np.meshgrid(np.arange(x_min, x_max, h), np.arange(y_min, y_max, h))
X_plot = np.c_[xx.ravel(), yy.ravel()]
C = 1.0

Svc_classifier = svm.SVC(kernel='linear', C=C).fit(X, y)
Z = Svc_classifier.predict(X_plot)
Z = Z.reshape(xx.shape)
plt.figure(figsize=(15, 5))
plt.subplot(121)
plt.contourf(xx, yy, Z, cmap=plt.cm.tab10, alpha=0.3)
plt.scatter(X[:, 0], X[:, 1], c=y, cmap=plt.cm.Set1)
plt.xlabel('Sepal length')
plt.ylabel('Sepal width')
plt.xlim(xx.min(), xx.max())
plt.title('Support Vector Classifier with linear kernel')


Svc_classifier = svm.SVC(kernel = 'rbf', gamma ='auto',C = C).fit(X, y)
Z = Svc_classifier.predict(X_plot)
Z = Z.reshape(xx.shape)
plt.figure(figsize=(15, 5))
plt.subplot(121)
plt.contourf(xx, yy, Z, cmap = plt.cm.tab10, alpha = 0.3)
plt.scatter(X[:, 0], X[:, 1], c = y, cmap = plt.cm.Set1)
plt.xlabel('Sepal length')
plt.ylabel('Sepal width')
plt.xlim(xx.min(), xx.max())
plt.title('Support Vector Classifier with rbf kernel')


Q.3		Design a Django application: A public site in which user can pick their favourite programming language and vote.	[20 M]



***sir code***


python manage.py migration
python manage.py migrate
python manage.py createsuperuser
python manage.py runserver

root folder is que4 in 2 folders
1) que4

urls.py
from django.contrib import admin
from django.urls import path , include

urlpatterns = [
    path('admin/', admin.site.urls),
    path('', include('myapp.urls')),
]





2) myapp (myapp is app folder) two folder

admin.py
from django.contrib import admin

from .models import ProgrammingLanguage, Vote

admin.site.register(ProgrammingLanguage)
admin.site.register(Vote)

forms.py
from django import forms
from .models import ProgrammingLanguage

class VoteForm(forms.ModelForm):
    class Meta:
        model = ProgrammingLanguage
        fields = ['name']
        labels = {
            'name': 'Number',  # Change the label for the 'name' field to 'Number'
        }
models.py
from django.db import models

class ProgrammingLanguage(models.Model):
    name = models.CharField(max_length=100)

class Vote(models.Model):
    language = models.ForeignKey(ProgrammingLanguage, on_delete=models.CASCADE)



apps.py
from django.apps import AppConfig

class MyappConfig(AppConfig):
    default_auto_field = 'django.db.models.BigAutoField'
    name = 'myapp'


urls.py
from django.urls import path
from . import views

urlpatterns = [
    path('vote/', views.vote, name='vote'),
    path('results/', views.results, name='results'),
]



views.py

from django.shortcuts import render, redirect
from .models import ProgrammingLanguage, Vote
from .forms import VoteForm

def vote(request):
    if request.method == 'POST':
        form = VoteForm(request.POST)
        if form.is_valid():
            language_id = form.cleaned_data['name']
            programming_language = ProgrammingLanguage.objects.get(pk=language_id)
            Vote.objects.create(language=programming_language)
            return redirect('results')
    else:
        form = VoteForm()

    return render(request, 'myapp/vote.html', {'form': form})

def results(request):
    languages = ProgrammingLanguage.objects.all()
    return render(request, 'myapp/results.html', {'languages': languages})



1)migration is present in myapp

0001_initial.py
# Generated by Django 4.1.5 on 2023-10-27 18:07

from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='ProgrammingLanguage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
            ],
        ),
        migrations.CreateModel(
            name='Vote',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('language', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='myapp.programminglanguage')),
            ],
        ),
    ]

2) template (this folder present in myapp folder)
1)myapp this folder in template folder

results.html

<!DOCTYPE html>
<html>
<head>
    <title>Poll Results</title>
</head>
<body>
    <h1>Poll Results</h1>
    <ul>
        {% for language in languages %}
            <li>{{ language.name }} - Votes: {{ language.vote_set.count }}</li>
        {% endfor %}
    </ul>
    <a href="{% url 'vote' %}">Back to Voting</a>
</body>
</html>

vote.html

<!DOCTYPE html>
<html>
<head>
    <title>Vote for Your Favorite Programming Language</title>
</head>
<body>
    <h1>Vote for Your Favorite Programming Language</h1>
    <h2>1. Python </h2>
    <h2>2. C++ </h2>
    <h2>3. Java </h2>
    <form method="post">
        {% csrf_token %}
        {{ form.as_p }}
        <input type="submit" value="Vote">
    </form>
</body>
</html>


slip 22


Q.1	Design simple HR Application using Spring Framework	[20 M]
package hrapplication.controller;

import java.util.List;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import hrapplication.model.HrApplicationBean;
import hrapplication.model.LoginBean;
import hrapplication.service.HrApplicationService;
import hrapplication.service.LoginService;


@Controller
@RequestMapping("/hrApplications")
public class HrApplicationController {

	@Autowired
	private HrApplicationService hrApplicationService;
	

	@RequestMapping("/secure")
	public String defaultPage(Model model) {
		List<HrApplicationBean> hrApplications = hrApplicationService.getAllHrApplication();
		model.addAttribute("hrApplications", hrApplications);
		return "hrApplicationSecure";
	}
	
	@RequestMapping("/all")
	public String allHrApplications(Model model) {
			
		List<HrApplicationBean> hrApplications = hrApplicationService.getAllHrApplication();
		model.addAttribute("hrApplications", hrApplications);
		return "hrApplicationList";
	}

	@RequestMapping("/hrApplication")
	public String getHrApplicationById(@RequestParam(name = "hrApplicationId") int hrApplicationId, Model model) {
		HrApplicationBean hrApplication = hrApplicationService.getHrApplicationById(hrApplicationId);
		model.addAttribute("hrApplication", hrApplication);
		return "hrApplicationDetail";
	}
	
	@RequestMapping(value = "/add", method = RequestMethod.GET)
	public String addHrApplication(@ModelAttribute("newHrApplication") HrApplicationBean hrApplicationBean,BindingResult bindingResult) {
	
		return "hrApplicationAdd";
	}
	
	@RequestMapping("/deleteHrApplication{hrApplicationId}")
	public String deleteHrApplication(@RequestParam("hrApplicationId") int hrApplicationId, Model model) {
		hrApplicationService.deleteHrApplication(hrApplicationId);
		return "hrApplicationList";
	}
		
	
	@RequestMapping(value = "/save", method = RequestMethod.POST)
	public String saveHrApplication(@ModelAttribute("newHrApplication") HrApplicationBean hrApplicationBean,BindingResult bindingResult) {
	
		hrApplicationService.addHrApplication(hrApplicationBean);
		return "hrApplicationList";
	}
	
}

****appp***
package hrapplication.controller;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.SessionAttribute;
import org.springframework.web.servlet.ModelAndView;
import hrapplication.model.ApplicantBean;
import hrapplication.model.HrApplicationBean;
import hrapplication.service.ApplicantService;
import hrapplication.service.HrApplicationService;

@Controller
@RequestMapping("/applicants")
public class ApplicantController {

	@Autowired
	private ApplicantService applicantService;
	
	@Autowired
	private HrApplicationService hrApplicationService;
	
	@RequestMapping(method = RequestMethod.GET)
	public ModelAndView addApplicant(@ModelAttribute("newApplicant") ApplicantBean applicantBean,BindingResult bindingResult) {
		Map<String, Object> model = new HashMap<String,Object>();
		model.put("hrApplications",  hrApplicationService.getAllHrApplication());
		return new ModelAndView("applicantAdd",model);
	}
    
	@RequestMapping(value = "/save", method = RequestMethod.POST)
	public String saveApplicant(@ModelAttribute("newApplicant") ApplicantBean applicantBean,BindingResult bindingResult, HrApplicationBean hrApplicationBean){

		applicantService.save(applicantBean);
		applicantService.update(applicantBean,hrApplicationService.getAllHrApplicationId(hrApplicationBean));
		
		return "redirect:/hrApplications";
	}
	
	
	


}


***app***
package hrapplication.controller;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.servlet.ModelAndView;

import hrapplication.model.LoginBean;
import hrapplication.service.LoginService;

@Controller
public class LoginController {

	@Autowired
	private LoginService loginService;
	
	@RequestMapping(method = RequestMethod.GET)
	public String defaultPage(LoginBean loginBean,BindingResult bindingResult) {
		//start project
			return "index";
	}
	
	@RequestMapping(value="/login",method = RequestMethod.GET)
	public String addLogin(LoginBean loginBean,BindingResult bindingResult) {
		loginService.addLogin(loginBean);
		return "login";
	}
	
	 @RequestMapping("/login")  
	   public ModelAndView login(HttpServletRequest request,HttpServletResponse response,LoginBean loginBean,BindingResult bindingResult) {
		  loginService.addLogin(loginBean);
		  String loginEmail=request.getParameter("loginEmail");  
		  String loginPassword=request.getParameter("loginPassword");
	      String message;
	      if(loginEmail != null && 
	    		  !loginEmail.equals("") 
	    		  && loginEmail.equals(loginBean.getLoginEmail()) && 
	    		  loginPassword != null && 
	    		  !loginPassword.equals("") && 
	    		  loginPassword.equals(loginBean.getLoginPassword())){
	    	  message = "Welcome " +loginEmail + ".";
		      return new ModelAndView("hrApplicationList");  
	 
	      }else{
	    	  message = "Wrong email or password.";
	    	  return new ModelAndView("login", 
	    			  "message", message);
	      }
	   }
	
	
}


Q.2	Write a Python program to prepare Scatter Plot for Iris Dataset	[20 M]

import pandas as pd
import matplotlib.pyplot as plt

iris_data = pd.read_csv("iris2.csv")
iris_data

versicolor = iris_data[iris_data.variety == "Versicolor"]
setosa = iris_data[iris_data.variety =="Setosa"]
virginica = iris_data[iris_data.variety == "Virginica"]

fig, ax = plt.subplots()
fig.set_size_inches(8, 8)

points = ax.scatter(versicolor["petal.length"], versicolor["petal.width"], label="Versicolor")

points.set_facecolor("green")

ax.scatter(setosa["petal.length"], setosa["petal.width"], label="Setosa", marker="x", facecolor="blue")
ax.scatter(virginica["petal.length"], virginica["petal.width"], label="Virginica", marker="s", facecolor="red")

ax.set_xlabel("Petal Length (cm)")
ax.set_ylabel("Petal Width (cm)")
ax.set_title("Iris Petal Sizes")
ax.legend()



Q.3	Design a Django application: An admin site that lets you add, change and delete programming languages.	[20 M



***sir code***


python manage.py migration
python manage.py migrate
python manage.py createsuperuser
python manage.py runserver

root folder is que4 in 2 folders
1) que4

urls.py
from django.contrib import admin
from django.urls import path , include

urlpatterns = [
    path('admin/', admin.site.urls),
    path('', include('myapp.urls')),
]





2) myapp (myapp is app folder) two folder

admin.py
from django.contrib import admin

from .models import ProgrammingLanguage, Vote

admin.site.register(ProgrammingLanguage)
admin.site.register(Vote)

forms.py
from django import forms
from .models import ProgrammingLanguage

class VoteForm(forms.ModelForm):
    class Meta:
        model = ProgrammingLanguage
        fields = ['name']
        labels = {
            'name': 'Number',  # Change the label for the 'name' field to 'Number'
        }
models.py
from django.db import models

class ProgrammingLanguage(models.Model):
    name = models.CharField(max_length=100)

class Vote(models.Model):
    language = models.ForeignKey(ProgrammingLanguage, on_delete=models.CASCADE)



apps.py
from django.apps import AppConfig

class MyappConfig(AppConfig):
    default_auto_field = 'django.db.models.BigAutoField'
    name = 'myapp'


urls.py
from django.urls import path
from . import views

urlpatterns = [
    path('vote/', views.vote, name='vote'),
    path('results/', views.results, name='results'),
]



views.py

from django.shortcuts import render, redirect
from .models import ProgrammingLanguage, Vote
from .forms import VoteForm

def vote(request):
    if request.method == 'POST':
        form = VoteForm(request.POST)
        if form.is_valid():
            language_id = form.cleaned_data['name']
            programming_language = ProgrammingLanguage.objects.get(pk=language_id)
            Vote.objects.create(language=programming_language)
            return redirect('results')
    else:
        form = VoteForm()

    return render(request, 'myapp/vote.html', {'form': form})

def results(request):
    languages = ProgrammingLanguage.objects.all()
    return render(request, 'myapp/results.html', {'languages': languages})



1)migration is present in myapp

0001_initial.py
# Generated by Django 4.1.5 on 2023-10-27 18:07

from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='ProgrammingLanguage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
            ],
        ),
        migrations.CreateModel(
            name='Vote',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('language', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='myapp.programminglanguage')),
            ],
        ),
    ]

2) template (this folder present in myapp folder)
1)myapp this folder in template folder

results.html

<!DOCTYPE html>
<html>
<head>
    <title>Poll Results</title>
</head>
<body>
    <h1>Poll Results</h1>
    <ul>
        {% for language in languages %}
            <li>{{ language.name }} - Votes: {{ language.vote_set.count }}</li>
        {% endfor %}
    </ul>
    <a href="{% url 'vote' %}">Back to Voting</a>
</body>
</html>

vote.html

<!DOCTYPE html>
<html>
<head>
    <title>Vote for Your Favorite Programming Language</title>
</head>
<body>
    <h1>Vote for Your Favorite Programming Language</h1>
    <h2>1. Python </h2>
    <h2>2. C++ </h2>
    <h2>3. Java </h2>
    <form method="post">
        {% csrf_token %}
        {{ form.as_p }}
        <input type="submit" value="Vote">
    </form>
</body>
</html>

slip 23


Q. 1	Write a Java Program to implement State Pattern for Gumball Machine. Create instance variable that holds current state from there, we just need to handle all actions, behaviors and state transition that can happen	[20 M]

 interface State {

	public void insertQuarter();
	public void ejectQuarter();
	public void turnCrank();
	public void dispense();
	
	public void refill();
}
 class SoldState implements State {

    GumballMachine gumballMachine;

    public SoldState(GumballMachine gumballMachine) {
        this.gumballMachine = gumballMachine;
    }

	public void insertQuarter() {
		System.out.println("Please wait, we're already giving you a gumball");
	}

	public void ejectQuarter() {
		System.out.println("Sorry, you already turned the crank");
	}

	public void turnCrank() {
		System.out.println("Turning twice doesn't get you another gumball!");
	}

	public void dispense() {
		gumballMachine.releaseBall();
		if (gumballMachine.getCount() > 0) {
			gumballMachine.setState(gumballMachine.getNoQuarterState());
		} else {
			System.out.println("Oops, out of gumballs!");
			gumballMachine.setState(gumballMachine.getSoldOutState());
		}
	}

	public void refill() { }

	public String toString() {
		return "dispensing a gumball";
	}
}

 class SoldOutState implements State {
    GumballMachine gumballMachine;

    public SoldOutState(GumballMachine gumballMachine) {
        this.gumballMachine = gumballMachine;
    }

	public void insertQuarter() {
		System.out.println("You can't insert a quarter, the machine is sold out");
	}

	public void ejectQuarter() {
		System.out.println("You can't eject, you haven't inserted a quarter yet");
	}

	public void turnCrank() {
		System.out.println("You turned, but there are no gumballs");
	}

	public void dispense() {
		System.out.println("No gumball dispensed");
	}
	
	public void refill() { 
		gumballMachine.setState(gumballMachine.getNoQuarterState());
	}

	public String toString() {
		return "sold out";
	}
}

 class NoQuarterState implements State {
    GumballMachine gumballMachine;

    public NoQuarterState(GumballMachine gumballMachine) {
        this.gumballMachine = gumballMachine;
    }

	public void insertQuarter() {
		System.out.println("You inserted a quarter");
		gumballMachine.setState(gumballMachine.getHasQuarterState());
	}

	public void ejectQuarter() {
		System.out.println("You haven't inserted a quarter");
	}

	public void turnCrank() {
		System.out.println("You turned, but there's no quarter");
	 }

	public void dispense() {
		System.out.println("You need to pay first");
	} 
	
	public void refill() { }

	public String toString() {
		return "waiting for quarter";
	}
}

class HasQuarterState implements State {
	GumballMachine gumballMachine;

	public HasQuarterState(GumballMachine gumballMachine) {
		this.gumballMachine = gumballMachine;
	}

	public void insertQuarter() {
		System.out.println("You can't insert another quarter");
	}

	public void ejectQuarter() {
		System.out.println("Quarter returned");
		gumballMachine.setState(gumballMachine.getNoQuarterState());
	}

	public void turnCrank() {
		System.out.println("You turned...");
		gumballMachine.setState(gumballMachine.getSoldState());
	}

    public void dispense() {
        System.out.println("No gumball dispensed");
    }

    public void refill() { }

	public String toString() {
		return "waiting for turn of crank";
	}

}

class GumballMachine {

	State soldOutState;
	State noQuarterState;
	State hasQuarterState;
	State soldState;

	State state;
	int count = 0;

	public GumballMachine(int numberGumballs) {
		soldOutState = new SoldOutState(this);
		noQuarterState = new NoQuarterState(this);
		hasQuarterState = new HasQuarterState(this);
		soldState = new SoldState(this);

		this.count = numberGumballs;
		if (numberGumballs > 0) {
			state = noQuarterState;
		} else {
			state = soldOutState;
		}
	}

	public void insertQuarter() {
		state.insertQuarter();
	}

	public void ejectQuarter() {
		state.ejectQuarter();
	}

	public void turnCrank() {
		state.turnCrank();
		state.dispense();
	}

	void releaseBall() {
		System.out.println("A gumball comes rolling out the slot...");
		if (count != 0) {
			count = count - 1;
		}
	}

	int getCount() {
		return count;
	}

	void refill(int count) {
		this.count += count;
		System.out.println("The gumball machine was just refilled; it's new count is: " + this.count);
		state.refill();
	}

	void setState(State state) {
		this.state = state;
	}
    public State getState() {
        return state;
    }

    public State getSoldOutState() {
        return soldOutState;
    }

    public State getNoQuarterState() {
        return noQuarterState;
    }

    public State getHasQuarterState() {
        return hasQuarterState;
    }

    public State getSoldState() {
        return soldState;
    }

	public String toString() {
		StringBuffer result = new StringBuffer();
		result.append("\nMighty Gumball, Inc.");
		result.append("\nJava-enabled Standing Gumball Model #2004");
		result.append("\nInventory: " + count + " gumball");
		if (count != 1) {
			result.append("s");
		}
		result.append("\n");
		result.append("Machine is " + state + "\n");
		return result.toString();
	}
}

class slip8{

	public static void main(String[] args) {
		GumballMachine gumballMachine = new GumballMachine(2);

		System.out.println(gumballMachine);

		gumballMachine.insertQuarter();
		gumballMachine.turnCrank();

		System.out.println(gumballMachine);

		gumballMachine.insertQuarter();
		gumballMachine.turnCrank();
		gumballMachine.insertQuarter();
		gumballMachine.turnCrank();
		
		gumballMachine.refill(3);
		gumballMachine.insertQuarter();
		gumballMachine.turnCrank();

		System.out.println(gumballMachine);
	}
}

Q.2.	Write a python program to find all null values in a given dataset and remove them.[20 M]
mycode

import pandas as pd

df = pd.read_csv('iris3.csv')
df

newdf = df.dropna()

print(newdf.to_string())

****sir code***
import pandas as pd
df = pd.read_csv("forestfires.csv")
df

null = df.isnull()
null

df = df.dropna()
df
df.to_csv('cleaned_dataset.csv', index=False)

Q.3	Create your own blog using Django.	[20 M]


***my code***

root folder is assi1 in 2 folders
1) assi1

urls.py

from django.contrib import admin
from django.urls import path
from my_app.views import index


urlpatterns = [
    path('', index, name='index'),

]




2) my_app (my_app is app folder) in my_app folder present templates folder


apps.py
from django.apps import AppConfig


class MyAppConfig(AppConfig):
    default_auto_field = 'django.db.models.BigAutoField'
    name = 'my_app'





views.py
from django.shortcuts import render

# Create your views here.
def index(request):
    return render(request, 'index.html')
 
 1)template ( in my_app folder present templates folder)

 index.html
<!DOCTYPE html>
<html>
<head>
</head>
<body>

<div class="header">
  <h2>Welcome to my Blog</h2>
</div>

<div class="row">
  <div class="leftcolumn">
    <div class="card">
      <h2>Django</h2>
      <h5>MSc. Computer Science Part 2</h5>
    </div>
  </div>
  <div class="rightcolumn">
    <div class="card">
      <h2>Subjects :</h3>
      <h4>SADP</h6>
      <h4>Web Frameworks</h6>
      <h4>Machine Learning</h6>
      </div>
  </div>
</div>
</body>
</html>


slip 24

Q.1	Write a Java Program to implement Iterator Pattern for Designing Menu like Breakfast, Lunch or Dinner Menu	[20 M]

import java.util.*;
import java.util.Iterator;
import java.util.ArrayList;


 interface Menu 
{
public Iterator<MenuItem> createIterator();
}


class CafeMenu implements Menu 
{
HashMap<String, MenuItem> menuItems = new HashMap<String, MenuItem>();
public CafeMenu() 
{
addItem("Veggie Burger and French Fries","Veggie burger on a whole wheat bun, lettuce, tomato, and fries",true, 40);
addItem("Soup of the day","A cup of the soup of the day, with a side salad",false, 70);
addItem("Burrito","A large burrito, with whole pinto beans, salsa, guacamole",true, 80);
}
public void addItem(String name, String description,boolean vegetarian, double price) 
{
MenuItem menuItem = new MenuItem(name, description, vegetarian, price);
menuItems.put(name, menuItem);
}
public Map<String, MenuItem> getItems()
{
return menuItems;
}
public Iterator<MenuItem> createIterator() 
{
return menuItems.values().iterator();
}
}




 class DinerMenu implements Menu 
{
static final int MAX_ITEMS = 6;
int numberOfItems = 0;
MenuItem[] menuItems;

public DinerMenu() 
{
menuItems = new MenuItem[MAX_ITEMS];
addItem("Vegetarian BLT","(Fakin') Bacon with lettuce & tomato on whole wheat", true, 80);
addItem("BLT","Bacon with lettuce & tomato on whole wheat", false, 90);
addItem("Soup of the day","Soup of the day, with a side of potato salad", false, 70);
addItem("Hotdog","A hot dog, with sauerkraut, relish, onions, topped with cheese",false, 60);
addItem("Steamed Veggies and Brown Rice","A medly of steamed vegetables over brown rice", true, 99);
addItem("Pasta","Spaghetti with Marinara Sauce, and a slice of sourdough bread",true, 89);
}
public void addItem(String name, String description,boolean vegetarian, double price) 
{
MenuItem menuItem = new MenuItem(name, description, vegetarian, price);
if (numberOfItems >= MAX_ITEMS) 
{
System.err.println("Sorry, menu is full!  Can't add item to menu");		
} 
else 
{
menuItems[numberOfItems] = menuItem;
numberOfItems = numberOfItems + 1;
}
}
public MenuItem[] getMenuItems() 
{
return menuItems;
}
public Iterator<MenuItem> createIterator() 
{
return new DinerMenuIterator(menuItems);
//return new AlternatingDinerMenuIterator(menuItems);
}
// other menu methods here
}



 class DinerMenuIterator implements Iterator<MenuItem> {
	MenuItem[] list;
	int position = 0;

	public DinerMenuIterator(MenuItem[] list) {
		this.list = list;
	}

	public MenuItem next() {
		MenuItem menuItem = list[position];
		position = position + 1;
		return menuItem;
	}

	public boolean hasNext() {
		if (position >= list.length || list[position] == null) {
			return false;
		} else {
			return true;
		}
	}

	public void remove() {
		if (position <= 0) {
			throw new IllegalStateException
				("You can't remove an item until you've done at least one next()");
		}
		if (list[position-1] != null) {
			for (int i = position-1; i < (list.length-1); i++) {
				list[i] = list[i+1];
			}
			list[list.length-1] = null;
		}
	}
}


 class MenuItem {
	String name;
	String description;
	boolean vegetarian;
	double price;

	public MenuItem(String name, 
	                String description, 
	                boolean vegetarian, 
	                double price) 
	{
		this.name = name;
		this.description = description;
		this.vegetarian = vegetarian;
		this.price = price;
	}

	public String getName() {
		return name;
	}

	public String getDescription() {
		return description;
	}

	public double getPrice() {
		return price;
	}

	public boolean isVegetarian() {
		return vegetarian;
	}
}


public class slip24 {
	public static void main(String args[]) {
		PancakeHouseMenu pancakeHouseMenu = new PancakeHouseMenu();
		DinerMenu dinerMenu = new DinerMenu();
		CafeMenu cafeMenu = new CafeMenu();

		Waitress waitress = new Waitress(pancakeHouseMenu, dinerMenu, cafeMenu);

		waitress.printMenu();
		waitress.printVegetarianMenu();

		System.out.println("\nCustomer asks, is the Hotdog vegetarian?");
		System.out.print("Waitress says: ");
		if (waitress.isItemVegetarian("Hotdog")) {
			System.out.println("Yes");
		} else {
			System.out.println("No");
		}
		System.out.println("\nCustomer asks, are the Waffles vegetarian?");
		System.out.print("Waitress says: ");
		if (waitress.isItemVegetarian("Waffles")) {
			System.out.println("Yes");
		} else {
			System.out.println("No");
		}
	}
}



 class PancakeHouseMenu implements Menu {
	ArrayList<MenuItem> menuItems;

	public PancakeHouseMenu() {
		menuItems = new ArrayList<MenuItem>();

		addItem("K&B's Pancake Breakfast", 
			"Pancakes with scrambled eggs and toast", 
			true,
			90);

		addItem("Regular Pancake Breakfast", 
			"Pancakes with fried eggs, sausage", 
			false,
			80);

		addItem("Blueberry Pancakes",
			"Pancakes made with fresh blueberries and blueberry syrup",
			true,
			60);

		addItem("Waffles",
			"Waffles with your choice of blueberries or strawberries",
			true,
			70);
	}

	public void addItem(String name, String description,
	                    boolean vegetarian, double price)
	{
		MenuItem menuItem = new MenuItem(name, description, vegetarian, price);
		menuItems.add(menuItem);
	}

	public ArrayList<MenuItem> getMenuItems() {
		return menuItems;
	}

	public Iterator<MenuItem> createIterator() {
		return menuItems.iterator();
	}

	// other menu methods here
}



 class Waitress {
	Menu pancakeHouseMenu;
	Menu dinerMenu;
	Menu cafeMenu;

	public Waitress(Menu pancakeHouseMenu, Menu dinerMenu, Menu cafeMenu) {
		this.pancakeHouseMenu = pancakeHouseMenu;
		this.dinerMenu = dinerMenu;
		this.cafeMenu = cafeMenu;
	}

	public void printMenu() {
		Iterator<MenuItem> pancakeIterator = pancakeHouseMenu.createIterator();
		Iterator<MenuItem> dinerIterator = dinerMenu.createIterator();
		Iterator<MenuItem> cafeIterator = cafeMenu.createIterator();

		System.out.println("MENU\n----\nBREAKFAST");
		printMenu(pancakeIterator);
		System.out.println("\nLUNCH");
		printMenu(dinerIterator);
		System.out.println("\nDINNER");
		printMenu(cafeIterator);
	}

	private void printMenu(Iterator<MenuItem> iterator) {
		while (iterator.hasNext()) {
			MenuItem menuItem = iterator.next();
			System.out.print(menuItem.getName() + ", ");
			System.out.print(menuItem.getPrice() + " -- ");
			System.out.println(menuItem.getDescription());
		}
	}

	public void printVegetarianMenu() {
		System.out.println("\nVEGETARIAN MENU\n---------------");
		printVegetarianMenu(pancakeHouseMenu.createIterator());
		printVegetarianMenu(dinerMenu.createIterator());
		printVegetarianMenu(cafeMenu.createIterator());
	}

	public boolean isItemVegetarian(String name) {
		Iterator<MenuItem> pancakeIterator = pancakeHouseMenu.createIterator();
		if (isVegetarian(name, pancakeIterator)) {
			return true;
		}
		Iterator<MenuItem> dinerIterator = dinerMenu.createIterator();
		if (isVegetarian(name, dinerIterator)) {
			return true;
		}
		Iterator<MenuItem> cafeIterator = cafeMenu.createIterator();
		if (isVegetarian(name, cafeIterator)) {
			return true;
		}
		return false;
	}


	private void printVegetarianMenu(Iterator<MenuItem> iterator) {
		while (iterator.hasNext()) {
			MenuItem menuItem = iterator.next();
			if (menuItem.isVegetarian()) {
				System.out.print(menuItem.getName() + ", ");
				System.out.print(menuItem.getPrice() + " -- ");
				System.out.println(menuItem.getDescription());
			}
		}
	}

	private boolean isVegetarian(String name, Iterator<MenuItem> iterator) {
		while (iterator.hasNext()) {
			MenuItem menuItem = iterator.next();
			if (menuItem.getName().equals(name)) {
				if (menuItem.isVegetarian()) {
					return true;
				}
			}
		}
		return false;
	}
}

 class MenuTestDrive {
	public static void main(String args[]) {
		PancakeHouseMenu pancakeHouseMenu = new PancakeHouseMenu();
		DinerMenu dinerMenu = new DinerMenu();
		CafeMenu cafeMenu = new CafeMenu();

		Waitress waitress = new Waitress(pancakeHouseMenu, dinerMenu, cafeMenu);

		waitress.printMenu();
		waitress.printVegetarianMenu();

		System.out.println("\nCustomer asks, is the Hotdog vegetarian?");
		System.out.print("Waitress says: ");
		if (waitress.isItemVegetarian("Hotdog")) {
			System.out.println("Yes");
		} else {
			System.out.println("No");
		}
		System.out.println("\nCustomer asks, are the Waffles vegetarian?");
		System.out.print("Waitress says: ");
		if (waitress.isItemVegetarian("Waffles")) {
			System.out.println("Yes");
		} else {
			System.out.println("No");
		}
	}
}


Q.2.	Write a python program to make Categorical values in numeric format for a given dataset	[20 M]
***sir code **
from sklearn.preprocessing import LabelEncoder
import pandas as pd

df = pd.read_csv("forestfires.csv")
df.sample(5)

label_encoder = LabelEncoder()
df["Numneric_month"] = label_encoder.fit_transform(df["month"])
df["Numneric_day"] = label_encoder.fit_transform(df["day"])
df.sample(5)

df.to_csv('encoded_dataset.csv', index=False)


****my code***

import pandas as pd
from sklearn.preprocessing import LabelEncoder


df = pd.read_csv('jamesbond.csv')
 
#printing DataFrame
df


# Creating a instance of label Encoder.
le = LabelEncoder()
 
# Using .fit_transform function to fit label
# encoder and return encoded label
label = le.fit_transform(df['show'])
 
# printing label
label

df.drop("show", axis=1, inplace=True)
 
# Appending the array to our dataFrame
# with column name 'Purchased'
df["show"] = label
 
# printing Dataframe
df

Q.3	Implement Login System using Django.	[20 M]


***my code***

root folder is assi1 in 2 folders
1) assi1

urls.py

from django.contrib import admin
from django.urls import path
from my_app.views import index


urlpatterns = [
    path('', index, name='index'),

]




2) my_app (my_app is app folder) in my_app folder present templates folder


apps.py
from django.apps import AppConfig


class MyAppConfig(AppConfig):
    default_auto_field = 'django.db.models.BigAutoField'
    name = 'my_app'





views.py
from django.shortcuts import render

# Create your views here.
def index(request):
    return render(request, 'index.html')
 
 1)template ( in my_app folder present templates folder)

 index.html

<html>
<head>
<title>User login page</title>
<head>
    <script>
          function f(){
                var validRegex =/^[a-zA-Z0-9.!#$%&'+/=?^_`{|}~-]+@[a-zA-Z0-9-]+(?:\.[a-zA-Z0-9-]+)$/;
                var email=document.getElementById("email").value;
                if(!validRegex.test(email))
                    alert("Invalid Email!");
                 else
                    alert("submitted succesfully");
                return false;
         }
    </script>
</head>
<body>
    <form name="login" onsubmit="f()">
    <h1>Login here</h1>
    email id:<input type="text" id="email"/><br><br>
    password:<input type="password" id="password"><br><br>
    <input type="submit" id="submit" value="submit">
    </form>
</body>
</html>



slip 25

Q.1 Write a Java Program to implement Singleton pattern for multithreading	[20 M]

public class slip2_25
{
public static void main(String s[])

{
ABC obj1 = ABC.getInstance();
ABC obj2 = ABC.getInstance();
obj1.showMessage();
}
}
class ABC
{
static ABC obj = new ABC();
String name = "Gaurav";
private ABC() {}

public static ABC getInstance()
{

return obj;

}
public void showMessage()
   {
      System.out.println("Hello "+name+" !!!!! ");
   }
}


Q.2. Write a python program to Implement Simple Linear Regression for predicting house price.	[20 M]

*** sir code ***

import pandas as pd
import matplotlib.pyplot as plt
from sklearn import linear_model

ps=pd.read_csv("Housing.csv")
df = ps[['area', 'price']]
df.sample(5)

plt.scatter(df.area,df.price,color='red',marker='+')

In_v=df.drop('price',axis='columns')
In_v

model=linear_model.LinearRegression()
model.fit(In_v,df.price)

model.predict([[6720]])


***my code ***

  import numpy as np
    import pandas as pd
    
    # Visualisation Libraries
    import seaborn as sns
    import matplotlib.pyplot as plt
    
    # Data Processing Libraries
    from sklearn.feature_selection import SelectKBest
    from sklearn.feature_selection import chi2
    from sklearn import model_selection
    from sklearn.metrics import mean_squared_error, r2_score
    
    # Algorithm Libraries
    from sklearn.ensemble import ExtraTreesClassifier
    from sklearn.model_selection import train_test_split
    from sklearn.linear_model import LinearRegression
    from sklearn.tree import DecisionTreeRegressor
    from sklearn.ensemble import RandomForestRegressor
    
    # Math Library
    import math
    
    # Importing Dataset
    df = pd.read_csv("HousingData.xls")
    
    # Printing Dataset
    df.head()   

       
    # Calculating the mean, minimum, deviation, maximum and other factors
    df.describe()
    fig=plt.figure()
    ax=fig.add_subplot(1, 1, 1)
    ax.hist(df['RM'], bins = 35)
    plt.title("Average number of rooms Distribution ")
    plt.xlabel("RM")
    plt.ylabel("frequency")
    plt.show()
    
    fig=plt.figure()
    ax=fig.add_subplot(1, 1, 1)
    ax.hist(df['LSTAT'], bins = 35)
    plt.title("Homeowners distribution with low class")
    plt.xlabel("LSTAT")
    plt.ylabel("frequency")
    plt.show()
    
    fig=plt.figure()
    ax=fig.add_subplot(1, 1, 1)
    ax.hist(df['PTRATIO'], bins = 35)
    plt.title("Students to Teachers ratio distribution")
    plt.xlabel("PTRATIO")
    plt.ylabel("frequency")
    plt.show()
    
    fig=plt.figure()
    ax=fig.add_subplot(1, 1, 1)
    ax.hist(df['AGE'], bins = 35)
    plt.title("Ages of Black Owned Portion in the town")
    plt.xlabel("AGE")
    plt.ylabel("B")
    plt.show()
    
    N = 506
    x = df.AGE
    y = df.B
    colors = np.random.rand(N)

    plt.scatter(x, y, c=colors)
    plt.title("scatter")
    plt.show()
    
    plt.title("hitmap")
    sns.heatmap(df.isnull(),yticklabels=False,cbar=False,cmap='Blues')


Q.3	Create a Simple Web Server using node js.	[20 M]

var http = require('http'); 

var server = http.createServer(function (req, res) {  

res.write("<h1 style='background-color:green'>create server successfully</h1>");
res.end();

});

server.listen(8002); 
console.log('Node.js web server at port 8002 is running..')

slip 26

Q.1	Write a Java Program to implement Strategy Pattern for Duck Behavior. Create instance variable that holds current state of Duck from there, we just need to handle all Flying Behaviors and Quack Behavior.	[20 M]


 abstract class Duck {
  FlyBehaviour flyBehaviour;
  QuackBehaviour quackBehaviour;
  public Duck() {
  }

  public abstract void display();

  public void performFly() {
    flyBehaviour.fly();
  }

  public void performQuack() {
    quackBehaviour.quack();
  }
  public void swim() {
    System.out.println("All ducks float, even decoys!");
  }
  public void setFlyBehaviour(FlyBehaviour fb) {
    flyBehaviour = fb;
  }
  public void setQuackBehaviour(QuackBehaviour qb) {
    quackBehaviour =  qb;
  }
}


 class MallardDuck extends Duck {

  public MallardDuck() {
    quackBehaviour = new Quack();
    flyBehaviour = new FlyWithWings();
  }

  public void display() {
    System.out.println("I'm a real Mallard duck");
  }
}

 class ModolDuck extends Duck {
  // public ModelDuck() {
     public ModolDuck() {
    flyBehaviour = new FlyNoWay();
    quackBehaviour = new Quack();
  }

  public void display() {
    System.out.println("I'm a model duck");
  }
}


 interface FlyBehaviour {
  public void fly();
}


 class FlyWithWings implements FlyBehaviour {
  public void fly() {
    System.out.println("I'm flying!!");
  }
}


 class FlyNoWay implements FlyBehaviour {
  public void fly() {
    System.out.println("I can't fly");
  }
}


class FlyRocketPowered implements FlyBehaviour {
  public void fly() {
    System.out.println("I'm flying with a rocket!");
  }
}


 interface QuackBehaviour {
  // public void quack() {
  public void quack() ;
}


 class Quack implements QuackBehaviour {
  public void quack() {
    System.out.println("Quack");
  }
}


 class MuteQuack implements QuackBehaviour {
  public void quack() {
    System.out.println("<< Silence >>");
  }
}


 class Squeak implements QuackBehaviour {
  public void quack() {
    System.out.println("Squeak");
  }
}

// MiniDuckSimulator.Java
// public class slip10 {
//   public static void main(String[] args) {
//     Duck mallard = new MallardDuck();
//     mallard.performQuack();
//     mallard.performFly();
//   }
// }

public class slip10_26 {
  public static void main(String[] args) {
    Duck mallard = new MallardDuck();
    mallard.performQuack();
    mallard.performFly();
    // Duck model = new ModelDuck();
    Duck model = new ModolDuck();
    model.performFly();
    model.setFlyBehaviour(new FlyRocketPowered());
    model.performFly();
  }
}


Q.2.	Write a python program to implement Multiple Linear Regression for given dataset.[20 M]

***sir code ***
import pandas as pd
import matplotlib.pyplot as plt
from sklearn import linear_model

ps=pd.read_csv("Housing.csv")
ps.sample(10)

df = ps[['area','bedrooms','bathrooms','stories','price']]
df.sample(5)

model=linear_model.LinearRegression()
model.fit(df.drop('price',axis='columns'),df.price)

model.predict([[7400,3,2,4]])

***my code***
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
  
dataset = pd.read_csv('Salary_Data.csv')
dataset.head()
 
# data preprocessing
X = dataset.iloc[:, :-1].values  #independent variable array
y = dataset.iloc[:,1].values  #dependent variable vector
 
# splitting the dataset
from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X,y,test_size=1/3,random_state=0)
 
# fitting the regression model
from sklearn.linear_model import LinearRegression
regressor = LinearRegression()
regressor.fit(X_train,y_train) #actually produces the linear eqn for the data
 
# predicting the test set results
y_pred = regressor.predict(X_test) 
y_pred
 
y_test
 
# visualizing the results
#plot for the TRAIN
  
plt.scatter(X_train, y_train, color='red') # plotting the observation line
plt.plot(X_train, regressor.predict(X_train), color='blue') # plotting the regression line
plt.title("Salary vs Experience (Training set)") # stating the title of the graph
  
plt.xlabel("Years of experience") # adding the name of x-axis
plt.ylabel("Salaries") # adding the name of y-axis
plt.show() # specifies end of graph
 
#plot for the TEST
  
plt.scatter(X_test, y_test, color='red') 
plt.plot(X_train, regressor.predict(X_train), color='blue') # plotting the regression line
plt.title("Salary vs Experience (Testing set)")
  
plt.xlabel("Years of experience") 
plt.ylabel("Salaries") 
plt.show() 


Q.3	Create a Node.js file that demonstrates create database and table in MySQL.
[20 M]
var mysql = require('mysql');

var con = mysql.createConnection({
    host: "localhost",

    user: "root",
  
    //password: "", /*pc xampp database or localhost*/
   //password: "Gaurav@123", /* pc commond line mysql or localhost*/
   password: "raj@123", /* mobile xampp or local host*/
});

// use the  query to connect a localhost
con.connect(function(err) {
  if (err) throw err;
  console.log("Connected to localhost!");
 
  });


 // use the query to create a Database.
  let databaseName = "lab_pro";
  
  let createQuery = `CREATE DATABASE ${databaseName}`;

 
  con.query(createQuery, (err) => {
      if(err==1) throw  "Couldn't create";

      console.log(databaseName+" Database Created Successfully !");
  // use the query to Use a Database.
      let useQuery = `USE ${databaseName}`;
      con.query(useQuery, (error) => {
          if(error) throw error;

          console.log("Using Database"+databaseName);
        })
  // Create a new Table
    let TableName = "student";
    let table_query = `CREATE TABLE ${TableName} (name VARCHAR(255), address VARCHAR(255))`;
  
    con.query(table_query, (err) => {
      if(err==1) throw "Couldn't create";
      console.log(TableName+" Table created");
    });

//Insert Data in Table

  let Insert_query = `INSERT INTO ${TableName} (name, address) VALUES ?;`;
  
// multiple Values to be inserted
    let values = [
        ['Amit', 'Yellow Park'],
        ['Rishi', 'Park 38'],
        ['Akash', 'Central st 954'],
        ['Pratik', 'Road 989'],
        ['Mangesh', 'Sideway']
    ];
  
  // Executing the query show row are inserted in the table
    con.query(Insert_query, [values], (err) => {
    
        if (err==1) throw "Couldn't create";
        console.log("All Rows Inserted");
    });

//select query to show table data
    let show_student = `SELECT * FROM ${TableName}`
    con.query(show_student, function (err, result, fields) {

        if (err) throw err;
    
        console.log(result);
    
      });

//Executing the query to delete specific row rows
    let D_query = `DELETE FROM student WHERE name = ?`;

   let name = 'Amit';
  
    con.query(D_query,name,(err, rows) => {
         if(err==1) throw "Couldn't delete";
  
        console.log('Number of rows deleted = ' + rows.affectedRows);
    });
// Executing the query to delete all row rows
   let delete_query1 = `DELETE FROM ${TableName}`;
   con.query(delete_query1,(err, rows) =>{
            if (err) throw err;
            console.log("All Records deleted = "+ rows.affectedRows);
        });

  });



slip 27


Q.1	Write a Java Program to implement Abstract Factory Pattern for Shape interface.
[20 m]


 interface Shape {
   void draw();
}
 class RoundedRectangle implements Shape {
   @Override
   public void draw() {
      System.out.println("Inside RoundedRectangle::draw() method.");
   }
}


 class RoundedSquare implements Shape {
   @Override
   public void draw() {
      System.out.println("Inside RoundedSquare::draw() method.");
   }
}


 class Rectangle implements Shape {
   @Override
   public void draw() {
      System.out.println("Inside Rectangle::draw() method.");
   }
}

 class Square implements Shape {
   @Override
   public void draw() {
      System.out.println("Inside Square::draw() method.");
   }
}
// Step 3 Create an Abstract class to get factories for Normal and Rounded Shape Objects.



 abstract class AbstractFactory {
   abstract Shape getShape(String shapeType) ;
}
// Step 4 Create Factory classes extending AbstractFactory to generate object of concrete class based on given information.



 class ShapeFactory extends AbstractFactory {
   @Override
   public Shape getShape(String shapeType){    
      if(shapeType.equalsIgnoreCase("RECTANGLE")){
         return new Rectangle();         
      }else if(shapeType.equalsIgnoreCase("SQUARE")){
         return new Square();
      }	
      return null;
   }
}


 class RoundedShapeFactory extends AbstractFactory {
   @Override
   public Shape getShape(String shapeType){    
      if(shapeType.equalsIgnoreCase("RECTANGLE")){
         return new RoundedRectangle();         
      }else if(shapeType.equalsIgnoreCase("SQUARE")){
         return new RoundedSquare();
      }	
      return null;
   }
}
// Step 5 Create a Factory generator/producer class to get factories by passing an information such as Shape


 class FactoryProducer {
   public static AbstractFactory getFactory(boolean rounded){   
      if(rounded){
         return new RoundedShapeFactory();         
      }else{
         return new ShapeFactory();
      }
   }
}
// Step 6 Use the FactoryProducer to get AbstractFactory in order to get factories of concrete classes by passing an information such as type.



public class slip17_27 {
   public static void main(String[] args) {
      //get shape factory
      AbstractFactory shapeFactory = FactoryProducer.getFactory(false);
      //get an object of Shape Rectangle
      Shape shape1 = shapeFactory.getShape("RECTANGLE");
      //call draw method of Shape Rectangle
      shape1.draw();
      //get an object of Shape Square 
      Shape shape2 = shapeFactory.getShape("SQUARE");
      //call draw method of Shape Square
      shape2.draw();
      //get shape factory
      AbstractFactory shapeFactory1 = FactoryProducer.getFactory(true);
      //get an object of Shape Rectangle
      Shape shape3 = shapeFactory1.getShape("RECTANGLE");
      //call draw method of Shape Rectangle
      shape3.draw();
      //get an object of Shape Square 
      Shape shape4 = shapeFactory1.getShape("SQUARE");
      //call draw method of Shape Square
      shape4.draw();

   }
}

Q.2.	Write a python program to implement Polynomial Linear Regression for given dataset
[20 M]
***sir code***
import pandas as pd
import matplotlib .pyplot as plt

df= pd.read_csv('Salary.csv')
df

plt.scatter(df['YearsExperience'],df['Salary'])

x= df.iloc[:,1:-1].values
y= df.iloc[:,-1].values
X

y

from sklearn.preprocessing import PolynomialFeatures
poly =PolynomialFeatures(degree=3)
x_poly = poly.fit_transform(x)
x_poly

from sklearn.linear_model import LinearRegression
model = LinearRegression()
model.fit(x_poly,y)

plt.scatter(x,y)
plt.plot(x,model.predict(poly.fit_transform(x)))

model.predict(poly.fit_transform([[6]]))

***my code***
import numpy as np
import matplotlib.pyplot as plt
import pandas as pd
  
dataset = pd.read_csv('Position_Salaries.csv')
dataset
 
X = dataset.iloc[:,1:2].values  
y = dataset.iloc[:,2].values
 
# fitting the linear regression model
from sklearn.linear_model import LinearRegression
lin_reg = LinearRegression()
lin_reg.fit(X,y)
 
# visualising the linear regression model
plt.scatter(X,y, color='red')
plt.plot(X, lin_reg.predict(X),color='blue')
plt.title("Truth or Bluff(Linear)")
plt.xlabel('Position level')
plt.ylabel('Salary')
plt.show()
 
# polynomial regression model
from sklearn.preprocessing import PolynomialFeatures
poly_reg = PolynomialFeatures(degree=2)
X_poly = poly_reg.fit_transform(X)
  
X_poly     # prints X_poly
 
lin_reg2 = LinearRegression()
lin_reg2.fit(X_poly,y)
 
 
# visualising polynomial regression
from sklearn.preprocessing import PolynomialFeatures
poly_reg = PolynomialFeatures(degree=4)
X_poly = poly_reg.fit_transform(X)
lin_reg2 = LinearRegression()
lin_reg2.fit(X_poly,y)
  
X_grid = np.arange(min(X),max(X),0.1)
X_grid = X_grid.reshape(len(X_grid),1) 
plt.scatter(X,y, color='red') 
  
plt.plot(X_grid, lin_reg2.predict(poly_reg.fit_transform(X_grid)),color='blue') 
  
plt.title("Truth or Bluff(Polynomial)")
plt.xlabel('Position level')
plt.ylabel('Salary')
plt.show()

Q.3	Create your Django app in which after running the server, you should see on the browser, the text “Hello! I am learning Django”, which you defined in the index view.
[20 M]

***sir code***
root folder is que1 in 2 folders
1) que1

urls.py

from django.contrib import admin
from django.urls import path , include

urlpatterns = [
    path("admin/", admin.site.urls),
    path("",include('sample.urls')),
]



2) sample (sample is app folder)
admin.py
from django.contrib import admin

apps.py
from django.apps import AppConfig


class SampleConfig(AppConfig):
    default_auto_field = "django.db.models.BigAutoField"
    name = "sample"


urls.py
from django.contrib import admin
from django.urls import path
from . import views

urlpatterns = [
    path("admin/", admin.site.urls),
    path("",views.home, name='home'),
]

views.py
from django.shortcuts import render
from django.http import HttpResponse

# Create your views here.
def home(request):
    return HttpResponse("hello, How are ")


***my code***

root folder is assi1 in 2 folders
1) assi1

urls.py

from django.contrib import admin
from django.urls import path
from my_app.views import index


urlpatterns = [
    path('', index, name='index'),

]




2) my_app (my_app is app folder) in my_app folder present templates folder


apps.py
from django.apps import AppConfig


class MyAppConfig(AppConfig):
    default_auto_field = 'django.db.models.BigAutoField'
    name = 'my_app'





views.py
from django.shortcuts import render

# Create your views here.
def index(request):
    return render(request, 'index.html')
 
 1)template ( in my_app folder present templates folder)

 index.html
 <!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Hello world</title>
</head>
<body>
    <h1>
        Hello I am Learning Django
    </h1>
</body>
</html>
 


slip 28


Q.1	Write a JAVA Program to implement built-in support (java.util.Observable) Weather station with members temperature, humidity, pressure and methods mesurmentsChanged(), setMesurment(), getTemperature(), getHumidity(),
	getPressure()	[20 M]
	
import java.util.*;

interface Observer {
    public void update(float temp, float humidity, float pressure);
}

interface DisplayElement {
    public void display();
}

interface Subject {
    public void registerObserver(Observer o);

    public void removeObserver(Observer o);

    public void notifyObservers();
}

class WeatherData implements Subject {
    private ArrayList<Observer> observers;
    private float temperature;
    private float humidity;
    private float pressure;

    public WeatherData() {
        observers = new ArrayList<>();
    }

    public void registerObserver(Observer o) {
        observers.add(o);
    }

    public void removeObserver(Observer o) {
        int i = observers.indexOf(o);
        if (i >= 0) {
            observers.remove(i);
        }
    }

    public void notifyObservers() {
        for (int i = 0; i < observers.size(); i++) {
            Observer observer = (Observer) observers.get(i);
            observer.update(temperature, humidity, pressure);
        }
    }

    public void measurementsChanged() {
        notifyObservers();
    }

    public void setMeasurements(float temperature, float humidity, float pressure) {
        this.temperature = temperature;
        this.humidity = humidity;
        this.pressure = pressure;
        measurementsChanged();
    }

    public float getTemperature() {
        return temperature;
    }

    public float getHumidity() {
        return humidity;
    }

    public float getPressure() {
        return pressure;
    }
}

class ForecastDisplay implements Observer, DisplayElement {
    private float currentPressure = 29.92f;
    private float lastPressure;
    private WeatherData weatherData;

    public ForecastDisplay(WeatherData weatherData) {
        this.weatherData = weatherData;
        weatherData.registerObserver(this);
    }

    public void update(float temp, float humidity, float pressure) {
        lastPressure = currentPressure;
        currentPressure = pressure;

        display();
    }

    public void display() {
        System.out.print("Forecast: ");
        if (currentPressure > lastPressure) {
            System.out.println("Improving weather on the way!");
        } else if (currentPressure == lastPressure) {
            System.out.println("More of the same");
        } else if (currentPressure < lastPressure) {
            System.out.println("Watch out for cooler weather, rainy weather");
        }
    }
}

class HeatIndexDisplay implements Observer, DisplayElement {
    float heatIndex = 0.0f;
    private WeatherData weatherData;

    public HeatIndexDisplay(WeatherData weatherData) {
        this.weatherData = weatherData;
        weatherData.registerObserver(this);
    }

    public void update(float t, float rh, float pressure) {
        heatIndex = computeHeatIndex(t, rh);
        display();
    }

    private float computeHeatIndex(float t, float rh) {
        float index = (float) ((16.923 + (0.185212 * t) + (5.37941 * rh) - (0.100254 * t * rh)
                + (0.00941695 * (t * t)) + (0.00728898 * (rh * rh))
                + (0.000345372 * (t * t * rh)) - (0.000814971 * (t * rh * rh)) +
                (0.0000102102 * (t * t * rh * rh)) - (0.000038646 * (t * t * t)) + (0.0000291583 *
                        (rh * rh * rh))
                + (0.00000142721 * (t * t * t * rh)) +
                (0.000000197483 * (t * rh * rh * rh)) - (0.0000000218429 * (t * t * t * rh * rh)) +
                0.000000000843296 * (t * t * rh * rh * rh)) -
                (0.0000000000481975 * (t * t * t * rh * rh * rh)));
        return index;
    }

    public void display() {
        System.out.println("Heat index is " + heatIndex);
    }
}

class StatisticsDisplay implements Observer, DisplayElement {
    private float maxTemp = 0.0f;
    private float minTemp = 200;
    private float tempSum = 0.0f;
    private int numReadings;
    private WeatherData weatherData;

    public StatisticsDisplay(WeatherData weatherData) {
        this.weatherData = weatherData;
        weatherData.registerObserver(this);
    }

    public void update(float temp, float humidity, float pressure) {
        tempSum += temp;
        numReadings++;

        if (temp > maxTemp) {
            maxTemp = temp;
        }

        if (temp < minTemp) {
            minTemp = temp;
        }

        display();
    }

    public void display() {
        System.out.println("Avgerage/Maximum/Minimum temperature = " + (tempSum / numReadings)
                + "/" + maxTemp + "/" + minTemp);
    }
}

class CurrentConditionsDisplay implements Observer, DisplayElement {
    private float temperature;
    private float humidity;
    private Subject weatherData;

    public CurrentConditionsDisplay(Subject weatherData) {
        this.weatherData = weatherData;
        weatherData.registerObserver(this);
    }

    public void update(float temperature, float humidity, float pressure) {
        this.temperature = temperature;
        this.humidity = humidity;
        display();
    }

    public void display() {
        System.out.println("Current conditions: " + temperature
                + "F degrees and " + humidity + "% humidity");
    }
}
//weather.java main file
class  slip3_18_28{

    public static void main(String[] args) {
        WeatherData weatherData = new WeatherData();

        CurrentConditionsDisplay currentDisplay = new CurrentConditionsDisplay(weatherData);
        StatisticsDisplay statisticsDisplay = new StatisticsDisplay(weatherData);
        ForecastDisplay forecastDisplay = new ForecastDisplay(weatherData);

        weatherData.setMeasurements(70, 55, 40.4f);
        weatherData.setMeasurements(72, 60, 39.2f);
        weatherData.setMeasurements(68, 80, 39.2f);
    }
}

Q.2.	Write a python program to implement Naive Bayes.	[20 M]
***sir code***
#Naive Bayes
import pandas as pd

df=pd.read_csv("Titanic-Dataset.csv")
df.head(1)

df=df.drop(['PassengerId','Name','SibSp','Parch','Embarked','Cabin','Ticket'], axis='columns')
df.head()

from sklearn.preprocessing import LabelEncoder
label = LabelEncoder()
df['Gender'] = label.fit_transform(df['Gender'])
df.head()

input=df.drop(['Survived'],axis='columns')
input.head()

target=df['Survived']
target.head()

input.columns[input.isna().any()]
input

input.Age = input.Age.fillna(input.Age.mean())
input

from sklearn.model_selection import train_test_split
x_train,x_test,y_train,y_test = train_test_split(input,target,test_size=0.2)
len(y_test)

from sklearn.naive_bayes import GaussianNB
model = GaussianNB()
model.fit(x_train,y_train)

model.score(x_test,y_test)

x_test[:10]

y_test[:10]

model.predict(x_test[:10])


Q.3	Create your own blog using Django	[20 M]

***my code***

root folder is assi1 in 2 folders
1) assi1

urls.py

from django.contrib import admin
from django.urls import path
from my_app.views import index


urlpatterns = [
    path('', index, name='index'),

]




2) my_app (my_app is app folder) in my_app folder present templates folder


apps.py
from django.apps import AppConfig


class MyAppConfig(AppConfig):
    default_auto_field = 'django.db.models.BigAutoField'
    name = 'my_app'





views.py
from django.shortcuts import render

# Create your views here.
def index(request):
    return render(request, 'index.html')
 
 1)template ( in my_app folder present templates folder)

 index.html
<!DOCTYPE html>
<html>
<head>
</head>
<body>

<div class="header">
  <h2>Welcome to my Blog</h2>
</div>

<div class="row">
  <div class="leftcolumn">
    <div class="card">
      <h2>Django</h2>
      <h5>MSc. Computer Science Part 2</h5>
    </div>
  </div>
  <div class="rightcolumn">
    <div class="card">
      <h2>Subjects :</h3>
      <h4>SADP</h6>
      <h4>Web Frameworks</h6>
      <h4>Machine Learning</h6>
      </div>
  </div>
</div>
</body>
</html>


slip 29


Q. 1	Write a Java Program to implement State Pattern for Gumball Machine.
Create instance variable that holds current state from there, we just need to handle all actions, behaviors and state transition that can happen	[20 M]

 interface State {

	public void insertQuarter();
	public void ejectQuarter();
	public void turnCrank();
	public void dispense();
	
	public void refill();
}
 class SoldState implements State {

    GumballMachine gumballMachine;

    public SoldState(GumballMachine gumballMachine) {
        this.gumballMachine = gumballMachine;
    }

	public void insertQuarter() {
		System.out.println("Please wait, we're already giving you a gumball");
	}

	public void ejectQuarter() {
		System.out.println("Sorry, you already turned the crank");
	}

	public void turnCrank() {
		System.out.println("Turning twice doesn't get you another gumball!");
	}

	public void dispense() {
		gumballMachine.releaseBall();
		if (gumballMachine.getCount() > 0) {
			gumballMachine.setState(gumballMachine.getNoQuarterState());
		} else {
			System.out.println("Oops, out of gumballs!");
			gumballMachine.setState(gumballMachine.getSoldOutState());
		}
	}

	public void refill() { }

	public String toString() {
		return "dispensing a gumball";
	}
}

 class SoldOutState implements State {
    GumballMachine gumballMachine;

    public SoldOutState(GumballMachine gumballMachine) {
        this.gumballMachine = gumballMachine;
    }

	public void insertQuarter() {
		System.out.println("You can't insert a quarter, the machine is sold out");
	}

	public void ejectQuarter() {
		System.out.println("You can't eject, you haven't inserted a quarter yet");
	}

	public void turnCrank() {
		System.out.println("You turned, but there are no gumballs");
	}

	public void dispense() {
		System.out.println("No gumball dispensed");
	}
	
	public void refill() { 
		gumballMachine.setState(gumballMachine.getNoQuarterState());
	}

	public String toString() {
		return "sold out";
	}
}

 class NoQuarterState implements State {
    GumballMachine gumballMachine;

    public NoQuarterState(GumballMachine gumballMachine) {
        this.gumballMachine = gumballMachine;
    }

	public void insertQuarter() {
		System.out.println("You inserted a quarter");
		gumballMachine.setState(gumballMachine.getHasQuarterState());
	}

	public void ejectQuarter() {
		System.out.println("You haven't inserted a quarter");
	}

	public void turnCrank() {
		System.out.println("You turned, but there's no quarter");
	 }

	public void dispense() {
		System.out.println("You need to pay first");
	} 
	
	public void refill() { }

	public String toString() {
		return "waiting for quarter";
	}
}

class HasQuarterState implements State {
	GumballMachine gumballMachine;

	public HasQuarterState(GumballMachine gumballMachine) {
		this.gumballMachine = gumballMachine;
	}

	public void insertQuarter() {
		System.out.println("You can't insert another quarter");
	}

	public void ejectQuarter() {
		System.out.println("Quarter returned");
		gumballMachine.setState(gumballMachine.getNoQuarterState());
	}

	public void turnCrank() {
		System.out.println("You turned...");
		gumballMachine.setState(gumballMachine.getSoldState());
	}

    public void dispense() {
        System.out.println("No gumball dispensed");
    }

    public void refill() { }

	public String toString() {
		return "waiting for turn of crank";
	}

}

class GumballMachine {

	State soldOutState;
	State noQuarterState;
	State hasQuarterState;
	State soldState;

	State state;
	int count = 0;

	public GumballMachine(int numberGumballs) {
		soldOutState = new SoldOutState(this);
		noQuarterState = new NoQuarterState(this);
		hasQuarterState = new HasQuarterState(this);
		soldState = new SoldState(this);

		this.count = numberGumballs;
		if (numberGumballs > 0) {
			state = noQuarterState;
		} else {
			state = soldOutState;
		}
	}

	public void insertQuarter() {
		state.insertQuarter();
	}

	public void ejectQuarter() {
		state.ejectQuarter();
	}

	public void turnCrank() {
		state.turnCrank();
		state.dispense();
	}

	void releaseBall() {
		System.out.println("A gumball comes rolling out the slot...");
		if (count != 0) {
			count = count - 1;
		}
	}

	int getCount() {
		return count;
	}

	void refill(int count) {
		this.count += count;
		System.out.println("The gumball machine was just refilled; it's new count is: " + this.count);
		state.refill();
	}

	void setState(State state) {
		this.state = state;
	}
    public State getState() {
        return state;
    }

    public State getSoldOutState() {
        return soldOutState;
    }

    public State getNoQuarterState() {
        return noQuarterState;
    }

    public State getHasQuarterState() {
        return hasQuarterState;
    }

    public State getSoldState() {
        return soldState;
    }

	public String toString() {
		StringBuffer result = new StringBuffer();
		result.append("\nMighty Gumball, Inc.");
		result.append("\nJava-enabled Standing Gumball Model #2004");
		result.append("\nInventory: " + count + " gumball");
		if (count != 1) {
			result.append("s");
		}
		result.append("\n");
		result.append("Machine is " + state + "\n");
		return result.toString();
	}
}

class slip8{

	public static void main(String[] args) {
		GumballMachine gumballMachine = new GumballMachine(2);

		System.out.println(gumballMachine);

		gumballMachine.insertQuarter();
		gumballMachine.turnCrank();

		System.out.println(gumballMachine);

		gumballMachine.insertQuarter();
		gumballMachine.turnCrank();
		gumballMachine.insertQuarter();
		gumballMachine.turnCrank();
		
		gumballMachine.refill(3);
		gumballMachine.insertQuarter();
		gumballMachine.turnCrank();

		System.out.println(gumballMachine);
	}
}


Q.2.	Write a python program to implement Decision Tree whether or not to play Tennis.
[20 M]

***sir code***
import pandas as pd
from sklearn.tree import DecisionTreeClassifier
from sklearn.preprocessing import LabelEncoder

data = pd.read_csv("play_tennis.csv")
data.sample(5)

label_encoder = LabelEncoder()
data['outlook'] = label_encoder.fit_transform(data['outlook'])
data['temp'] = label_encoder.fit_transform(data['temp'])
data['humidity'] = label_encoder.fit_transform(data['humidity'])
data['wind'] = label_encoder.fit_transform(data['wind'])
data['play'] = label_encoder.fit_transform(data['play'])

data
x = data[['outlook', 'temp', 'humidity', 'wind']]
y = data['play']

clf = DecisionTreeClassifier()

clf.fit(x, y)

new_day = [1, 2, 0, 1] 
prediction = clf.predict([new_day])
prediction

predicted_play = label_encoder.inverse_transform(prediction)

print("Prediction:", predicted_play[0])

*** my code***
# Load libraries
import numpy as np
import pandas as pd
from sklearn import metrics #Import scikit-learn metrics module for accuracy calculation

df=pd.read_csv("Play Tennis.csv")
value=['Outlook','Temprature','Humidity','Wind']
df

len(df)           #Dataset Lenght

df.shape  #To see the number of rows and columns in our dataset:

df.head()         #To inspect the first five records of the dataset:

df.tail()         #To inspect the last five records of the dataset:

df.describe()     #To see statistical details of the dataset:

#machine learning algorithms can only learn from numbers (int, float, doubles .. )
#so let us encode it to int
from sklearn import preprocessing
string_to_int= preprocessing.LabelEncoder()                     #encode your data
df=df.apply(string_to_int.fit_transform) #fit and transform it
df

#To divide our data into attribute set and Label:
feature_cols = ['Outlook','Temprature','Humidity','Wind']
X = df[feature_cols ]                               #contains the attribute 
y = df.Play_Tennis                                  #contains the label
#To divide our data into training and test sets:
from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.30) 

# perform training 
from sklearn.tree import DecisionTreeClassifier                             # import the classifier
classifier =DecisionTreeClassifier(criterion="entropy", random_state=100)     # create a classifier object
classifier.fit(X_train, y_train)                                              # fit the classifier with X and Y data or 
DecisionTreeClassifier(class_weight=None, criterion='entropy', max_depth=None,
            max_features=None, max_leaf_nodes=None,
            min_impurity_decrease=0.0, min_impurity_split=None,
            min_samples_leaf=1, min_samples_split=2,
            min_weight_fraction_leaf=0.0, presort=False, random_state=100,
            splitter='best')
#Predict the response for test dataset
y_pred= classifier.predict(X_test)  
# Model Accuracy, how often is the classifier correct?
from sklearn.metrics import accuracy_score
print("Accuracy:",metrics.accuracy_score(y_test, y_pred))
Accuracy: 0.4
Now let's compare some of our predicted values with the actual values and see how accurate we were:
data_p=pd.DataFrame({'Actual':y_test, 'Predicted':y_pred})  
data_p

from sklearn.metrics import classification_report, confusion_matrix  
print(confusion_matrix(y_test, y_pred))  
print(classification_report(y_test, y_pred)) 

from sklearn.tree import export_graphviz
from sklearn.externals.six import StringIO
from IPython.display import Image
import pydotplus
dot_data = StringIO()
export_graphviz(classifier, out_file=dot_data,
filled=True, rounded=True,
special_characters=True,feature_names =value,class_names=['0','1'])
graph = pydotplus.graph_from_dot_data(dot_data.getvalue())
graph.write_png('Play Tennis.png')
Image(graph.create_png())

Q.3	Create a clone of the “Hacker News” website.	[20 M]
***my code***

root folder is assi1 in 2 folders
1) assi1

urls.py

from django.contrib import admin
from django.urls import path
from my_app.views import index


urlpatterns = [
    path('', index, name='index'),

]




2) my_app (my_app is app folder) in my_app folder present templates folder


apps.py
from django.apps import AppConfig


class MyAppConfig(AppConfig):
    default_auto_field = 'django.db.models.BigAutoField'
    name = 'my_app'





views.py
from django.shortcuts import render

# Create your views here.
def index(request):
    return render(request, 'index.html')
 
 1)template ( in my_app folder present templates folder)

 index.html


<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <style>
        .top
        {
            background: #2705bd;
            padding: 30px 30px 10px 30px;
        }
       .top_name1{
            color: aliceblue;
            text-decoration: none;
            text-align: center;
            align-items: center;
            padding-left: 10%;
        }
        .top_name2{
            color: aliceblue;
            text-decoration: none;
            text-align: center;
            align-items: center;
            padding-left: 50%;
        }
        .logo{
     
            
            
        }
        h1{
            margin: 0%;
            color: white;
            background: #413fb4;
            font-size: 50px;
            text-decoration: none;
            padding-left: 9%;
            font-weight: bold;
      
        }
        h3{
            background: #413fb4;
            width: 18%;
            color: rgb(12, 8, 8);
            margin-left: 70%;
            transform: translateY(-50px);
            background-color: yellow;
            border: 1px solid black;
            border-radius: 5px;
            
            
        }
        nav{
            transform: translateY(-40px);
            padding-left: 80px;
        }
        nav a{
            text-decoration: none;
            color: black;
            font-size: 20px;
            text-align: center;
            align-items: center;
            justify-content: center;
            padding-left: 30px;
        }
        .data{
            margin-left: 20px;
            margin-right: 20px;
            background-color: burlywood;
            
        }
     
    </style>
</head>
<body>
    <div class="top" >

        <a href="#" class="top_name1">#1 Trusted Cybersecurity News Platform </a>
        <a href="#" class="top_name2">Followed by 4.50+ million</a>
    </div>
    <div class="logo" >

       <h1>The Hacker News </h1>
        <h3>Get the free Newsteller</h3>
    </div>
    <nav>
        <a href="">Home</a>
        <a href="">Data Branches</a>
        <a href="">Cyber Attack</a>
        <a href="">Vulneabrities</a>
        <a href="">Webinar</a>
        <a href="">Store</a>
        <a href="">Contact</a>
        
    </nav>
    <div class="data">
        <img src="" alt="">
        <h4>Lorem ipsum dolor sit amet consectetur adipisicing elit. Atque, earum praesentium! Voluptatum, eaque ducimus?</h4>
        <p>Lorem, ipsum dolor sit amet consectetur adipisicing elit. Molestiae ullam odit ipsum accusantium reprehenderit aperiam illo asperiores odio, dicta adipisci perspiciatis alias possimus sit eius.</p>
    </div>
</body>
</html>



    slip 30

    
Q.1	Write a Java Program to implement Factory method for Pizza Store with createPizza(), orederPizza(), prepare(), Bake(), cut(), box(). Use this to create variety of pizza’s
	like NyStyleCheesePizza, ChicagoStyleCheesePizza etc.	[20 M]
	
import java.util.ArrayList; 
class ChicagoPizzaStore extends PizzaStore 
{Pizza createPizza(String item) 
{if (item.equals("cheese")) 
{return new ChicagoStyleCheesePizza(); 
} 
else if (item.equals("veggie")) 
{return new ChicagoStyleVeggiePizza(); 
} 
else if (item.equals("clam")) 
{return new ChicagoStyleClamPizza(); 
} 
else if (item.equals("pepperoni")) 
{return new ChicagoStylePepperoniPizza(); 
} 
else return null; 
}} 
class ChicagoStyleCheesePizza extends Pizza 
{public ChicagoStyleCheesePizza() 
{ 
name = "Chicago Style Deep Dish Cheese Pizza"; 
dough = "Extra Thick Crust Dough"; 
sauce = "Plum Tomato Sauce"; 
toppings.add("Shredded Mozzarella Cheese"); 
}

void cut() 
{System.out.println("Cutting the pizza into square slices"); 
}} 
class ChicagoStyleClamPizza extends Pizza 
{public ChicagoStyleClamPizza() 
{ 
name = "Chicago Style Clam Pizza"; 
dough = "Extra Thick Crust Dough"; 
sauce = "Plum Tomato Sauce"; 
toppings.add("Shredded Mozzarella Cheese"); 
toppings.add("Frozen Clams from Chesapeake Bay"); 
} 
void cut() 
{System.out.println("Cutting the pizza into square slices"); 
}} 
class ChicagoStylePepperoniPizza extends Pizza 
{public ChicagoStylePepperoniPizza() 
{ 
name = "Chicago Style Pepperoni Pizza"; 
dough = "Extra Thick Crust Dough"; 
sauce = "Plum Tomato Sauce"; 
toppings.add("Shredded Mozzarella Cheese"); 
toppings.add("Black Olives"); 
toppings.add("Spinach"); 
toppings.add("Eggplant"); 
toppings.add("Sliced Pepperoni"); 
} 
void cut() 
{System.out.println("Cutting the pizza into square slices"); 
}} 
class ChicagoStyleVeggiePizza extends Pizza 
{public ChicagoStyleVeggiePizza() 
{name = "Chicago Deep Dish Veggie Pizza"; 
dough = "Extra Thick Crust Dough"; 
sauce = "Plum Tomato Sauce"; 
toppings.add("Shredded Mozzarella Cheese"); 
toppings.add("Black Olives"); 
toppings.add("Spinach"); 
toppings.add("Eggplant"); 
} 
void cut() 
{System.out.println("Cutting the pizza into square slices"); 
}} 
class DependentPizzaStore 
{public Pizza createPizza(String style, String type) 
{ Pizza pizza = null; 
if (style.equals("NY")) 
{if (type.equals("cheese")) 
{pizza = new NYStyleCheesePizza(); 
} 
else if (type.equals("veggie")) 
{pizza = new NYStyleVeggiePizza(); 
} 
else if (type.equals("clam")) 
{pizza = new NYStyleClamPizza(); 
} 
else if (type.equals("pepperoni")) 
{pizza = new NYStylePepperoniPizza(); 
}} 
else if (style.equals("Chicago")) 
{if (type.equals("cheese")) 
{pizza = new ChicagoStyleCheesePizza(); 
} 
else if (type.equals("veggie")) 
{pizza = new ChicagoStyleVeggiePizza(); 
} 
else if (type.equals("clam")) 
{pizza = new ChicagoStyleClamPizza(); 
} 
else if (type.equals("pepperoni")) 
{pizza = new ChicagoStylePepperoniPizza(); 
}} 
else 
{System.out.println("Error: invalid type of pizza"); 
return null; 
} 
pizza.prepare(); 
pizza.bake(); 
pizza.cut(); 
pizza.box(); 
return pizza; 
}} 
class NYPizzaStore extends PizzaStore 
{Pizza createPizza(String item) 
{if (item.equals("cheese")) 
{return new NYStyleCheesePizza(); 
} 
else if (item.equals("veggie")) 
{return new NYStyleVeggiePizza(); 
} 
else if (item.equals("clam")) 
{return new NYStyleClamPizza(); 
} 
else if (item.equals("pepperoni")) 
{return new NYStylePepperoniPizza(); 
} 
else return null; 
}} 
class NYStyleCheesePizza extends Pizza 
{public NYStyleCheesePizza() 
{ 
name = "NY Style Sauce and Cheese Pizza"; 
dough = "Thin Crust Dough"; 
sauce = "Marinara Sauce"; 
toppings.add("Grated Reggiano Cheese"); 
}} 
class NYStyleClamPizza extends Pizza 
{public NYStyleClamPizza() 
{ 
name = "NY Style Clam Pizza"; 
dough = "Thin Crust Dough"; 
sauce = "Marinara Sauce"; 
toppings.add("Grated Reggiano Cheese"); 
toppings.add("Fresh Clams from Long Island Sound"); 
}} 
class NYStylePepperoniPizza extends Pizza 
{public NYStylePepperoniPizza() 
{ 
name = "NY Style Pepperoni Pizza"; 
dough = "Thin Crust Dough"; 
sauce = "Marinara Sauce"; 
toppings.add("Grated Reggiano Cheese"); 
toppings.add("Sliced Pepperoni"); 
toppings.add("Garlic"); 
toppings.add("Onion"); 
toppings.add("Mushrooms"); 
toppings.add("Red Pepper"); 
}} 
class NYStyleVeggiePizza extends Pizza 
{public NYStyleVeggiePizza() 
{ 
name = "NY Style Veggie Pizza"; 
dough = "Thin Crust Dough"; 
sauce = "Marinara Sauce"; 
toppings.add("Grated Reggiano Cheese"); 
toppings.add("Garlic"); 
toppings.add("Onion"); 
toppings.add("Mushrooms"); 
toppings.add("Red Pepper"); 
}} 
abstract class Pizza 
{ 
String name; 
String dough; 
String sauce; 
ArrayList toppings = new ArrayList(); 
void prepare() 
{ 
System.out.println("Preparing " + name); 
System.out.println("Tossing dough..."); 
System.out.println("Adding sauce..."); 
System.out.println("Adding toppings: "); 
for (int i = 0; i < toppings.size(); i++) 
{System.out.println(" " + toppings.get(i)); 
}} 
void bake() 
{System.out.println("Bake for 25 minutes at 350"); 
} 
void cut() 
{System.out.println("Cutting the pizza into diagonal slices"); 
} 
void box() 
{System.out.println("Place pizza in official PizzaStore box"); 
} 
public String getName() 
{return name; 
} 
public String toString() 
{StringBuffer display = new StringBuffer(); 
display.append("---- " + name + " ----\n"); 
display.append(dough + "\n"); 
display.append(sauce + "\n"); 
for (int i = 0; i < toppings.size(); i++) 
{display.append((String )toppings.get(i) + "\n"); 
} 
return display.toString(); 
}} 
abstract class PizzaStore 
{abstract Pizza createPizza(String item); 
public Pizza orderPizza(String type) 
{Pizza pizza = createPizza(type); 
System.out.println("--- Making a " + pizza.getName() + " ---"); 
pizza.prepare(); 
pizza.bake(); 
pizza.cut(); 
pizza.box(); 
return pizza; 
}
}





public class slip4_19_30
{public static void main(String[] args) 
{ 
PizzaStore nyStore = new NYPizzaStore(); 
PizzaStore chicagoStore = new ChicagoPizzaStore(); 
Pizza pizza = nyStore.orderPizza("cheese"); 
System.out.println("Ethan ordered a " + pizza.getName() + "\n"); 
pizza = chicagoStore.orderPizza("cheese"); 
System.out.println("Joel ordered a " + pizza.getName() + "\n"); 
pizza = nyStore.orderPizza("clam"); 
System.out.println("Ethan ordered a " + pizza.getName() + "\n"); 
pizza = chicagoStore.orderPizza("clam"); 
System.out.println("Joel ordered a " + pizza.getName() + "\n"); 
pizza = nyStore.orderPizza("pepperoni"); 
System.out.println("Ethan ordered a " + pizza.getName() + "\n"); 
pizza = chicagoStore.orderPizza("pepperoni"); 
System.out.println("Joel ordered a " + pizza.getName() + "\n"); 
pizza = nyStore.orderPizza("veggie"); 
System.out.println("Ethan ordered a " + pizza.getName() + "\n"); 
pizza = chicagoStore.orderPizza("veggie"); 
System.out.println("Joel ordered a " + pizza.getName() + "\n"); 
}}

Q.2.	Write a python program to implement Linear SVM.	[20 M]
import pandas as pd

df = pd.read_csv('data.csv')
df.sample(5)

from sklearn.preprocessing import LabelEncoder
label = LabelEncoder()
df['Species_num'] = label.fit_transform(df['Species'])
df.sample(5)

df0=df[df.Species_num==0]
df1=df[df.Species_num==1]
df2=df[df.Species_num==2]

from matplotlib import pyplot as plt
plt.scatter(df0['SepalLengthCm'],df0['SepalWidthCm'],color='green',marker='+')
plt.scatter(df1['SepalLengthCm'],df1['SepalWidthCm'],color='red',marker='+')

input = df.drop(['Species','Species_num'],axis='columns')
input.sample(5)

target = df['Species_num']
target.sample(5)

from sklearn.model_selection import train_test_split
x_train,x_test,y_train,y_test = train_test_split(input,target,test_size=0.2)
len(y_test)

from sklearn.svm import SVC
model = SVC(kernel='linear')
model.fit(x_train,y_train)

model.score(x_test,y_test)

x_test[:10]

y_test[:10]

model.predict(x_test[:10])

***my code***

import pandas as pd
import numpy as np
from sklearn import svm
from sklearn import svm, datasets
import matplotlib.pyplot as plt

df = datasets.load_iris()
df


# df = pd.read_csv('iris.csv')
# df

X = df.data[:, :2]
y = df.target

x_min, x_max = X[:, 0].min() - 1, X[:, 0].max() + 1
y_min, y_max = X[:, 1].min() - 1, X[:, 1].max() + 1
h = (x_max / x_min)/100
xx, yy = np.meshgrid(np.arange(x_min, x_max, h), np.arange(y_min, y_max, h))
X_plot = np.c_[xx.ravel(), yy.ravel()]
C = 1.0

Svc_classifier = svm.SVC(kernel='linear', C=C).fit(X, y)
Z = Svc_classifier.predict(X_plot)
Z = Z.reshape(xx.shape)
plt.figure(figsize=(15, 5))
plt.subplot(121)
plt.contourf(xx, yy, Z, cmap=plt.cm.tab10, alpha=0.3)
plt.scatter(X[:, 0], X[:, 1], c=y, cmap=plt.cm.Set1)
plt.xlabel('Sepal length')
plt.ylabel('Sepal width')
plt.xlim(xx.min(), xx.max())
plt.title('Support Vector Classifier with linear kernel')


Svc_classifier = svm.SVC(kernel = 'rbf', gamma ='auto',C = C).fit(X, y)
Z = Svc_classifier.predict(X_plot)
Z = Z.reshape(xx.shape)
plt.figure(figsize=(15, 5))
plt.subplot(121)
plt.contourf(xx, yy, Z, cmap = plt.cm.tab10, alpha = 0.3)
plt.scatter(X[:, 0], X[:, 1], c = y, cmap = plt.cm.Set1)
plt.xlabel('Sepal length')
plt.ylabel('Sepal width')
plt.xlim(xx.min(), xx.max())
plt.title('Support Vector Classifier with rbf kernel')


Q.3	Implement Login System using Django.	[20 M]


***my code***

root folder is assi1 in 2 folders
1) assi1

urls.py

from django.contrib import admin
from django.urls import path
from my_app.views import index


urlpatterns = [
    path('', index, name='index'),

]




2) my_app (my_app is app folder) in my_app folder present templates folder


apps.py
from django.apps import AppConfig


class MyAppConfig(AppConfig):
    default_auto_field = 'django.db.models.BigAutoField'
    name = 'my_app'





views.py
from django.shortcuts import render

# Create your views here.
def index(request):
    return render(request, 'index.html')
 
 1)template ( in my_app folder present templates folder)

 index.html

<html>
<head>
<title>User login page</title>
<head>
    <script>
          function f(){
                var validRegex =/^[a-zA-Z0-9.!#$%&'+/=?^_`{|}~-]+@[a-zA-Z0-9-]+(?:\.[a-zA-Z0-9-]+)$/;
                var email=document.getElementById("email").value;
                if(!validRegex.test(email))
                    alert("Invalid Email!");
                 else
                    alert("submitted succesfully");
                return false;
         }
    </script>
</head>
<body>
    <form name="login" onsubmit="f()">
    <h1>Login here</h1>
    email id:<input type="text" id="email"/><br><br>
    password:<input type="password" id="password"><br><br>
    <input type="submit" id="submit" value="submit">
    </form>
</body>
</html>


