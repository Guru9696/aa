Q.1	Write a Java Program to implement I/O Decorator for converting uppercase letters to lower case letters.	[20 M]

import java.io.*;
import java.util.*;

class LowerCaseInputStream extends FilterInputStream
{
        public LowerCaseInputStream(InputStream in)
        {
                super(in);
        }
        public int read() throws IOException
        {
                int c=super.read();
                return (c==-1?c:Character.toLowerCase((char)c));
        }
        public int read(byte[] b,int offset,int len) throws IOException
        {
                int result =super.read(b,offset,len);
                for (int i=offset;i<offset+result;i++)
                {
                        b[i]=(byte)Character.toLowerCase((char)b[i]);
                }
                return result;
        }
}
public class slip1_20
{
        public static void main(String[] args) throws IOException
        {
        int c;
        try
        {

InputStream in =new LowerCaseInputStream(new BufferedInputStream(new 	    	        FileInputStream("a.txt")));
                while((c = in.read()) >= 0)
                {
                        System.out.print((char)c);
                       
                }
                System.out.println();
                in.close();
        }
        catch(IOException e)
        {
                e.printStackTrace();
        }
     }
}

Q.2.	Write a python program to implement Decision Tree whether or not to play Tennis.
[20 M]

***sir code***
import pandas as pd
from sklearn.tree import DecisionTreeClassifier
from sklearn.preprocessing import LabelEncoder

data = pd.read_csv("play_tennis.csv")
data.sample(5)

label_encoder = LabelEncoder()
data['outlook'] = label_encoder.fit_transform(data['outlook'])
data['temp'] = label_encoder.fit_transform(data['temp'])
data['humidity'] = label_encoder.fit_transform(data['humidity'])
data['wind'] = label_encoder.fit_transform(data['wind'])
data['play'] = label_encoder.fit_transform(data['play'])

data
x = data[['outlook', 'temp', 'humidity', 'wind']]
y = data['play']

clf = DecisionTreeClassifier()

clf.fit(x, y)

new_day = [1, 2, 0, 1] 
prediction = clf.predict([new_day])
prediction

predicted_play = label_encoder.inverse_transform(prediction)

print("Prediction:", predicted_play[0])

*** my code***
# Load libraries
import numpy as np
import pandas as pd
from sklearn import metrics #Import scikit-learn metrics module for accuracy calculation

df=pd.read_csv("Play Tennis.csv")
value=['Outlook','Temprature','Humidity','Wind']
df

len(df)           #Dataset Lenght

df.shape  #To see the number of rows and columns in our dataset:

df.head()         #To inspect the first five records of the dataset:

df.tail()         #To inspect the last five records of the dataset:

df.describe()     #To see statistical details of the dataset:

#machine learning algorithms can only learn from numbers (int, float, doubles .. )
#so let us encode it to int
from sklearn import preprocessing
string_to_int= preprocessing.LabelEncoder()                     #encode your data
df=df.apply(string_to_int.fit_transform) #fit and transform it
df

#To divide our data into attribute set and Label:
feature_cols = ['Outlook','Temprature','Humidity','Wind']
X = df[feature_cols ]                               #contains the attribute 
y = df.Play_Tennis                                  #contains the label
#To divide our data into training and test sets:
from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.30) 

# perform training 
from sklearn.tree import DecisionTreeClassifier                             # import the classifier
classifier =DecisionTreeClassifier(criterion="entropy", random_state=100)     # create a classifier object
classifier.fit(X_train, y_train)                                              # fit the classifier with X and Y data or 
DecisionTreeClassifier(class_weight=None, criterion='entropy', max_depth=None,
            max_features=None, max_leaf_nodes=None,
            min_impurity_decrease=0.0, min_impurity_split=None,
            min_samples_leaf=1, min_samples_split=2,
            min_weight_fraction_leaf=0.0, presort=False, random_state=100,
            splitter='best')
#Predict the response for test dataset
y_pred= classifier.predict(X_test)  
# Model Accuracy, how often is the classifier correct?
from sklearn.metrics import accuracy_score
print("Accuracy:",metrics.accuracy_score(y_test, y_pred))
Accuracy: 0.4
Now let's compare some of our predicted values with the actual values and see how accurate we were:
data_p=pd.DataFrame({'Actual':y_test, 'Predicted':y_pred})  
data_p

from sklearn.metrics import classification_report, confusion_matrix  
print(confusion_matrix(y_test, y_pred))  
print(classification_report(y_test, y_pred)) 

from sklearn.tree import export_graphviz
from sklearn.externals.six import StringIO
from IPython.display import Image
import pydotplus
dot_data = StringIO()
export_graphviz(classifier, out_file=dot_data,
filled=True, rounded=True,
special_characters=True,feature_names =value,class_names=['0','1'])
graph = pydotplus.graph_from_dot_data(dot_data.getvalue())
graph.write_png('Play Tennis.png')
Image(graph.create_png())


Q.3	Develop a basic poll application (app).It should consist of two parts:

a)	A public site in which user can pick their favourite programming language and vote.

b)	An admin site that lets you add, change and delete programming languages.[20 M]



***sir code***


python manage.py migration
python manage.py migrate
python manage.py createsuperuser
python manage.py runserver

root folder is que4 in 2 folders
1) que4

urls.py
from django.contrib import admin
from django.urls import path , include

urlpatterns = [
    path('admin/', admin.site.urls),
    path('', include('myapp.urls')),
]





2) myapp (myapp is app folder) two folder

admin.py
from django.contrib import admin

from .models import ProgrammingLanguage, Vote

admin.site.register(ProgrammingLanguage)
admin.site.register(Vote)

forms.py
from django import forms
from .models import ProgrammingLanguage

class VoteForm(forms.ModelForm):
    class Meta:
        model = ProgrammingLanguage
        fields = ['name']
        labels = {
            'name': 'Number',  # Change the label for the 'name' field to 'Number'
        }
models.py
from django.db import models

class ProgrammingLanguage(models.Model):
    name = models.CharField(max_length=100)

class Vote(models.Model):
    language = models.ForeignKey(ProgrammingLanguage, on_delete=models.CASCADE)



apps.py
from django.apps import AppConfig

class MyappConfig(AppConfig):
    default_auto_field = 'django.db.models.BigAutoField'
    name = 'myapp'


urls.py
from django.urls import path
from . import views

urlpatterns = [
    path('vote/', views.vote, name='vote'),
    path('results/', views.results, name='results'),
]



views.py

from django.shortcuts import render, redirect
from .models import ProgrammingLanguage, Vote
from .forms import VoteForm

def vote(request):
    if request.method == 'POST':
        form = VoteForm(request.POST)
        if form.is_valid():
            language_id = form.cleaned_data['name']
            programming_language = ProgrammingLanguage.objects.get(pk=language_id)
            Vote.objects.create(language=programming_language)
            return redirect('results')
    else:
        form = VoteForm()

    return render(request, 'myapp/vote.html', {'form': form})

def results(request):
    languages = ProgrammingLanguage.objects.all()
    return render(request, 'myapp/results.html', {'languages': languages})



1)migration is present in myapp

0001_initial.py
# Generated by Django 4.1.5 on 2023-10-27 18:07

from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='ProgrammingLanguage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
            ],
        ),
        migrations.CreateModel(
            name='Vote',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('language', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='myapp.programminglanguage')),
            ],
        ),
    ]

2) template (this folder present in myapp folder)
1)myapp this folder in template folder

results.html

<!DOCTYPE html>
<html>
<head>
    <title>Poll Results</title>
</head>
<body>
    <h1>Poll Results</h1>
    <ul>
        {% for language in languages %}
            <li>{{ language.name }} - Votes: {{ language.vote_set.count }}</li>
        {% endfor %}
    </ul>
    <a href="{% url 'vote' %}">Back to Voting</a>
</body>
</html>

vote.html

<!DOCTYPE html>
<html>
<head>
    <title>Vote for Your Favorite Programming Language</title>
</head>
<body>
    <h1>Vote for Your Favorite Programming Language</h1>
    <h2>1. Python </h2>
    <h2>2. C++ </h2>
    <h2>3. Java </h2>
    <form method="post">
        {% csrf_token %}
        {{ form.as_p }}
        <input type="submit" value="Vote">
    </form>
</body>
</html>
