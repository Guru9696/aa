
Q.1	Design simple HR Application using Spring Framework	[20 M]
package hrapplication.controller;

import java.util.List;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import hrapplication.model.HrApplicationBean;
import hrapplication.model.LoginBean;
import hrapplication.service.HrApplicationService;
import hrapplication.service.LoginService;


@Controller
@RequestMapping("/hrApplications")
public class HrApplicationController {

	@Autowired
	private HrApplicationService hrApplicationService;
	

	@RequestMapping("/secure")
	public String defaultPage(Model model) {
		List<HrApplicationBean> hrApplications = hrApplicationService.getAllHrApplication();
		model.addAttribute("hrApplications", hrApplications);
		return "hrApplicationSecure";
	}
	
	@RequestMapping("/all")
	public String allHrApplications(Model model) {
			
		List<HrApplicationBean> hrApplications = hrApplicationService.getAllHrApplication();
		model.addAttribute("hrApplications", hrApplications);
		return "hrApplicationList";
	}

	@RequestMapping("/hrApplication")
	public String getHrApplicationById(@RequestParam(name = "hrApplicationId") int hrApplicationId, Model model) {
		HrApplicationBean hrApplication = hrApplicationService.getHrApplicationById(hrApplicationId);
		model.addAttribute("hrApplication", hrApplication);
		return "hrApplicationDetail";
	}
	
	@RequestMapping(value = "/add", method = RequestMethod.GET)
	public String addHrApplication(@ModelAttribute("newHrApplication") HrApplicationBean hrApplicationBean,BindingResult bindingResult) {
	
		return "hrApplicationAdd";
	}
	
	@RequestMapping("/deleteHrApplication{hrApplicationId}")
	public String deleteHrApplication(@RequestParam("hrApplicationId") int hrApplicationId, Model model) {
		hrApplicationService.deleteHrApplication(hrApplicationId);
		return "hrApplicationList";
	}
		
	
	@RequestMapping(value = "/save", method = RequestMethod.POST)
	public String saveHrApplication(@ModelAttribute("newHrApplication") HrApplicationBean hrApplicationBean,BindingResult bindingResult) {
	
		hrApplicationService.addHrApplication(hrApplicationBean);
		return "hrApplicationList";
	}
	
}

****appp***
package hrapplication.controller;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.SessionAttribute;
import org.springframework.web.servlet.ModelAndView;
import hrapplication.model.ApplicantBean;
import hrapplication.model.HrApplicationBean;
import hrapplication.service.ApplicantService;
import hrapplication.service.HrApplicationService;

@Controller
@RequestMapping("/applicants")
public class ApplicantController {

	@Autowired
	private ApplicantService applicantService;
	
	@Autowired
	private HrApplicationService hrApplicationService;
	
	@RequestMapping(method = RequestMethod.GET)
	public ModelAndView addApplicant(@ModelAttribute("newApplicant") ApplicantBean applicantBean,BindingResult bindingResult) {
		Map<String, Object> model = new HashMap<String,Object>();
		model.put("hrApplications",  hrApplicationService.getAllHrApplication());
		return new ModelAndView("applicantAdd",model);
	}
    
	@RequestMapping(value = "/save", method = RequestMethod.POST)
	public String saveApplicant(@ModelAttribute("newApplicant") ApplicantBean applicantBean,BindingResult bindingResult, HrApplicationBean hrApplicationBean){

		applicantService.save(applicantBean);
		applicantService.update(applicantBean,hrApplicationService.getAllHrApplicationId(hrApplicationBean));
		
		return "redirect:/hrApplications";
	}
	
	
	


}


***app***
package hrapplication.controller;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.servlet.ModelAndView;

import hrapplication.model.LoginBean;
import hrapplication.service.LoginService;

@Controller
public class LoginController {

	@Autowired
	private LoginService loginService;
	
	@RequestMapping(method = RequestMethod.GET)
	public String defaultPage(LoginBean loginBean,BindingResult bindingResult) {
		//start project
			return "index";
	}
	
	@RequestMapping(value="/login",method = RequestMethod.GET)
	public String addLogin(LoginBean loginBean,BindingResult bindingResult) {
		loginService.addLogin(loginBean);
		return "login";
	}
	
	 @RequestMapping("/login")  
	   public ModelAndView login(HttpServletRequest request,HttpServletResponse response,LoginBean loginBean,BindingResult bindingResult) {
		  loginService.addLogin(loginBean);
		  String loginEmail=request.getParameter("loginEmail");  
		  String loginPassword=request.getParameter("loginPassword");
	      String message;
	      if(loginEmail != null && 
	    		  !loginEmail.equals("") 
	    		  && loginEmail.equals(loginBean.getLoginEmail()) && 
	    		  loginPassword != null && 
	    		  !loginPassword.equals("") && 
	    		  loginPassword.equals(loginBean.getLoginPassword())){
	    	  message = "Welcome " +loginEmail + ".";
		      return new ModelAndView("hrApplicationList");  
	 
	      }else{
	    	  message = "Wrong email or password.";
	    	  return new ModelAndView("login", 
	    			  "message", message);
	      }
	   }
	
	
}


Q 2.	Write a python program to implement Linear SVM.	[20 M]
import pandas as pd

df = pd.read_csv('data.csv')
df.sample(5)

from sklearn.preprocessing import LabelEncoder
label = LabelEncoder()
df['Species_num'] = label.fit_transform(df['Species'])
df.sample(5)

df0=df[df.Species_num==0]
df1=df[df.Species_num==1]
df2=df[df.Species_num==2]

from matplotlib import pyplot as plt
plt.scatter(df0['SepalLengthCm'],df0['SepalWidthCm'],color='green',marker='+')
plt.scatter(df1['SepalLengthCm'],df1['SepalWidthCm'],color='red',marker='+')

input = df.drop(['Species','Species_num'],axis='columns')
input.sample(5)

target = df['Species_num']
target.sample(5)

from sklearn.model_selection import train_test_split
x_train,x_test,y_train,y_test = train_test_split(input,target,test_size=0.2)
len(y_test)

from sklearn.svm import SVC
model = SVC(kernel='linear')
model.fit(x_train,y_train)

model.score(x_test,y_test)

x_test[:10]

y_test[:10]

model.predict(x_test[:10])

***my code***

import pandas as pd
import numpy as np
from sklearn import svm
from sklearn import svm, datasets
import matplotlib.pyplot as plt

df = datasets.load_iris()
df


# df = pd.read_csv('iris.csv')
# df

X = df.data[:, :2]
y = df.target

x_min, x_max = X[:, 0].min() - 1, X[:, 0].max() + 1
y_min, y_max = X[:, 1].min() - 1, X[:, 1].max() + 1
h = (x_max / x_min)/100
xx, yy = np.meshgrid(np.arange(x_min, x_max, h), np.arange(y_min, y_max, h))
X_plot = np.c_[xx.ravel(), yy.ravel()]
C = 1.0

Svc_classifier = svm.SVC(kernel='linear', C=C).fit(X, y)
Z = Svc_classifier.predict(X_plot)
Z = Z.reshape(xx.shape)
plt.figure(figsize=(15, 5))
plt.subplot(121)
plt.contourf(xx, yy, Z, cmap=plt.cm.tab10, alpha=0.3)
plt.scatter(X[:, 0], X[:, 1], c=y, cmap=plt.cm.Set1)
plt.xlabel('Sepal length')
plt.ylabel('Sepal width')
plt.xlim(xx.min(), xx.max())
plt.title('Support Vector Classifier with linear kernel')


Svc_classifier = svm.SVC(kernel = 'rbf', gamma ='auto',C = C).fit(X, y)
Z = Svc_classifier.predict(X_plot)
Z = Z.reshape(xx.shape)
plt.figure(figsize=(15, 5))
plt.subplot(121)
plt.contourf(xx, yy, Z, cmap = plt.cm.tab10, alpha = 0.3)
plt.scatter(X[:, 0], X[:, 1], c = y, cmap = plt.cm.Set1)
plt.xlabel('Sepal length')
plt.ylabel('Sepal width')
plt.xlim(xx.min(), xx.max())
plt.title('Support Vector Classifier with rbf kernel')

Q. 3	Create a node.js file that Select all records from the "customers" table, and display the result object on console.	[20 M]
var mysql = require('mysql');

var con = mysql.createConnection({
    host: "localhost",

    user: "root",
  
    //password: "", /*pc xampp database or localhost*/
   //password: "Gaurav@123", /* pc commond line mysql or localhost*/
   password: "raj@123", /* mobile xampp or local host*/

});

// use the  query to connect a localhost
con.connect(function(err) {
  if (err) throw err;
  console.log("Connected to localhost!");
 
  });


 // use the query to create a Database.
  let databaseName = "lab_pro";
  
  let createQuery = `CREATE DATABASE ${databaseName}`;

 
  con.query(createQuery, (err) => {
      if(err==1) throw  "Couldn't create";

      console.log(databaseName+" Database Created Successfully !");
  // use the query to Use a Database.
      let useQuery = `USE ${databaseName}`;
      con.query(useQuery, (error) => {
          if(error) throw error;

          console.log("Using Database"+databaseName);
        })
  // Create a new Table
    let TableName = "customers";
    let table_query = `CREATE TABLE ${TableName} (name VARCHAR(255), address VARCHAR(255))`;
  
    con.query(table_query, (err) => {
      if(err==1) throw "Couldn't create";
      console.log(TableName+" Table created");
    });

//Insert Data in Table

  let Insert_query = `INSERT INTO ${TableName} (name, address) VALUES ?;`;
  
// multiple Values to be inserted
    let values = [
        ['Amit', 'Yellow Park'],
        ['Rishi', 'Park 38'],
        ['Akash', 'Central st 954'],
        ['Pratik', 'Road 989'],
        ['Mangesh', 'Sideway']
    ];
  
  // Executing the query show row are inserted in the table
    con.query(Insert_query, [values], (err) => {
    
        if (err==1) throw "Couldn't create";
        console.log("All Rows Inserted");
    });

//select query to show table data
    let show_student = `SELECT * FROM ${TableName}`
    con.query(show_student, function (err, result, fields) {

        if (err) throw err;
    
        console.log(result);
    
      });
      
});