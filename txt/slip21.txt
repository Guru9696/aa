
Q.1	Write a Java Program to implement command pattern to test Remote Control
[20 M]
// Command interface
interface Command {
    void execute();
}

// Concrete Command
class LightOnCommand implements Command {
    private Light light;

    public LightOnCommand(Light light) {
        this.light = light;
    }

    public void execute() {
        light.turnOn();
    }
}

// Receiver
class Light {
    public void turnOn() {
        System.out.println("Light is ON");
    }

    public void turnOff() {
        System.out.println("Light is OFF");
    }
}

// Concrete Command
class TVOnCommand implements Command {
    private TV tv;

    public TVOnCommand(TV tv) {
        this.tv = tv;
    }

    public void execute() {
        tv.turnOn();
    }
}

// Receiver
class TV {
    public void turnOn() {
        System.out.println("TV is ON");
    }

    public void turnOff() {
        System.out.println("TV is OFF");
    }
}

// Remote Control
class RemoteControl {
    private Command command;

    public void setCommand(Command command) {
        this.command = command;
    }

    public void pressButton() {
        command.execute();
    }
}

public class slip6_21 {
    public static void main(String[] args) {
        // Create the receivers
        Light livingRoomLight = new Light();
        TV livingRoomTV = new TV();

        // Create the concrete commands
        Command lightOnCommand = new LightOnCommand(livingRoomLight);
        Command tvOnCommand = new TVOnCommand(livingRoomTV);

        // Create the remote control
        RemoteControl remote = new RemoteControl();

        // Set the commands for the remote control
        remote.setCommand(lightOnCommand);
        remote.pressButton(); // Turns on the light

        remote.setCommand(tvOnCommand);
        remote.pressButton(); // Turns on the TV
    }
}



Q.2.	Write a python program to implement Linear SVM.	[20 M]
import pandas as pd

df = pd.read_csv('data.csv')
df.sample(5)

from sklearn.preprocessing import LabelEncoder
label = LabelEncoder()
df['Species_num'] = label.fit_transform(df['Species'])
df.sample(5)

df0=df[df.Species_num==0]
df1=df[df.Species_num==1]
df2=df[df.Species_num==2]

from matplotlib import pyplot as plt
plt.scatter(df0['SepalLengthCm'],df0['SepalWidthCm'],color='green',marker='+')
plt.scatter(df1['SepalLengthCm'],df1['SepalWidthCm'],color='red',marker='+')

input = df.drop(['Species','Species_num'],axis='columns')
input.sample(5)

target = df['Species_num']
target.sample(5)

from sklearn.model_selection import train_test_split
x_train,x_test,y_train,y_test = train_test_split(input,target,test_size=0.2)
len(y_test)

from sklearn.svm import SVC
model = SVC(kernel='linear')
model.fit(x_train,y_train)

model.score(x_test,y_test)

x_test[:10]

y_test[:10]

model.predict(x_test[:10])

***my code***

import pandas as pd
import numpy as np
from sklearn import svm
from sklearn import svm, datasets
import matplotlib.pyplot as plt

df = datasets.load_iris()
df


# df = pd.read_csv('iris.csv')
# df

X = df.data[:, :2]
y = df.target

x_min, x_max = X[:, 0].min() - 1, X[:, 0].max() + 1
y_min, y_max = X[:, 1].min() - 1, X[:, 1].max() + 1
h = (x_max / x_min)/100
xx, yy = np.meshgrid(np.arange(x_min, x_max, h), np.arange(y_min, y_max, h))
X_plot = np.c_[xx.ravel(), yy.ravel()]
C = 1.0

Svc_classifier = svm.SVC(kernel='linear', C=C).fit(X, y)
Z = Svc_classifier.predict(X_plot)
Z = Z.reshape(xx.shape)
plt.figure(figsize=(15, 5))
plt.subplot(121)
plt.contourf(xx, yy, Z, cmap=plt.cm.tab10, alpha=0.3)
plt.scatter(X[:, 0], X[:, 1], c=y, cmap=plt.cm.Set1)
plt.xlabel('Sepal length')
plt.ylabel('Sepal width')
plt.xlim(xx.min(), xx.max())
plt.title('Support Vector Classifier with linear kernel')


Svc_classifier = svm.SVC(kernel = 'rbf', gamma ='auto',C = C).fit(X, y)
Z = Svc_classifier.predict(X_plot)
Z = Z.reshape(xx.shape)
plt.figure(figsize=(15, 5))
plt.subplot(121)
plt.contourf(xx, yy, Z, cmap = plt.cm.tab10, alpha = 0.3)
plt.scatter(X[:, 0], X[:, 1], c = y, cmap = plt.cm.Set1)
plt.xlabel('Sepal length')
plt.ylabel('Sepal width')
plt.xlim(xx.min(), xx.max())
plt.title('Support Vector Classifier with rbf kernel')


Q.3		Design a Django application: A public site in which user can pick their favourite programming language and vote.	[20 M]



***sir code***


python manage.py migration
python manage.py migrate
python manage.py createsuperuser
python manage.py runserver

root folder is que4 in 2 folders
1) que4

urls.py
from django.contrib import admin
from django.urls import path , include

urlpatterns = [
    path('admin/', admin.site.urls),
    path('', include('myapp.urls')),
]





2) myapp (myapp is app folder) two folder

admin.py
from django.contrib import admin

from .models import ProgrammingLanguage, Vote

admin.site.register(ProgrammingLanguage)
admin.site.register(Vote)

forms.py
from django import forms
from .models import ProgrammingLanguage

class VoteForm(forms.ModelForm):
    class Meta:
        model = ProgrammingLanguage
        fields = ['name']
        labels = {
            'name': 'Number',  # Change the label for the 'name' field to 'Number'
        }
models.py
from django.db import models

class ProgrammingLanguage(models.Model):
    name = models.CharField(max_length=100)

class Vote(models.Model):
    language = models.ForeignKey(ProgrammingLanguage, on_delete=models.CASCADE)



apps.py
from django.apps import AppConfig

class MyappConfig(AppConfig):
    default_auto_field = 'django.db.models.BigAutoField'
    name = 'myapp'


urls.py
from django.urls import path
from . import views

urlpatterns = [
    path('vote/', views.vote, name='vote'),
    path('results/', views.results, name='results'),
]



views.py

from django.shortcuts import render, redirect
from .models import ProgrammingLanguage, Vote
from .forms import VoteForm

def vote(request):
    if request.method == 'POST':
        form = VoteForm(request.POST)
        if form.is_valid():
            language_id = form.cleaned_data['name']
            programming_language = ProgrammingLanguage.objects.get(pk=language_id)
            Vote.objects.create(language=programming_language)
            return redirect('results')
    else:
        form = VoteForm()

    return render(request, 'myapp/vote.html', {'form': form})

def results(request):
    languages = ProgrammingLanguage.objects.all()
    return render(request, 'myapp/results.html', {'languages': languages})



1)migration is present in myapp

0001_initial.py
# Generated by Django 4.1.5 on 2023-10-27 18:07

from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='ProgrammingLanguage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
            ],
        ),
        migrations.CreateModel(
            name='Vote',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('language', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='myapp.programminglanguage')),
            ],
        ),
    ]

2) template (this folder present in myapp folder)
1)myapp this folder in template folder

results.html

<!DOCTYPE html>
<html>
<head>
    <title>Poll Results</title>
</head>
<body>
    <h1>Poll Results</h1>
    <ul>
        {% for language in languages %}
            <li>{{ language.name }} - Votes: {{ language.vote_set.count }}</li>
        {% endfor %}
    </ul>
    <a href="{% url 'vote' %}">Back to Voting</a>
</body>
</html>

vote.html

<!DOCTYPE html>
<html>
<head>
    <title>Vote for Your Favorite Programming Language</title>
</head>
<body>
    <h1>Vote for Your Favorite Programming Language</h1>
    <h2>1. Python </h2>
    <h2>2. C++ </h2>
    <h2>3. Java </h2>
    <form method="post">
        {% csrf_token %}
        {{ form.as_p }}
        <input type="submit" value="Vote">
    </form>
</body>
</html>