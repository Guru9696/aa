
Q.1	Write a java program to implement Adapter pattern to design Heart Model to Beat Model	[20 M]
// Heart Model
class HeartModel {
    private int heartRate;

    public int getHeartRate() {
        return heartRate;
    }

    public void setHeartRate(int heartRate) {
        this.heartRate = heartRate;
        System.out.println("Heart rate set to " + heartRate + " bpm");
    }
}

// Beat Model
interface BeatModel {
    int getBeatsPerMinute();
    void setBeatsPerMinute(int beatsPerMinute);
    void registerObserver(BeatObserver observer);
    void removeObserver(BeatObserver observer);
    void notifyObservers();
}

// Adapter class to adapt HeartModel to BeatModel
class HeartAdapter implements BeatModel {
    private HeartModel heartModel;
    private int beatsPerMinute;

    public HeartAdapter(HeartModel heartModel) {
        this.heartModel = heartModel;
        this.beatsPerMinute = 0;
    }

    @Override
    public int getBeatsPerMinute() {
        return beatsPerMinute;
    }

    @Override
    public void setBeatsPerMinute(int beatsPerMinute) {
        this.beatsPerMinute = beatsPerMinute;
        heartModel.setHeartRate(beatsPerMinute);
    }

    @Override
    public void registerObserver(BeatObserver observer) {
        // Not implemented in this example
    }

    @Override
    public void removeObserver(BeatObserver observer) {
        // Not implemented in this example
    }

    @Override
    public void notifyObservers() {
        // Not implemented in this example
    }
}

// Observer interface for Beat Model
interface BeatObserver {
    void updateBeat();
}

// Concrete BeatObserver implementation
class ConsoleBeatObserver implements BeatObserver {
    @Override
    public void updateBeat() {
        System.out.println("Beat received.");
    }
}

public class slip11 {
    public static void main(String[] args) {
        HeartModel heartModel = new HeartModel();
        BeatModel beatModel = new HeartAdapter(heartModel);

        // Register a BeatObserver
        BeatObserver observer = new ConsoleBeatObserver();
        beatModel.registerObserver(observer);

        // Update the beats per minute through the adapter
        beatModel.setBeatsPerMinute(80);
    }
}


Q2.	Write a python program to find all null values in a given dataset and remove them.
[20 M]
mycode

import pandas as pd

df = pd.read_csv('iris3.csv')
df

newdf = df.dropna()

print(newdf.to_string())

****sir code***
import pandas as pd
df = pd.read_csv("forestfires.csv")
df

null = df.isnull()
null

df = df.dropna()
df
df.to_csv('cleaned_dataset.csv', index=False)


Q.3	Create a node.js file that Select all records from the "customers" table, and delete the specified record.	[20 M]
var mysql = require('mysql');

var con = mysql.createConnection({
    host: "localhost",

    user: "root",
  
    //password: "", /*pc xampp database or localhost*/
   //password: "Gaurav@123", /* pc commond line mysql or localhost*/
   password: "raj@123", /* mobile xampp or local host*/

});

// use the  query to connect a localhost
con.connect(function(err) {
  if (err) throw err;
  console.log("Connected to localhost!");
 
  });


 // use the query to create a Database.
  let databaseName = "lab_pro";
  
  let createQuery = `CREATE DATABASE ${databaseName}`;

 
  con.query(createQuery, (err) => {
      if(err==1) throw  "Couldn't create";

      console.log(databaseName+" Database Created Successfully !");
  // use the query to Use a Database.
      let useQuery = `USE ${databaseName}`;
      con.query(useQuery, (error) => {
          if(error) throw error;

          console.log("Using Database"+databaseName);
        })
  // Create a new Table
    let TableName = "customers";
    let table_query = `CREATE TABLE ${TableName} (name VARCHAR(255), address VARCHAR(255))`;
  
    con.query(table_query, (err) => {
      if(err==1) throw "Couldn't create";
      console.log(TableName+" Table created");
    });

//Insert Data in Table

  let Insert_query = `INSERT INTO ${TableName} (name, address) VALUES ?;`;
  
// multiple Values to be inserted
    let values = [
        ['Amit', 'Yellow Park'],
        ['Rishi', 'Park 38'],
        ['Akash', 'Central st 954'],
        ['Pratik', 'Road 989'],
        ['Mangesh', 'Sideway']
    ];
  
  // Executing the query show row are inserted in the table
    con.query(Insert_query, [values], (err) => {
    
        if (err==1) throw "Couldn't create";
        console.log("All Rows Inserted");
    });

//select query to show table data
    let show_student = `SELECT * FROM ${TableName}`
    con.query(show_student, function (err, result, fields) {

        if (err) throw err;
    
        console.log(result);
    
      });

//Executing the query to delete specific row rows
    let D_query = `DELETE FROM student WHERE name = ?`;

   let name = 'Amit';
  
    con.query(D_query,name,(err, rows) => {
         if(err==1) throw "Couldn't delete";
  
        console.log('Number of rows deleted = ' + rows.affectedRows);
    });
// Executing the query to delete all row rows
   let delete_query1 = `DELETE FROM ${TableName}`;
   con.query(delete_query1,(err, rows) =>{
            if (err) throw err;
            console.log("All Records deleted = "+ rows.affectedRows);
        });

  });

