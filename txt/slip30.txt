
Q.1	Write a Java Program to implement Factory method for Pizza Store with createPizza(), orederPizza(), prepare(), Bake(), cut(), box(). Use this to create variety of pizzaâ€™s
	like NyStyleCheesePizza, ChicagoStyleCheesePizza etc.	[20 M]
	
import java.util.ArrayList; 
class ChicagoPizzaStore extends PizzaStore 
{Pizza createPizza(String item) 
{if (item.equals("cheese")) 
{return new ChicagoStyleCheesePizza(); 
} 
else if (item.equals("veggie")) 
{return new ChicagoStyleVeggiePizza(); 
} 
else if (item.equals("clam")) 
{return new ChicagoStyleClamPizza(); 
} 
else if (item.equals("pepperoni")) 
{return new ChicagoStylePepperoniPizza(); 
} 
else return null; 
}} 
class ChicagoStyleCheesePizza extends Pizza 
{public ChicagoStyleCheesePizza() 
{ 
name = "Chicago Style Deep Dish Cheese Pizza"; 
dough = "Extra Thick Crust Dough"; 
sauce = "Plum Tomato Sauce"; 
toppings.add("Shredded Mozzarella Cheese"); 
}

void cut() 
{System.out.println("Cutting the pizza into square slices"); 
}} 
class ChicagoStyleClamPizza extends Pizza 
{public ChicagoStyleClamPizza() 
{ 
name = "Chicago Style Clam Pizza"; 
dough = "Extra Thick Crust Dough"; 
sauce = "Plum Tomato Sauce"; 
toppings.add("Shredded Mozzarella Cheese"); 
toppings.add("Frozen Clams from Chesapeake Bay"); 
} 
void cut() 
{System.out.println("Cutting the pizza into square slices"); 
}} 
class ChicagoStylePepperoniPizza extends Pizza 
{public ChicagoStylePepperoniPizza() 
{ 
name = "Chicago Style Pepperoni Pizza"; 
dough = "Extra Thick Crust Dough"; 
sauce = "Plum Tomato Sauce"; 
toppings.add("Shredded Mozzarella Cheese"); 
toppings.add("Black Olives"); 
toppings.add("Spinach"); 
toppings.add("Eggplant"); 
toppings.add("Sliced Pepperoni"); 
} 
void cut() 
{System.out.println("Cutting the pizza into square slices"); 
}} 
class ChicagoStyleVeggiePizza extends Pizza 
{public ChicagoStyleVeggiePizza() 
{name = "Chicago Deep Dish Veggie Pizza"; 
dough = "Extra Thick Crust Dough"; 
sauce = "Plum Tomato Sauce"; 
toppings.add("Shredded Mozzarella Cheese"); 
toppings.add("Black Olives"); 
toppings.add("Spinach"); 
toppings.add("Eggplant"); 
} 
void cut() 
{System.out.println("Cutting the pizza into square slices"); 
}} 
class DependentPizzaStore 
{public Pizza createPizza(String style, String type) 
{ Pizza pizza = null; 
if (style.equals("NY")) 
{if (type.equals("cheese")) 
{pizza = new NYStyleCheesePizza(); 
} 
else if (type.equals("veggie")) 
{pizza = new NYStyleVeggiePizza(); 
} 
else if (type.equals("clam")) 
{pizza = new NYStyleClamPizza(); 
} 
else if (type.equals("pepperoni")) 
{pizza = new NYStylePepperoniPizza(); 
}} 
else if (style.equals("Chicago")) 
{if (type.equals("cheese")) 
{pizza = new ChicagoStyleCheesePizza(); 
} 
else if (type.equals("veggie")) 
{pizza = new ChicagoStyleVeggiePizza(); 
} 
else if (type.equals("clam")) 
{pizza = new ChicagoStyleClamPizza(); 
} 
else if (type.equals("pepperoni")) 
{pizza = new ChicagoStylePepperoniPizza(); 
}} 
else 
{System.out.println("Error: invalid type of pizza"); 
return null; 
} 
pizza.prepare(); 
pizza.bake(); 
pizza.cut(); 
pizza.box(); 
return pizza; 
}} 
class NYPizzaStore extends PizzaStore 
{Pizza createPizza(String item) 
{if (item.equals("cheese")) 
{return new NYStyleCheesePizza(); 
} 
else if (item.equals("veggie")) 
{return new NYStyleVeggiePizza(); 
} 
else if (item.equals("clam")) 
{return new NYStyleClamPizza(); 
} 
else if (item.equals("pepperoni")) 
{return new NYStylePepperoniPizza(); 
} 
else return null; 
}} 
class NYStyleCheesePizza extends Pizza 
{public NYStyleCheesePizza() 
{ 
name = "NY Style Sauce and Cheese Pizza"; 
dough = "Thin Crust Dough"; 
sauce = "Marinara Sauce"; 
toppings.add("Grated Reggiano Cheese"); 
}} 
class NYStyleClamPizza extends Pizza 
{public NYStyleClamPizza() 
{ 
name = "NY Style Clam Pizza"; 
dough = "Thin Crust Dough"; 
sauce = "Marinara Sauce"; 
toppings.add("Grated Reggiano Cheese"); 
toppings.add("Fresh Clams from Long Island Sound"); 
}} 
class NYStylePepperoniPizza extends Pizza 
{public NYStylePepperoniPizza() 
{ 
name = "NY Style Pepperoni Pizza"; 
dough = "Thin Crust Dough"; 
sauce = "Marinara Sauce"; 
toppings.add("Grated Reggiano Cheese"); 
toppings.add("Sliced Pepperoni"); 
toppings.add("Garlic"); 
toppings.add("Onion"); 
toppings.add("Mushrooms"); 
toppings.add("Red Pepper"); 
}} 
class NYStyleVeggiePizza extends Pizza 
{public NYStyleVeggiePizza() 
{ 
name = "NY Style Veggie Pizza"; 
dough = "Thin Crust Dough"; 
sauce = "Marinara Sauce"; 
toppings.add("Grated Reggiano Cheese"); 
toppings.add("Garlic"); 
toppings.add("Onion"); 
toppings.add("Mushrooms"); 
toppings.add("Red Pepper"); 
}} 
abstract class Pizza 
{ 
String name; 
String dough; 
String sauce; 
ArrayList toppings = new ArrayList(); 
void prepare() 
{ 
System.out.println("Preparing " + name); 
System.out.println("Tossing dough..."); 
System.out.println("Adding sauce..."); 
System.out.println("Adding toppings: "); 
for (int i = 0; i < toppings.size(); i++) 
{System.out.println(" " + toppings.get(i)); 
}} 
void bake() 
{System.out.println("Bake for 25 minutes at 350"); 
} 
void cut() 
{System.out.println("Cutting the pizza into diagonal slices"); 
} 
void box() 
{System.out.println("Place pizza in official PizzaStore box"); 
} 
public String getName() 
{return name; 
} 
public String toString() 
{StringBuffer display = new StringBuffer(); 
display.append("---- " + name + " ----\n"); 
display.append(dough + "\n"); 
display.append(sauce + "\n"); 
for (int i = 0; i < toppings.size(); i++) 
{display.append((String )toppings.get(i) + "\n"); 
} 
return display.toString(); 
}} 
abstract class PizzaStore 
{abstract Pizza createPizza(String item); 
public Pizza orderPizza(String type) 
{Pizza pizza = createPizza(type); 
System.out.println("--- Making a " + pizza.getName() + " ---"); 
pizza.prepare(); 
pizza.bake(); 
pizza.cut(); 
pizza.box(); 
return pizza; 
}
}





public class slip4_19_30
{public static void main(String[] args) 
{ 
PizzaStore nyStore = new NYPizzaStore(); 
PizzaStore chicagoStore = new ChicagoPizzaStore(); 
Pizza pizza = nyStore.orderPizza("cheese"); 
System.out.println("Ethan ordered a " + pizza.getName() + "\n"); 
pizza = chicagoStore.orderPizza("cheese"); 
System.out.println("Joel ordered a " + pizza.getName() + "\n"); 
pizza = nyStore.orderPizza("clam"); 
System.out.println("Ethan ordered a " + pizza.getName() + "\n"); 
pizza = chicagoStore.orderPizza("clam"); 
System.out.println("Joel ordered a " + pizza.getName() + "\n"); 
pizza = nyStore.orderPizza("pepperoni"); 
System.out.println("Ethan ordered a " + pizza.getName() + "\n"); 
pizza = chicagoStore.orderPizza("pepperoni"); 
System.out.println("Joel ordered a " + pizza.getName() + "\n"); 
pizza = nyStore.orderPizza("veggie"); 
System.out.println("Ethan ordered a " + pizza.getName() + "\n"); 
pizza = chicagoStore.orderPizza("veggie"); 
System.out.println("Joel ordered a " + pizza.getName() + "\n"); 
}}

Q.2.	Write a python program to implement Linear SVM.	[20 M]
import pandas as pd

df = pd.read_csv('data.csv')
df.sample(5)

from sklearn.preprocessing import LabelEncoder
label = LabelEncoder()
df['Species_num'] = label.fit_transform(df['Species'])
df.sample(5)

df0=df[df.Species_num==0]
df1=df[df.Species_num==1]
df2=df[df.Species_num==2]

from matplotlib import pyplot as plt
plt.scatter(df0['SepalLengthCm'],df0['SepalWidthCm'],color='green',marker='+')
plt.scatter(df1['SepalLengthCm'],df1['SepalWidthCm'],color='red',marker='+')

input = df.drop(['Species','Species_num'],axis='columns')
input.sample(5)

target = df['Species_num']
target.sample(5)

from sklearn.model_selection import train_test_split
x_train,x_test,y_train,y_test = train_test_split(input,target,test_size=0.2)
len(y_test)

from sklearn.svm import SVC
model = SVC(kernel='linear')
model.fit(x_train,y_train)

model.score(x_test,y_test)

x_test[:10]

y_test[:10]

model.predict(x_test[:10])

***my code***

import pandas as pd
import numpy as np
from sklearn import svm
from sklearn import svm, datasets
import matplotlib.pyplot as plt

df = datasets.load_iris()
df


# df = pd.read_csv('iris.csv')
# df

X = df.data[:, :2]
y = df.target

x_min, x_max = X[:, 0].min() - 1, X[:, 0].max() + 1
y_min, y_max = X[:, 1].min() - 1, X[:, 1].max() + 1
h = (x_max / x_min)/100
xx, yy = np.meshgrid(np.arange(x_min, x_max, h), np.arange(y_min, y_max, h))
X_plot = np.c_[xx.ravel(), yy.ravel()]
C = 1.0

Svc_classifier = svm.SVC(kernel='linear', C=C).fit(X, y)
Z = Svc_classifier.predict(X_plot)
Z = Z.reshape(xx.shape)
plt.figure(figsize=(15, 5))
plt.subplot(121)
plt.contourf(xx, yy, Z, cmap=plt.cm.tab10, alpha=0.3)
plt.scatter(X[:, 0], X[:, 1], c=y, cmap=plt.cm.Set1)
plt.xlabel('Sepal length')
plt.ylabel('Sepal width')
plt.xlim(xx.min(), xx.max())
plt.title('Support Vector Classifier with linear kernel')


Svc_classifier = svm.SVC(kernel = 'rbf', gamma ='auto',C = C).fit(X, y)
Z = Svc_classifier.predict(X_plot)
Z = Z.reshape(xx.shape)
plt.figure(figsize=(15, 5))
plt.subplot(121)
plt.contourf(xx, yy, Z, cmap = plt.cm.tab10, alpha = 0.3)
plt.scatter(X[:, 0], X[:, 1], c = y, cmap = plt.cm.Set1)
plt.xlabel('Sepal length')
plt.ylabel('Sepal width')
plt.xlim(xx.min(), xx.max())
plt.title('Support Vector Classifier with rbf kernel')


Q.3	Implement Login System using Django.	[20 M]


***my code***

root folder is assi1 in 2 folders
1) assi1

urls.py

from django.contrib import admin
from django.urls import path
from my_app.views import index


urlpatterns = [
    path('', index, name='index'),

]




2) my_app (my_app is app folder) in my_app folder present templates folder


apps.py
from django.apps import AppConfig


class MyAppConfig(AppConfig):
    default_auto_field = 'django.db.models.BigAutoField'
    name = 'my_app'





views.py
from django.shortcuts import render

# Create your views here.
def index(request):
    return render(request, 'index.html')
 
 1)template ( in my_app folder present templates folder)

 index.html

<html>
<head>
<title>User login page</title>
<head>
    <script>
          function f(){
                var validRegex =/^[a-zA-Z0-9.!#$%&'+/=?^_`{|}~-]+@[a-zA-Z0-9-]+(?:\.[a-zA-Z0-9-]+)$/;
                var email=document.getElementById("email").value;
                if(!validRegex.test(email))
                    alert("Invalid Email!");
                 else
                    alert("submitted succesfully");
                return false;
         }
    </script>
</head>
<body>
    <form name="login" onsubmit="f()">
    <h1>Login here</h1>
    email id:<input type="text" id="email"/><br><br>
    password:<input type="password" id="password"><br><br>
    <input type="submit" id="submit" value="submit">
    </form>
</body>
</html>


