
Q. 1	Write a Java Program to implement State Pattern for Gumball Machine.
Create instance variable that holds current state from there, we just need to handle all actions, behaviors and state transition that can happen	[20 M]

 interface State {

	public void insertQuarter();
	public void ejectQuarter();
	public void turnCrank();
	public void dispense();
	
	public void refill();
}
 class SoldState implements State {

    GumballMachine gumballMachine;

    public SoldState(GumballMachine gumballMachine) {
        this.gumballMachine = gumballMachine;
    }

	public void insertQuarter() {
		System.out.println("Please wait, we're already giving you a gumball");
	}

	public void ejectQuarter() {
		System.out.println("Sorry, you already turned the crank");
	}

	public void turnCrank() {
		System.out.println("Turning twice doesn't get you another gumball!");
	}

	public void dispense() {
		gumballMachine.releaseBall();
		if (gumballMachine.getCount() > 0) {
			gumballMachine.setState(gumballMachine.getNoQuarterState());
		} else {
			System.out.println("Oops, out of gumballs!");
			gumballMachine.setState(gumballMachine.getSoldOutState());
		}
	}

	public void refill() { }

	public String toString() {
		return "dispensing a gumball";
	}
}

 class SoldOutState implements State {
    GumballMachine gumballMachine;

    public SoldOutState(GumballMachine gumballMachine) {
        this.gumballMachine = gumballMachine;
    }

	public void insertQuarter() {
		System.out.println("You can't insert a quarter, the machine is sold out");
	}

	public void ejectQuarter() {
		System.out.println("You can't eject, you haven't inserted a quarter yet");
	}

	public void turnCrank() {
		System.out.println("You turned, but there are no gumballs");
	}

	public void dispense() {
		System.out.println("No gumball dispensed");
	}
	
	public void refill() { 
		gumballMachine.setState(gumballMachine.getNoQuarterState());
	}

	public String toString() {
		return "sold out";
	}
}

 class NoQuarterState implements State {
    GumballMachine gumballMachine;

    public NoQuarterState(GumballMachine gumballMachine) {
        this.gumballMachine = gumballMachine;
    }

	public void insertQuarter() {
		System.out.println("You inserted a quarter");
		gumballMachine.setState(gumballMachine.getHasQuarterState());
	}

	public void ejectQuarter() {
		System.out.println("You haven't inserted a quarter");
	}

	public void turnCrank() {
		System.out.println("You turned, but there's no quarter");
	 }

	public void dispense() {
		System.out.println("You need to pay first");
	} 
	
	public void refill() { }

	public String toString() {
		return "waiting for quarter";
	}
}

class HasQuarterState implements State {
	GumballMachine gumballMachine;

	public HasQuarterState(GumballMachine gumballMachine) {
		this.gumballMachine = gumballMachine;
	}

	public void insertQuarter() {
		System.out.println("You can't insert another quarter");
	}

	public void ejectQuarter() {
		System.out.println("Quarter returned");
		gumballMachine.setState(gumballMachine.getNoQuarterState());
	}

	public void turnCrank() {
		System.out.println("You turned...");
		gumballMachine.setState(gumballMachine.getSoldState());
	}

    public void dispense() {
        System.out.println("No gumball dispensed");
    }

    public void refill() { }

	public String toString() {
		return "waiting for turn of crank";
	}

}

class GumballMachine {

	State soldOutState;
	State noQuarterState;
	State hasQuarterState;
	State soldState;

	State state;
	int count = 0;

	public GumballMachine(int numberGumballs) {
		soldOutState = new SoldOutState(this);
		noQuarterState = new NoQuarterState(this);
		hasQuarterState = new HasQuarterState(this);
		soldState = new SoldState(this);

		this.count = numberGumballs;
		if (numberGumballs > 0) {
			state = noQuarterState;
		} else {
			state = soldOutState;
		}
	}

	public void insertQuarter() {
		state.insertQuarter();
	}

	public void ejectQuarter() {
		state.ejectQuarter();
	}

	public void turnCrank() {
		state.turnCrank();
		state.dispense();
	}

	void releaseBall() {
		System.out.println("A gumball comes rolling out the slot...");
		if (count != 0) {
			count = count - 1;
		}
	}

	int getCount() {
		return count;
	}

	void refill(int count) {
		this.count += count;
		System.out.println("The gumball machine was just refilled; it's new count is: " + this.count);
		state.refill();
	}

	void setState(State state) {
		this.state = state;
	}
    public State getState() {
        return state;
    }

    public State getSoldOutState() {
        return soldOutState;
    }

    public State getNoQuarterState() {
        return noQuarterState;
    }

    public State getHasQuarterState() {
        return hasQuarterState;
    }

    public State getSoldState() {
        return soldState;
    }

	public String toString() {
		StringBuffer result = new StringBuffer();
		result.append("\nMighty Gumball, Inc.");
		result.append("\nJava-enabled Standing Gumball Model #2004");
		result.append("\nInventory: " + count + " gumball");
		if (count != 1) {
			result.append("s");
		}
		result.append("\n");
		result.append("Machine is " + state + "\n");
		return result.toString();
	}
}

class slip8{

	public static void main(String[] args) {
		GumballMachine gumballMachine = new GumballMachine(2);

		System.out.println(gumballMachine);

		gumballMachine.insertQuarter();
		gumballMachine.turnCrank();

		System.out.println(gumballMachine);

		gumballMachine.insertQuarter();
		gumballMachine.turnCrank();
		gumballMachine.insertQuarter();
		gumballMachine.turnCrank();
		
		gumballMachine.refill(3);
		gumballMachine.insertQuarter();
		gumballMachine.turnCrank();

		System.out.println(gumballMachine);
	}
}


Q.2.	Write a python program to implement Decision Tree whether or not to play Tennis.
[20 M]

***sir code***
import pandas as pd
from sklearn.tree import DecisionTreeClassifier
from sklearn.preprocessing import LabelEncoder

data = pd.read_csv("play_tennis.csv")
data.sample(5)

label_encoder = LabelEncoder()
data['outlook'] = label_encoder.fit_transform(data['outlook'])
data['temp'] = label_encoder.fit_transform(data['temp'])
data['humidity'] = label_encoder.fit_transform(data['humidity'])
data['wind'] = label_encoder.fit_transform(data['wind'])
data['play'] = label_encoder.fit_transform(data['play'])

data
x = data[['outlook', 'temp', 'humidity', 'wind']]
y = data['play']

clf = DecisionTreeClassifier()

clf.fit(x, y)

new_day = [1, 2, 0, 1] 
prediction = clf.predict([new_day])
prediction

predicted_play = label_encoder.inverse_transform(prediction)

print("Prediction:", predicted_play[0])

*** my code***
# Load libraries
import numpy as np
import pandas as pd
from sklearn import metrics #Import scikit-learn metrics module for accuracy calculation

df=pd.read_csv("Play Tennis.csv")
value=['Outlook','Temprature','Humidity','Wind']
df

len(df)           #Dataset Lenght

df.shape  #To see the number of rows and columns in our dataset:

df.head()         #To inspect the first five records of the dataset:

df.tail()         #To inspect the last five records of the dataset:

df.describe()     #To see statistical details of the dataset:

#machine learning algorithms can only learn from numbers (int, float, doubles .. )
#so let us encode it to int
from sklearn import preprocessing
string_to_int= preprocessing.LabelEncoder()                     #encode your data
df=df.apply(string_to_int.fit_transform) #fit and transform it
df

#To divide our data into attribute set and Label:
feature_cols = ['Outlook','Temprature','Humidity','Wind']
X = df[feature_cols ]                               #contains the attribute 
y = df.Play_Tennis                                  #contains the label
#To divide our data into training and test sets:
from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.30) 

# perform training 
from sklearn.tree import DecisionTreeClassifier                             # import the classifier
classifier =DecisionTreeClassifier(criterion="entropy", random_state=100)     # create a classifier object
classifier.fit(X_train, y_train)                                              # fit the classifier with X and Y data or 
DecisionTreeClassifier(class_weight=None, criterion='entropy', max_depth=None,
            max_features=None, max_leaf_nodes=None,
            min_impurity_decrease=0.0, min_impurity_split=None,
            min_samples_leaf=1, min_samples_split=2,
            min_weight_fraction_leaf=0.0, presort=False, random_state=100,
            splitter='best')
#Predict the response for test dataset
y_pred= classifier.predict(X_test)  
# Model Accuracy, how often is the classifier correct?
from sklearn.metrics import accuracy_score
print("Accuracy:",metrics.accuracy_score(y_test, y_pred))
Accuracy: 0.4
Now let's compare some of our predicted values with the actual values and see how accurate we were:
data_p=pd.DataFrame({'Actual':y_test, 'Predicted':y_pred})  
data_p

from sklearn.metrics import classification_report, confusion_matrix  
print(confusion_matrix(y_test, y_pred))  
print(classification_report(y_test, y_pred)) 

from sklearn.tree import export_graphviz
from sklearn.externals.six import StringIO
from IPython.display import Image
import pydotplus
dot_data = StringIO()
export_graphviz(classifier, out_file=dot_data,
filled=True, rounded=True,
special_characters=True,feature_names =value,class_names=['0','1'])
graph = pydotplus.graph_from_dot_data(dot_data.getvalue())
graph.write_png('Play Tennis.png')
Image(graph.create_png())

Q.3	Create a clone of the “Hacker News” website.	[20 M]
***my code***

root folder is assi1 in 2 folders
1) assi1

urls.py

from django.contrib import admin
from django.urls import path
from my_app.views import index


urlpatterns = [
    path('', index, name='index'),

]




2) my_app (my_app is app folder) in my_app folder present templates folder


apps.py
from django.apps import AppConfig


class MyAppConfig(AppConfig):
    default_auto_field = 'django.db.models.BigAutoField'
    name = 'my_app'





views.py
from django.shortcuts import render

# Create your views here.
def index(request):
    return render(request, 'index.html')
 
 1)template ( in my_app folder present templates folder)

 index.html


<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <style>
        .top
        {
            background: #2705bd;
            padding: 30px 30px 10px 30px;
        }
       .top_name1{
            color: aliceblue;
            text-decoration: none;
            text-align: center;
            align-items: center;
            padding-left: 10%;
        }
        .top_name2{
            color: aliceblue;
            text-decoration: none;
            text-align: center;
            align-items: center;
            padding-left: 50%;
        }
        .logo{
     
            
            
        }
        h1{
            margin: 0%;
            color: white;
            background: #413fb4;
            font-size: 50px;
            text-decoration: none;
            padding-left: 9%;
            font-weight: bold;
      
        }
        h3{
            background: #413fb4;
            width: 18%;
            color: rgb(12, 8, 8);
            margin-left: 70%;
            transform: translateY(-50px);
            background-color: yellow;
            border: 1px solid black;
            border-radius: 5px;
            
            
        }
        nav{
            transform: translateY(-40px);
            padding-left: 80px;
        }
        nav a{
            text-decoration: none;
            color: black;
            font-size: 20px;
            text-align: center;
            align-items: center;
            justify-content: center;
            padding-left: 30px;
        }
        .data{
            margin-left: 20px;
            margin-right: 20px;
            background-color: burlywood;
            
        }
     
    </style>
</head>
<body>
    <div class="top" >

        <a href="#" class="top_name1">#1 Trusted Cybersecurity News Platform </a>
        <a href="#" class="top_name2">Followed by 4.50+ million</a>
    </div>
    <div class="logo" >

       <h1>The Hacker News </h1>
        <h3>Get the free Newsteller</h3>
    </div>
    <nav>
        <a href="">Home</a>
        <a href="">Data Branches</a>
        <a href="">Cyber Attack</a>
        <a href="">Vulneabrities</a>
        <a href="">Webinar</a>
        <a href="">Store</a>
        <a href="">Contact</a>
        
    </nav>
    <div class="data">
        <img src="" alt="">
        <h4>Lorem ipsum dolor sit amet consectetur adipisicing elit. Atque, earum praesentium! Voluptatum, eaque ducimus?</h4>
        <p>Lorem, ipsum dolor sit amet consectetur adipisicing elit. Molestiae ullam odit ipsum accusantium reprehenderit aperiam illo asperiores odio, dicta adipisci perspiciatis alias possimus sit eius.</p>
    </div>
</body>
</html>